//
//	VidyoClientDispatcher.js
//	VidyoClient
//
//	This file is auto generated, do not edit this file
//	Copyright (c) 2016 Vidyo, Inc. All rights reserved.
//

var VidyoClientLib;
(function (VidyoClientLib) {
	var VidyoClient = (function (plugInDivId, onStatus){
		function VidyoClient(plugInDivId, onStatus)
		{
			var contextObj = this;

			this.CreateVidyoCalendarManager = function(feedback) {
				var args = [].slice.apply(arguments);
				if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
					if(arguments[0].hasOwnProperty('feedback')){
						var params = vcUtilsParam({calendarMgr: this.objId, feedback: (arguments[0].feedback ? arguments[0].feedback.objId : 0)});
					} else {
						return Promise.reject(new MissingArgumentException('Missing Parameters', ['feedback'], Object.keys(arguments[0])).error);
					}
				} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
					var params = vcUtilsParam({calendarMgr: this.objId, feedback: (arguments[0] ? arguments[0].objId : 0)});
				} else {
					return Promise.reject(new Error('Invalid Parameters'));
				}

				return new Promise(function(resolve, reject){
					function OnComplete(response) {
						var vidyoCalendarManager = new contextObj.VidyoCalendarManager(response.data.VidyoCalendarManager);	// copy construct
						objects[vidyoCalendarManager.objId] = vidyoCalendarManager;
						resolve(vidyoCalendarManager);
					}
					function OnError(response) {
						reject(Error(response));
					}
					GetRequest("VidyoCalendarManagerConstruct?" + params, OnComplete, OnError);
				});
			}
			this.VidyoCalendarManager = function(feedback) {
				if(arguments.length === 1 && arguments[0].objId && arguments[0].objType && arguments[0].objType === "VidyoCalendarManager"){
					vcUtilsExtend(this, arguments[0]);	//	copy construct
				} else {
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('feedback')){
							var params = vcUtilsParam({calendarMgr: this.objId, feedback: (arguments[0].feedback ? arguments[0].feedback.objId : 0)});
						} else {
							throw new MissingArgumentException('Missing Parameters', ['feedback'], Object.keys(arguments[0])).error;
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({calendarMgr: this.objId, feedback: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						throw new Error('Invalid Parameters');
					}
					var response = GetRequest("VidyoCalendarManagerConstruct?" + params);
					if(response == null)
						throw new Error('No Response from VidyoClient');
					vcUtilsExtend(this, response.VidyoCalendarManager);
					objects[this.objId] = this;

				}

				this.Destruct = function() {
					GetRequest("VidyoCalendarManagerDestruct?" + vcUtilsParam({ calendarMgr: this.objId }), function(){}, function(){});
					delete objects[this.objId];
				}

				this.CreateCalendarInstance = function(feedback, pluginServiceId, calendarName, createToken) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('feedback') && arguments[0].hasOwnProperty('pluginServiceId') && arguments[0].hasOwnProperty('calendarName') && arguments[0].hasOwnProperty('createToken')){
							var params = vcUtilsParam({calMgr: this.objId, feedback: (arguments[0].feedback ? arguments[0].feedback.objId : 0), pluginServiceId: arguments[0].pluginServiceId, calendarName: arguments[0].calendarName, createToken: arguments[0].createToken});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['feedback', 'pluginServiceId', 'calendarName', 'createToken'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "string") && (typeof(arguments[3]) === "string")){
						var params = vcUtilsParam({calMgr: this.objId, feedback: (arguments[0] ? arguments[0].objId : 0), pluginServiceId: arguments[1], calendarName: arguments[2], createToken: arguments[3]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoCalendarManagerCreateCalendarInstance?" + params, OnComplete, OnError);
					});
				}

				this.DestroyCalendarInstance = function(cal) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('cal')){
							var params = vcUtilsParam({calMgr: this.objId, cal: (arguments[0].cal ? arguments[0].cal.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['cal'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({calMgr: this.objId, cal: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoCalendarManagerDestroyCalendarInstance?" + params, OnComplete, OnError);
					});
				}

				this.GetCalendarRegisteredServices = function(svcNames) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('svcNames')){
							var params = vcUtilsParam({cm: this.objId, svcNames: JSON.stringify({"svcNames": arguments[0].svcNames})});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['svcNames'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({cm: this.objId, svcNames: JSON.stringify({"svcNames": arguments[0]})});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							if(svcNames&& response.data.svcNames)
								vcUtilsExtend(svcNames, response.data.svcNames);
							resolve(response.data);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoCalendarManagerGetCalendarRegisteredServices?" + params, OnComplete, OnError);
					});
				}

				this.GetCalendarRegisteredServicesAsync = function(onComplete) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onComplete')){
							this.VidyoCalendarManagerOnGetServicesComplete = arguments[0].onComplete;
							var params = vcUtilsParam({cm: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onComplete'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoCalendarManagerOnGetServicesComplete = onComplete;
						var params = vcUtilsParam({cm: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoCalendarManagerGetCalendarRegisteredServicesAsync?" + params, OnComplete, OnError);
					});
				}

				this.RegisterCalendarService = function(pluginServiceName, dllName) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('pluginServiceName') && arguments[0].hasOwnProperty('dllName')){
							var params = vcUtilsParam({cm: this.objId, pluginServiceName: arguments[0].pluginServiceName, dllName: arguments[0].dllName});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['pluginServiceName', 'dllName'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string")){
						var params = vcUtilsParam({cm: this.objId, pluginServiceName: arguments[0], dllName: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoCalendarManagerRegisterCalendarService?" + params, OnComplete, OnError);
					});
				}

				return this;
			}

			this.CreateVidyoCalendarManagerFeedback = function(calendarCreated, calendarDestroyed) {
				var args = [].slice.apply(arguments);
				if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
					if(arguments[0].hasOwnProperty('calendarCreated') && arguments[0].hasOwnProperty('calendarDestroyed')){
						var params = vcUtilsParam({f: this.objId});
					} else {
						return Promise.reject(new MissingArgumentException('Missing Parameters', ['calendarCreated', 'calendarDestroyed'], Object.keys(arguments[0])).error);
					}
				} else if (arguments.length === 2 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function")){
					var params = vcUtilsParam({f: this.objId});
				} else {
					return Promise.reject(new Error('Invalid Parameters'));
				}

				return new Promise(function(resolve, reject){
					function OnComplete(response) {
						var vidyoCalendarManagerFeedback = new contextObj.VidyoCalendarManagerFeedback(response.data.VidyoCalendarManagerFeedback);	// copy construct
						if(args.length === 1 && (typeof(args[0]) === "object") && !args[0].objId){
							vidyoCalendarManagerFeedback.VidyoCalendarManagerFeedbackCalendarCreated = args[0].calendarCreated;
							vidyoCalendarManagerFeedback.VidyoCalendarManagerFeedbackCalendarDestroyed = args[0].calendarDestroyed;
						} else {
							vidyoCalendarManagerFeedback.VidyoCalendarManagerFeedbackCalendarCreated = calendarCreated;
							vidyoCalendarManagerFeedback.VidyoCalendarManagerFeedbackCalendarDestroyed = calendarDestroyed;
						}
						objects[vidyoCalendarManagerFeedback.objId] = vidyoCalendarManagerFeedback;
						resolve(vidyoCalendarManagerFeedback);
					}
					function OnError(response) {
						reject(Error(response));
					}
					GetRequest("VidyoCalendarManagerFeedbackConstruct?" + params, OnComplete, OnError);
				});
			}
			this.VidyoCalendarManagerFeedback = function(calendarCreated, calendarDestroyed) {
				if(arguments.length === 1 && arguments[0].objId && arguments[0].objType && arguments[0].objType === "VidyoCalendarManagerFeedback"){
					vcUtilsExtend(this, arguments[0]);	//	copy construct
				} else {
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('calendarCreated') && arguments[0].hasOwnProperty('calendarDestroyed')){
							this.VidyoCalendarManagerFeedbackCalendarCreated = arguments[0].calendarCreated;
							this.VidyoCalendarManagerFeedbackCalendarDestroyed = arguments[0].calendarDestroyed;
							var params = vcUtilsParam({f: this.objId});
						} else {
							throw new MissingArgumentException('Missing Parameters', ['calendarCreated', 'calendarDestroyed'], Object.keys(arguments[0])).error;
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function")){
						this.VidyoCalendarManagerFeedbackCalendarCreated = calendarCreated;
						this.VidyoCalendarManagerFeedbackCalendarDestroyed = calendarDestroyed;
						var params = vcUtilsParam({f: this.objId});
					} else {
						throw new Error('Invalid Parameters');
					}
					var response = GetRequest("VidyoCalendarManagerFeedbackConstruct?" + params);
					if(response == null)
						throw new Error('No Response from VidyoClient');
					vcUtilsExtend(this, response.VidyoCalendarManagerFeedback);
					objects[this.objId] = this;

				}

				return this;
			}

			this.VidyoCalendar = function(){

				this.Destruct = function() {
					GetRequest("VidyoCalendarDestruct?" + vcUtilsParam({ obj: this.objId }), function(){}, function(){});
					delete objects[this.objId];
				}

				this.Connect = function(connProperties) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('connProperties')){
							var params = vcUtilsParam({c: this.objId, connProperties: JSON.stringify({"connProperties": arguments[0].connProperties})});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['connProperties'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({c: this.objId, connProperties: JSON.stringify({"connProperties": arguments[0]})});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoCalendarConnect?" + params, OnComplete, OnError);
					});
				}

				this.CreateMeetingWithId = function(id, feedback, createToken) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('id') && arguments[0].hasOwnProperty('feedback') && arguments[0].hasOwnProperty('createToken')){
							var params = vcUtilsParam({c: this.objId, id: arguments[0].id, feedback: (arguments[0].feedback ? arguments[0].feedback.objId : 0), createToken: arguments[0].createToken});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['id', 'feedback', 'createToken'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "object") && (typeof(arguments[2]) === "string")){
						var params = vcUtilsParam({c: this.objId, id: arguments[0], feedback: (arguments[1] ? arguments[1].objId : 0), createToken: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoCalendarCreateMeetingWithId?" + params, OnComplete, OnError);
					});
				}

				this.Disconnect = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoCalendarDisconnect?" + params, OnComplete, OnError);
					});
				}

				this.GetCapabilities = function(requestedCapabilities) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('requestedCapabilities')){
							var params = vcUtilsParam({c: this.objId, requestedCapabilities: JSON.stringify({"requestedCapabilities": arguments[0].requestedCapabilities})});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['requestedCapabilities'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({c: this.objId, requestedCapabilities: JSON.stringify({"requestedCapabilities": arguments[0]})});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoCalendarGetCapabilities?" + params, OnComplete, OnError);
					});
				}

				this.GetId = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoCalendarGetId?" + params, OnComplete, OnError);
					});
				}

				this.GetServiceState = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoCalendarGetServiceState?" + params, OnComplete, OnError);
					});
				}

				this.GetServiceType = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoCalendarGetServiceType?" + params, OnComplete, OnError);
					});
				}

				this.SearchMeetings = function(searchText, beginDateTime, endDateTime, index, pageSize) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('searchText') && arguments[0].hasOwnProperty('beginDateTime') && arguments[0].hasOwnProperty('endDateTime') && arguments[0].hasOwnProperty('index') && arguments[0].hasOwnProperty('pageSize')){
							var params = vcUtilsParam({c: this.objId, searchText: arguments[0].searchText, beginDateTime: arguments[0].beginDateTime, endDateTime: arguments[0].endDateTime, index: arguments[0].index, pageSize: arguments[0].pageSize});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['searchText', 'beginDateTime', 'endDateTime', 'index', 'pageSize'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 5 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "string") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number")){
						var params = vcUtilsParam({c: this.objId, searchText: arguments[0], beginDateTime: arguments[1], endDateTime: arguments[2], index: arguments[3], pageSize: arguments[4]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoCalendarSearchMeetings?" + params, OnComplete, OnError);
					});
				}

				this.SearchMeetingsByDay = function(year, month, day, createToken) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('year') && arguments[0].hasOwnProperty('month') && arguments[0].hasOwnProperty('day') && arguments[0].hasOwnProperty('createToken')){
							var params = vcUtilsParam({c: this.objId, year: arguments[0].year, month: arguments[0].month, day: arguments[0].day, createToken: arguments[0].createToken});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['year', 'month', 'day', 'createToken'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "string")){
						var params = vcUtilsParam({c: this.objId, year: arguments[0], month: arguments[1], day: arguments[2], createToken: arguments[3]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoCalendarSearchMeetingsByDay?" + params, OnComplete, OnError);
					});
				}

				this.SetSingleSignOn = function(setSingleSignOn) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('setSingleSignOn')){
							var params = vcUtilsParam({c: this.objId, setSingleSignOn: arguments[0].setSingleSignOn});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['setSingleSignOn'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({c: this.objId, setSingleSignOn: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoCalendarSetSingleSignOn?" + params, OnComplete, OnError);
					});
				}

				return this;
			}

			this.CreateVidyoCalendarFeedback = function(connectState, disconnected, capabilities, meetingReminder, meetingCreatedById, meetingCreatedByService, meetingUpdatedByService, meetingRemovedByService, getMeetingResults, seriesUpdate) {
				var args = [].slice.apply(arguments);
				if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
					if(arguments[0].hasOwnProperty('connectState') && arguments[0].hasOwnProperty('disconnected') && arguments[0].hasOwnProperty('capabilities') && arguments[0].hasOwnProperty('meetingReminder') && arguments[0].hasOwnProperty('meetingCreatedById') && arguments[0].hasOwnProperty('meetingCreatedByService') && arguments[0].hasOwnProperty('meetingUpdatedByService') && arguments[0].hasOwnProperty('meetingRemovedByService') && arguments[0].hasOwnProperty('getMeetingResults') && arguments[0].hasOwnProperty('seriesUpdate')){
						var params = vcUtilsParam({f: this.objId});
					} else {
						return Promise.reject(new MissingArgumentException('Missing Parameters', ['connectState', 'disconnected', 'capabilities', 'meetingReminder', 'meetingCreatedById', 'meetingCreatedByService', 'meetingUpdatedByService', 'meetingRemovedByService', 'getMeetingResults', 'seriesUpdate'], Object.keys(arguments[0])).error);
					}
				} else if (arguments.length === 10 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "function") && (typeof(arguments[4]) === "function") && (typeof(arguments[5]) === "function") && (typeof(arguments[6]) === "function") && (typeof(arguments[7]) === "function") && (typeof(arguments[8]) === "function") && (typeof(arguments[9]) === "function")){
					var params = vcUtilsParam({f: this.objId});
				} else {
					return Promise.reject(new Error('Invalid Parameters'));
				}

				return new Promise(function(resolve, reject){
					function OnComplete(response) {
						var vidyoCalendarFeedback = new contextObj.VidyoCalendarFeedback(response.data.VidyoCalendarFeedback);	// copy construct
						if(args.length === 1 && (typeof(args[0]) === "object") && !args[0].objId){
							vidyoCalendarFeedback.VidyoCalendarFeedbackConnectResult = args[0].connectState;
							vidyoCalendarFeedback.VidyoCalendarFeedbackDisconnected = args[0].disconnected;
							vidyoCalendarFeedback.VidyoCalendarFeedbackGetCapabilitiesResult = args[0].capabilities;
							vidyoCalendarFeedback.VidyoCalendarFeedbackMeetingReminder = args[0].meetingReminder;
							vidyoCalendarFeedback.VidyoCalendarFeedbackMeetingCreatedById = args[0].meetingCreatedById;
							vidyoCalendarFeedback.VidyoCalendarFeedbackMeetingCreatedByService = args[0].meetingCreatedByService;
							vidyoCalendarFeedback.VidyoCalendarFeedbackMeetingUpdatedByService = args[0].meetingUpdatedByService;
							vidyoCalendarFeedback.VidyoCalendarFeedbackMeetingRemovedByService = args[0].meetingRemovedByService;
							vidyoCalendarFeedback.VidyoCalendarFeedbackGetMeetingsResult = args[0].getMeetingResults;
							vidyoCalendarFeedback.VidyoCalendarFeedbackSeriesUpdate = args[0].seriesUpdate;
						} else {
							vidyoCalendarFeedback.VidyoCalendarFeedbackConnectResult = connectState;
							vidyoCalendarFeedback.VidyoCalendarFeedbackDisconnected = disconnected;
							vidyoCalendarFeedback.VidyoCalendarFeedbackGetCapabilitiesResult = capabilities;
							vidyoCalendarFeedback.VidyoCalendarFeedbackMeetingReminder = meetingReminder;
							vidyoCalendarFeedback.VidyoCalendarFeedbackMeetingCreatedById = meetingCreatedById;
							vidyoCalendarFeedback.VidyoCalendarFeedbackMeetingCreatedByService = meetingCreatedByService;
							vidyoCalendarFeedback.VidyoCalendarFeedbackMeetingUpdatedByService = meetingUpdatedByService;
							vidyoCalendarFeedback.VidyoCalendarFeedbackMeetingRemovedByService = meetingRemovedByService;
							vidyoCalendarFeedback.VidyoCalendarFeedbackGetMeetingsResult = getMeetingResults;
							vidyoCalendarFeedback.VidyoCalendarFeedbackSeriesUpdate = seriesUpdate;
						}
						objects[vidyoCalendarFeedback.objId] = vidyoCalendarFeedback;
						resolve(vidyoCalendarFeedback);
					}
					function OnError(response) {
						reject(Error(response));
					}
					GetRequest("VidyoCalendarFeedbackConstruct?" + params, OnComplete, OnError);
				});
			}
			this.VidyoCalendarFeedback = function(connectState, disconnected, capabilities, meetingReminder, meetingCreatedById, meetingCreatedByService, meetingUpdatedByService, meetingRemovedByService, getMeetingResults, seriesUpdate) {
				if(arguments.length === 1 && arguments[0].objId && arguments[0].objType && arguments[0].objType === "VidyoCalendarFeedback"){
					vcUtilsExtend(this, arguments[0]);	//	copy construct
				} else {
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('connectState') && arguments[0].hasOwnProperty('disconnected') && arguments[0].hasOwnProperty('capabilities') && arguments[0].hasOwnProperty('meetingReminder') && arguments[0].hasOwnProperty('meetingCreatedById') && arguments[0].hasOwnProperty('meetingCreatedByService') && arguments[0].hasOwnProperty('meetingUpdatedByService') && arguments[0].hasOwnProperty('meetingRemovedByService') && arguments[0].hasOwnProperty('getMeetingResults') && arguments[0].hasOwnProperty('seriesUpdate')){
							this.VidyoCalendarFeedbackConnectResult = arguments[0].connectState;
							this.VidyoCalendarFeedbackDisconnected = arguments[0].disconnected;
							this.VidyoCalendarFeedbackGetCapabilitiesResult = arguments[0].capabilities;
							this.VidyoCalendarFeedbackMeetingReminder = arguments[0].meetingReminder;
							this.VidyoCalendarFeedbackMeetingCreatedById = arguments[0].meetingCreatedById;
							this.VidyoCalendarFeedbackMeetingCreatedByService = arguments[0].meetingCreatedByService;
							this.VidyoCalendarFeedbackMeetingUpdatedByService = arguments[0].meetingUpdatedByService;
							this.VidyoCalendarFeedbackMeetingRemovedByService = arguments[0].meetingRemovedByService;
							this.VidyoCalendarFeedbackGetMeetingsResult = arguments[0].getMeetingResults;
							this.VidyoCalendarFeedbackSeriesUpdate = arguments[0].seriesUpdate;
							var params = vcUtilsParam({f: this.objId});
						} else {
							throw new MissingArgumentException('Missing Parameters', ['connectState', 'disconnected', 'capabilities', 'meetingReminder', 'meetingCreatedById', 'meetingCreatedByService', 'meetingUpdatedByService', 'meetingRemovedByService', 'getMeetingResults', 'seriesUpdate'], Object.keys(arguments[0])).error;
						}
					} else if (arguments.length === 10 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "function") && (typeof(arguments[4]) === "function") && (typeof(arguments[5]) === "function") && (typeof(arguments[6]) === "function") && (typeof(arguments[7]) === "function") && (typeof(arguments[8]) === "function") && (typeof(arguments[9]) === "function")){
						this.VidyoCalendarFeedbackConnectResult = connectState;
						this.VidyoCalendarFeedbackDisconnected = disconnected;
						this.VidyoCalendarFeedbackGetCapabilitiesResult = capabilities;
						this.VidyoCalendarFeedbackMeetingReminder = meetingReminder;
						this.VidyoCalendarFeedbackMeetingCreatedById = meetingCreatedById;
						this.VidyoCalendarFeedbackMeetingCreatedByService = meetingCreatedByService;
						this.VidyoCalendarFeedbackMeetingUpdatedByService = meetingUpdatedByService;
						this.VidyoCalendarFeedbackMeetingRemovedByService = meetingRemovedByService;
						this.VidyoCalendarFeedbackGetMeetingsResult = getMeetingResults;
						this.VidyoCalendarFeedbackSeriesUpdate = seriesUpdate;
						var params = vcUtilsParam({f: this.objId});
					} else {
						throw new Error('Invalid Parameters');
					}
					var response = GetRequest("VidyoCalendarFeedbackConstruct?" + params);
					if(response == null)
						throw new Error('No Response from VidyoClient');
					vcUtilsExtend(this, response.VidyoCalendarFeedback);
					objects[this.objId] = this;

				}

				this.Destruct = function() {
					GetRequest("VidyoCalendarFeedbackDestruct?" + vcUtilsParam({ obj: this.objId }), function(){}, function(){});
					delete objects[this.objId];
				}

				return this;
			}

			this.CreateVidyoConnector = function(viewId, viewStyle, remoteParticipants, logFileFilter, logFileName, userData) {
				var args = [].slice.apply(arguments);
				if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
					if(arguments[0].hasOwnProperty('viewId') && arguments[0].hasOwnProperty('viewStyle') && arguments[0].hasOwnProperty('remoteParticipants') && arguments[0].hasOwnProperty('logFileFilter') && arguments[0].hasOwnProperty('logFileName') && arguments[0].hasOwnProperty('userData')){
						arguments[0].viewId = UpdateViewOnDOM({uiEvent:"create", viewId:arguments[0].viewId, viewStyle:arguments[0].viewStyle, remoteParticipants:arguments[0].remoteParticipants, logFileFilter:arguments[0].logFileFilter, logFileName:arguments[0].logFileName, userData:arguments[0].userData});
						var params = vcUtilsParam({c: this.objId, viewId: arguments[0].viewId, viewStyle: arguments[0].viewStyle, remoteParticipants: arguments[0].remoteParticipants, logFileFilter: arguments[0].logFileFilter, logFileName: arguments[0].logFileName, userData: arguments[0].userData});
					} else {
						return Promise.reject(new MissingArgumentException('Missing Parameters', ['viewId', 'viewStyle', 'remoteParticipants', 'logFileFilter', 'logFileName', 'userData'], Object.keys(arguments[0])).error);
					}
				} else if (arguments.length === 6 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "string") && (typeof(arguments[4]) === "string") && (typeof(arguments[5]) === "number")){
					arguments[0] = UpdateViewOnDOM({uiEvent:"create", viewId:viewId, viewStyle:viewStyle, remoteParticipants:remoteParticipants, logFileFilter:logFileFilter, logFileName:logFileName, userData:userData});
					var params = vcUtilsParam({c: this.objId, viewId: arguments[0], viewStyle: arguments[1], remoteParticipants: arguments[2], logFileFilter: arguments[3], logFileName: arguments[4], userData: arguments[5]});
				} else {
					return Promise.reject(new Error('Invalid Parameters'));
				}

				return new Promise(function(resolve, reject){
					function OnComplete(response) {
						var vidyoConnector = new contextObj.VidyoConnector(response.data.VidyoConnector);	// copy construct
						objects[vidyoConnector.objId] = vidyoConnector;
						resolve(vidyoConnector);
					}
					function OnError(response) {
						reject(Error(response));
					}
					GetRequest("VidyoConnectorConstruct?" + params, OnComplete, OnError);
				});
			}
			this.VidyoConnector = function(viewId, viewStyle, remoteParticipants, logFileFilter, logFileName, userData) {
				if(arguments.length === 1 && arguments[0].objId && arguments[0].objType && arguments[0].objType === "VidyoConnector"){
					vcUtilsExtend(this, arguments[0]);	//	copy construct
				} else {
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('viewId') && arguments[0].hasOwnProperty('viewStyle') && arguments[0].hasOwnProperty('remoteParticipants') && arguments[0].hasOwnProperty('logFileFilter') && arguments[0].hasOwnProperty('logFileName') && arguments[0].hasOwnProperty('userData')){
							arguments[0].viewId = UpdateViewOnDOM({uiEvent:"constructor", viewId:arguments[0].viewId, viewStyle:arguments[0].viewStyle, remoteParticipants:arguments[0].remoteParticipants, logFileFilter:arguments[0].logFileFilter, logFileName:arguments[0].logFileName, userData:arguments[0].userData});
							var params = vcUtilsParam({c: this.objId, viewId: arguments[0].viewId, viewStyle: arguments[0].viewStyle, remoteParticipants: arguments[0].remoteParticipants, logFileFilter: arguments[0].logFileFilter, logFileName: arguments[0].logFileName, userData: arguments[0].userData});
						} else {
							throw new MissingArgumentException('Missing Parameters', ['viewId', 'viewStyle', 'remoteParticipants', 'logFileFilter', 'logFileName', 'userData'], Object.keys(arguments[0])).error;
						}
					} else if (arguments.length === 6 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "string") && (typeof(arguments[4]) === "string") && (typeof(arguments[5]) === "number")){
						arguments[0] = UpdateViewOnDOM({uiEvent:"constructor", viewId:viewId, viewStyle:viewStyle, remoteParticipants:remoteParticipants, logFileFilter:logFileFilter, logFileName:logFileName, userData:userData});
						var params = vcUtilsParam({c: this.objId, viewId: arguments[0], viewStyle: arguments[1], remoteParticipants: arguments[2], logFileFilter: arguments[3], logFileName: arguments[4], userData: arguments[5]});
					} else {
						throw new Error('Invalid Parameters');
					}
					var response = GetRequest("VidyoConnectorConstruct?" + params);
					if(response == null)
						throw new Error('No Response from VidyoClient');
					vcUtilsExtend(this, response.VidyoConnector);
					objects[this.objId] = this;

				}

				this.Destruct = function() {
					GetRequest("VidyoConnectorDestruct?" + vcUtilsParam({ c: this.objId }), function(){}, function(){});
					delete objects[this.objId];
				}

				this.AddAudioDeviceToWhitelist = function(deviceName) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('deviceName')){
							var params = vcUtilsParam({c: this.objId, deviceName: arguments[0].deviceName});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['deviceName'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({c: this.objId, deviceName: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorAddAudioDeviceToWhitelist?" + params, OnComplete, OnError);
					});
				}

				this.AddMessageClass = function(messageClass) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('messageClass')){
							var params = vcUtilsParam({c: this.objId, messageClass: arguments[0].messageClass});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['messageClass'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({c: this.objId, messageClass: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorAddMessageClass?" + params, OnComplete, OnError);
					});
				}

				this.ApproveRaisedHand = function(participant, requestId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('participant') && arguments[0].hasOwnProperty('requestId')){
							var params = vcUtilsParam({c: this.objId, participant: (arguments[0].participant ? arguments[0].participant.objId : 0), requestId: arguments[0].requestId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['participant', 'requestId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "string")){
						var params = vcUtilsParam({c: this.objId, participant: (arguments[0] ? arguments[0].objId : 0), requestId: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorApproveRaisedHand?" + params, OnComplete, OnError);
					});
				}

				this.AssignViewToCompositeRenderer = function(viewId, viewStyle, remoteParticipants) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('viewId') && arguments[0].hasOwnProperty('viewStyle') && arguments[0].hasOwnProperty('remoteParticipants')){
							arguments[0].viewId = UpdateViewOnDOM({uiEvent:"AssignViewToCompositeRenderer", viewId:arguments[0].viewId, viewStyle:arguments[0].viewStyle, remoteParticipants:arguments[0].remoteParticipants});
							var params = vcUtilsParam({c: this.objId, viewId: arguments[0].viewId, viewStyle: arguments[0].viewStyle, remoteParticipants: arguments[0].remoteParticipants});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['viewId', 'viewStyle', 'remoteParticipants'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "number")){
						arguments[0] = UpdateViewOnDOM({uiEvent:"AssignViewToCompositeRenderer", viewId:viewId, viewStyle:viewStyle, remoteParticipants:remoteParticipants});
						var params = vcUtilsParam({c: this.objId, viewId: arguments[0], viewStyle: arguments[1], remoteParticipants: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorAssignViewToCompositeRenderer?" + params, OnComplete, OnError);
					});
				}

				this.AssignViewToLocalCamera = function(viewId, localCamera, displayCropped, allowZoom) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('viewId') && arguments[0].hasOwnProperty('localCamera') && arguments[0].hasOwnProperty('displayCropped') && arguments[0].hasOwnProperty('allowZoom')){
							arguments[0].viewId = UpdateViewOnDOM({uiEvent:"AssignViewToLocalCamera", viewId:arguments[0].viewId, localCamera:arguments[0].localCamera, displayCropped:arguments[0].displayCropped, allowZoom:arguments[0].allowZoom});
							var params = vcUtilsParam({c: this.objId, viewId: arguments[0].viewId, localCamera: (arguments[0].localCamera ? arguments[0].localCamera.objId : 0), displayCropped: arguments[0].displayCropped, allowZoom: arguments[0].allowZoom});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['viewId', 'localCamera', 'displayCropped', 'allowZoom'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "object") && (typeof(arguments[2]) === "boolean") && (typeof(arguments[3]) === "boolean")){
						arguments[0] = UpdateViewOnDOM({uiEvent:"AssignViewToLocalCamera", viewId:viewId, localCamera:localCamera, displayCropped:displayCropped, allowZoom:allowZoom});
						var params = vcUtilsParam({c: this.objId, viewId: arguments[0], localCamera: (arguments[1] ? arguments[1].objId : 0), displayCropped: arguments[2], allowZoom: arguments[3]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorAssignViewToLocalCamera?" + params, OnComplete, OnError);
					});
				}

				this.AssignViewToLocalMonitor = function(viewId, localMonitor, displayCropped, allowZoom) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('viewId') && arguments[0].hasOwnProperty('localMonitor') && arguments[0].hasOwnProperty('displayCropped') && arguments[0].hasOwnProperty('allowZoom')){
							arguments[0].viewId = UpdateViewOnDOM({uiEvent:"AssignViewToLocalMonitor", viewId:arguments[0].viewId, localMonitor:arguments[0].localMonitor, displayCropped:arguments[0].displayCropped, allowZoom:arguments[0].allowZoom});
							var params = vcUtilsParam({c: this.objId, viewId: arguments[0].viewId, localMonitor: (arguments[0].localMonitor ? arguments[0].localMonitor.objId : 0), displayCropped: arguments[0].displayCropped, allowZoom: arguments[0].allowZoom});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['viewId', 'localMonitor', 'displayCropped', 'allowZoom'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "object") && (typeof(arguments[2]) === "boolean") && (typeof(arguments[3]) === "boolean")){
						arguments[0] = UpdateViewOnDOM({uiEvent:"AssignViewToLocalMonitor", viewId:viewId, localMonitor:localMonitor, displayCropped:displayCropped, allowZoom:allowZoom});
						var params = vcUtilsParam({c: this.objId, viewId: arguments[0], localMonitor: (arguments[1] ? arguments[1].objId : 0), displayCropped: arguments[2], allowZoom: arguments[3]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							if(localMonitor&& response.data.localMonitor)
								vcUtilsExtend(localMonitor, response.data.localMonitor);
							resolve(response.data);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorAssignViewToLocalMonitor?" + params, OnComplete, OnError);
					});
				}

				this.AssignViewToLocalWindowShare = function(viewId, localWindowShare, displayCropped, allowZoom) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('viewId') && arguments[0].hasOwnProperty('localWindowShare') && arguments[0].hasOwnProperty('displayCropped') && arguments[0].hasOwnProperty('allowZoom')){
							arguments[0].viewId = UpdateViewOnDOM({uiEvent:"AssignViewToLocalWindowShare", viewId:arguments[0].viewId, localWindowShare:arguments[0].localWindowShare, displayCropped:arguments[0].displayCropped, allowZoom:arguments[0].allowZoom});
							var params = vcUtilsParam({c: this.objId, viewId: arguments[0].viewId, localWindowShare: (arguments[0].localWindowShare ? arguments[0].localWindowShare.objId : 0), displayCropped: arguments[0].displayCropped, allowZoom: arguments[0].allowZoom});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['viewId', 'localWindowShare', 'displayCropped', 'allowZoom'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "object") && (typeof(arguments[2]) === "boolean") && (typeof(arguments[3]) === "boolean")){
						arguments[0] = UpdateViewOnDOM({uiEvent:"AssignViewToLocalWindowShare", viewId:viewId, localWindowShare:localWindowShare, displayCropped:displayCropped, allowZoom:allowZoom});
						var params = vcUtilsParam({c: this.objId, viewId: arguments[0], localWindowShare: (arguments[1] ? arguments[1].objId : 0), displayCropped: arguments[2], allowZoom: arguments[3]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							if(localWindowShare&& response.data.localWindowShare)
								vcUtilsExtend(localWindowShare, response.data.localWindowShare);
							resolve(response.data);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorAssignViewToLocalWindowShare?" + params, OnComplete, OnError);
					});
				}

				this.AssignViewToRemoteCamera = function(viewId, remoteCamera, displayCropped, allowZoom) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('viewId') && arguments[0].hasOwnProperty('remoteCamera') && arguments[0].hasOwnProperty('displayCropped') && arguments[0].hasOwnProperty('allowZoom')){
							arguments[0].viewId = UpdateViewOnDOM({uiEvent:"AssignViewToRemoteCamera", viewId:arguments[0].viewId, remoteCamera:arguments[0].remoteCamera, displayCropped:arguments[0].displayCropped, allowZoom:arguments[0].allowZoom});
							var params = vcUtilsParam({c: this.objId, viewId: arguments[0].viewId, remoteCamera: (arguments[0].remoteCamera ? arguments[0].remoteCamera.objId : 0), displayCropped: arguments[0].displayCropped, allowZoom: arguments[0].allowZoom});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['viewId', 'remoteCamera', 'displayCropped', 'allowZoom'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "object") && (typeof(arguments[2]) === "boolean") && (typeof(arguments[3]) === "boolean")){
						arguments[0] = UpdateViewOnDOM({uiEvent:"AssignViewToRemoteCamera", viewId:viewId, remoteCamera:remoteCamera, displayCropped:displayCropped, allowZoom:allowZoom});
						var params = vcUtilsParam({c: this.objId, viewId: arguments[0], remoteCamera: (arguments[1] ? arguments[1].objId : 0), displayCropped: arguments[2], allowZoom: arguments[3]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorAssignViewToRemoteCamera?" + params, OnComplete, OnError);
					});
				}

				this.AssignViewToRemoteWindowShare = function(viewId, remoteWindowShare, displayCropped, allowZoom) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('viewId') && arguments[0].hasOwnProperty('remoteWindowShare') && arguments[0].hasOwnProperty('displayCropped') && arguments[0].hasOwnProperty('allowZoom')){
							arguments[0].viewId = UpdateViewOnDOM({uiEvent:"AssignViewToRemoteWindowShare", viewId:arguments[0].viewId, remoteWindowShare:arguments[0].remoteWindowShare, displayCropped:arguments[0].displayCropped, allowZoom:arguments[0].allowZoom});
							var params = vcUtilsParam({c: this.objId, viewId: arguments[0].viewId, remoteWindowShare: (arguments[0].remoteWindowShare ? arguments[0].remoteWindowShare.objId : 0), displayCropped: arguments[0].displayCropped, allowZoom: arguments[0].allowZoom});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['viewId', 'remoteWindowShare', 'displayCropped', 'allowZoom'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "object") && (typeof(arguments[2]) === "boolean") && (typeof(arguments[3]) === "boolean")){
						arguments[0] = UpdateViewOnDOM({uiEvent:"AssignViewToRemoteWindowShare", viewId:viewId, remoteWindowShare:remoteWindowShare, displayCropped:displayCropped, allowZoom:allowZoom});
						var params = vcUtilsParam({c: this.objId, viewId: arguments[0], remoteWindowShare: (arguments[1] ? arguments[1].objId : 0), displayCropped: arguments[2], allowZoom: arguments[3]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorAssignViewToRemoteWindowShare?" + params, OnComplete, OnError);
					});
				}

				this.AssignViewToVirtualVideoSource = function(viewId, virtualVideoSource, displayCropped, allowZoom) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('viewId') && arguments[0].hasOwnProperty('virtualVideoSource') && arguments[0].hasOwnProperty('displayCropped') && arguments[0].hasOwnProperty('allowZoom')){
							arguments[0].viewId = UpdateViewOnDOM({uiEvent:"AssignViewToVirtualVideoSource", viewId:arguments[0].viewId, virtualVideoSource:arguments[0].virtualVideoSource, displayCropped:arguments[0].displayCropped, allowZoom:arguments[0].allowZoom});
							var params = vcUtilsParam({c: this.objId, viewId: arguments[0].viewId, virtualVideoSource: (arguments[0].virtualVideoSource ? arguments[0].virtualVideoSource.objId : 0), displayCropped: arguments[0].displayCropped, allowZoom: arguments[0].allowZoom});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['viewId', 'virtualVideoSource', 'displayCropped', 'allowZoom'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "object") && (typeof(arguments[2]) === "boolean") && (typeof(arguments[3]) === "boolean")){
						arguments[0] = UpdateViewOnDOM({uiEvent:"AssignViewToVirtualVideoSource", viewId:viewId, virtualVideoSource:virtualVideoSource, displayCropped:displayCropped, allowZoom:allowZoom});
						var params = vcUtilsParam({c: this.objId, viewId: arguments[0], virtualVideoSource: (arguments[1] ? arguments[1].objId : 0), displayCropped: arguments[2], allowZoom: arguments[3]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorAssignViewToVirtualVideoSource?" + params, OnComplete, OnError);
					});
				}

				this.CancelInviteParticipant = function(contact) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('contact')){
							var params = vcUtilsParam({c: this.objId, contact: JSON.stringify(arguments[0].contact)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['contact'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({c: this.objId, contact: JSON.stringify(arguments[0])});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorCancelInviteParticipant?" + params, OnComplete, OnError);
					});
				}

				this.Connect = function(host, token, displayName, resourceId, onSuccess, onFailure, onDisconnected) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('host') && arguments[0].hasOwnProperty('token') && arguments[0].hasOwnProperty('displayName') && arguments[0].hasOwnProperty('resourceId') && arguments[0].hasOwnProperty('onSuccess') && arguments[0].hasOwnProperty('onFailure') && arguments[0].hasOwnProperty('onDisconnected')){
							this.VidyoConnectorOnSuccess = arguments[0].onSuccess;
							this.VidyoConnectorOnFailure = arguments[0].onFailure;
							this.VidyoConnectorOnDisconnected = arguments[0].onDisconnected;
							var params = vcUtilsParam({c: this.objId, host: arguments[0].host, token: arguments[0].token, displayName: arguments[0].displayName, resourceId: arguments[0].resourceId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['host', 'token', 'displayName', 'resourceId', 'onSuccess', 'onFailure', 'onDisconnected'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 7 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "string") && (typeof(arguments[3]) === "string") && (typeof(arguments[4]) === "function") && (typeof(arguments[5]) === "function") && (typeof(arguments[6]) === "function")){
						this.VidyoConnectorOnSuccess = onSuccess;
						this.VidyoConnectorOnFailure = onFailure;
						this.VidyoConnectorOnDisconnected = onDisconnected;
						var params = vcUtilsParam({c: this.objId, host: arguments[0], token: arguments[1], displayName: arguments[2], resourceId: arguments[3]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorConnect?" + params, OnComplete, OnError);
					});
				}

				this.ConnectToRoomAsGuest = function(host, displayName, roomKey, roomPin, onSuccess, onFailure, onDisconnected) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('host') && arguments[0].hasOwnProperty('displayName') && arguments[0].hasOwnProperty('roomKey') && arguments[0].hasOwnProperty('roomPin') && arguments[0].hasOwnProperty('onSuccess') && arguments[0].hasOwnProperty('onFailure') && arguments[0].hasOwnProperty('onDisconnected')){
							this.VidyoConnectorOnSuccess = arguments[0].onSuccess;
							this.VidyoConnectorOnFailure = arguments[0].onFailure;
							this.VidyoConnectorOnDisconnected = arguments[0].onDisconnected;
							var params = vcUtilsParam({c: this.objId, host: arguments[0].host, displayName: arguments[0].displayName, roomKey: arguments[0].roomKey, roomPin: arguments[0].roomPin});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['host', 'displayName', 'roomKey', 'roomPin', 'onSuccess', 'onFailure', 'onDisconnected'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 7 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "string") && (typeof(arguments[3]) === "string") && (typeof(arguments[4]) === "function") && (typeof(arguments[5]) === "function") && (typeof(arguments[6]) === "function")){
						this.VidyoConnectorOnSuccess = onSuccess;
						this.VidyoConnectorOnFailure = onFailure;
						this.VidyoConnectorOnDisconnected = onDisconnected;
						var params = vcUtilsParam({c: this.objId, host: arguments[0], displayName: arguments[1], roomKey: arguments[2], roomPin: arguments[3]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorConnectToRoomAsGuest?" + params, OnComplete, OnError);
					});
				}

				this.ConnectToRoomWithId = function(host, userName, password, roomId, roomPin, onSuccess, onFailure, onDisconnected) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('host') && arguments[0].hasOwnProperty('userName') && arguments[0].hasOwnProperty('password') && arguments[0].hasOwnProperty('roomId') && arguments[0].hasOwnProperty('roomPin') && arguments[0].hasOwnProperty('onSuccess') && arguments[0].hasOwnProperty('onFailure') && arguments[0].hasOwnProperty('onDisconnected')){
							this.VidyoConnectorOnSuccess = arguments[0].onSuccess;
							this.VidyoConnectorOnFailure = arguments[0].onFailure;
							this.VidyoConnectorOnDisconnected = arguments[0].onDisconnected;
							var params = vcUtilsParam({c: this.objId, host: arguments[0].host, userName: arguments[0].userName, password: arguments[0].password, roomId: arguments[0].roomId, roomPin: arguments[0].roomPin});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['host', 'userName', 'password', 'roomId', 'roomPin', 'onSuccess', 'onFailure', 'onDisconnected'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 8 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "string") && (typeof(arguments[3]) === "string") && (typeof(arguments[4]) === "string") && (typeof(arguments[5]) === "function") && (typeof(arguments[6]) === "function") && (typeof(arguments[7]) === "function")){
						this.VidyoConnectorOnSuccess = onSuccess;
						this.VidyoConnectorOnFailure = onFailure;
						this.VidyoConnectorOnDisconnected = onDisconnected;
						var params = vcUtilsParam({c: this.objId, host: arguments[0], userName: arguments[1], password: arguments[2], roomId: arguments[3], roomPin: arguments[4]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorConnectToRoomWithId?" + params, OnComplete, OnError);
					});
				}

				this.ConnectToRoomWithKey = function(host, userName, password, roomKey, roomPin, onSuccess, onFailure, onDisconnected) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('host') && arguments[0].hasOwnProperty('userName') && arguments[0].hasOwnProperty('password') && arguments[0].hasOwnProperty('roomKey') && arguments[0].hasOwnProperty('roomPin') && arguments[0].hasOwnProperty('onSuccess') && arguments[0].hasOwnProperty('onFailure') && arguments[0].hasOwnProperty('onDisconnected')){
							this.VidyoConnectorOnSuccess = arguments[0].onSuccess;
							this.VidyoConnectorOnFailure = arguments[0].onFailure;
							this.VidyoConnectorOnDisconnected = arguments[0].onDisconnected;
							var params = vcUtilsParam({c: this.objId, host: arguments[0].host, userName: arguments[0].userName, password: arguments[0].password, roomKey: arguments[0].roomKey, roomPin: arguments[0].roomPin});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['host', 'userName', 'password', 'roomKey', 'roomPin', 'onSuccess', 'onFailure', 'onDisconnected'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 8 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "string") && (typeof(arguments[3]) === "string") && (typeof(arguments[4]) === "string") && (typeof(arguments[5]) === "function") && (typeof(arguments[6]) === "function") && (typeof(arguments[7]) === "function")){
						this.VidyoConnectorOnSuccess = onSuccess;
						this.VidyoConnectorOnFailure = onFailure;
						this.VidyoConnectorOnDisconnected = onDisconnected;
						var params = vcUtilsParam({c: this.objId, host: arguments[0], userName: arguments[1], password: arguments[2], roomKey: arguments[3], roomPin: arguments[4]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorConnectToRoomWithKey?" + params, OnComplete, OnError);
					});
				}

				this.ConnectToRoomWithTokenAndId = function(host, userName, token, roomId, roomPin, onSuccess, onFailure, onDisconnected) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('host') && arguments[0].hasOwnProperty('userName') && arguments[0].hasOwnProperty('token') && arguments[0].hasOwnProperty('roomId') && arguments[0].hasOwnProperty('roomPin') && arguments[0].hasOwnProperty('onSuccess') && arguments[0].hasOwnProperty('onFailure') && arguments[0].hasOwnProperty('onDisconnected')){
							this.VidyoConnectorOnSuccess = arguments[0].onSuccess;
							this.VidyoConnectorOnFailure = arguments[0].onFailure;
							this.VidyoConnectorOnDisconnected = arguments[0].onDisconnected;
							var params = vcUtilsParam({c: this.objId, host: arguments[0].host, userName: arguments[0].userName, token: arguments[0].token, roomId: arguments[0].roomId, roomPin: arguments[0].roomPin});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['host', 'userName', 'token', 'roomId', 'roomPin', 'onSuccess', 'onFailure', 'onDisconnected'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 8 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "string") && (typeof(arguments[3]) === "string") && (typeof(arguments[4]) === "string") && (typeof(arguments[5]) === "function") && (typeof(arguments[6]) === "function") && (typeof(arguments[7]) === "function")){
						this.VidyoConnectorOnSuccess = onSuccess;
						this.VidyoConnectorOnFailure = onFailure;
						this.VidyoConnectorOnDisconnected = onDisconnected;
						var params = vcUtilsParam({c: this.objId, host: arguments[0], userName: arguments[1], token: arguments[2], roomId: arguments[3], roomPin: arguments[4]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorConnectToRoomWithTokenAndId?" + params, OnComplete, OnError);
					});
				}

				this.ConnectToRoomWithTokenAndKey = function(host, userName, token, roomKey, roomPin, onSuccess, onFailure, onDisconnected) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('host') && arguments[0].hasOwnProperty('userName') && arguments[0].hasOwnProperty('token') && arguments[0].hasOwnProperty('roomKey') && arguments[0].hasOwnProperty('roomPin') && arguments[0].hasOwnProperty('onSuccess') && arguments[0].hasOwnProperty('onFailure') && arguments[0].hasOwnProperty('onDisconnected')){
							this.VidyoConnectorOnSuccess = arguments[0].onSuccess;
							this.VidyoConnectorOnFailure = arguments[0].onFailure;
							this.VidyoConnectorOnDisconnected = arguments[0].onDisconnected;
							var params = vcUtilsParam({c: this.objId, host: arguments[0].host, userName: arguments[0].userName, token: arguments[0].token, roomKey: arguments[0].roomKey, roomPin: arguments[0].roomPin});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['host', 'userName', 'token', 'roomKey', 'roomPin', 'onSuccess', 'onFailure', 'onDisconnected'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 8 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "string") && (typeof(arguments[3]) === "string") && (typeof(arguments[4]) === "string") && (typeof(arguments[5]) === "function") && (typeof(arguments[6]) === "function") && (typeof(arguments[7]) === "function")){
						this.VidyoConnectorOnSuccess = onSuccess;
						this.VidyoConnectorOnFailure = onFailure;
						this.VidyoConnectorOnDisconnected = onDisconnected;
						var params = vcUtilsParam({c: this.objId, host: arguments[0], userName: arguments[1], token: arguments[2], roomKey: arguments[3], roomPin: arguments[4]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorConnectToRoomWithTokenAndKey?" + params, OnComplete, OnError);
					});
				}

				this.CreateVirtualAudioSource = function(name, id, configuration) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('name') && arguments[0].hasOwnProperty('id') && arguments[0].hasOwnProperty('configuration')){
							var params = vcUtilsParam({c: this.objId, name: arguments[0].name, id: arguments[0].id, configuration: arguments[0].configuration});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['name', 'id', 'configuration'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "string")){
						var params = vcUtilsParam({c: this.objId, name: arguments[0], id: arguments[1], configuration: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorCreateVirtualAudioSource?" + params, OnComplete, OnError);
					});
				}

				this.CreateVirtualVideoSource = function(type, id, name) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('type') && arguments[0].hasOwnProperty('id') && arguments[0].hasOwnProperty('name')){
							var params = vcUtilsParam({c: this.objId, type: arguments[0].type, id: arguments[0].id, name: arguments[0].name});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['type', 'id', 'name'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "string")){
						var params = vcUtilsParam({c: this.objId, type: arguments[0], id: arguments[1], name: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorCreateVirtualVideoSource?" + params, OnComplete, OnError);
					});
				}

				this.CycleCamera = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorCycleCamera?" + params, OnComplete, OnError);
					});
				}

				this.CycleMicrophone = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorCycleMicrophone?" + params, OnComplete, OnError);
					});
				}

				this.CycleSpeaker = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorCycleSpeaker?" + params, OnComplete, OnError);
					});
				}

				this.DestroyVirtualAudioSource = function(virtualAudioSource) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('virtualAudioSource')){
							var params = vcUtilsParam({c: this.objId, virtualAudioSource: (arguments[0].virtualAudioSource ? arguments[0].virtualAudioSource.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['virtualAudioSource'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({c: this.objId, virtualAudioSource: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							if(virtualAudioSource&& response.data.virtualAudioSource)
								vcUtilsExtend(virtualAudioSource, response.data.virtualAudioSource);
							resolve(response.data);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorDestroyVirtualAudioSource?" + params, OnComplete, OnError);
					});
				}

				this.DestroyVirtualVideoSource = function(virtualVideoSource) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('virtualVideoSource')){
							var params = vcUtilsParam({c: this.objId, virtualVideoSource: (arguments[0].virtualVideoSource ? arguments[0].virtualVideoSource.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['virtualVideoSource'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({c: this.objId, virtualVideoSource: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							if(virtualVideoSource&& response.data.virtualVideoSource)
								vcUtilsExtend(virtualVideoSource, response.data.virtualVideoSource);
							resolve(response.data);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorDestroyVirtualVideoSource?" + params, OnComplete, OnError);
					});
				}

				this.Disable = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorDisable?" + params, OnComplete, OnError);
					});
				}

				this.DisableAudioForAll = function(disable, requestId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('disable') && arguments[0].hasOwnProperty('requestId')){
							var params = vcUtilsParam({c: this.objId, disable: arguments[0].disable, requestId: arguments[0].requestId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['disable', 'requestId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "boolean") && (typeof(arguments[1]) === "string")){
						var params = vcUtilsParam({c: this.objId, disable: arguments[0], requestId: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorDisableAudioForAll?" + params, OnComplete, OnError);
					});
				}

				this.DisableAudioForParticipant = function(participant, disable, requestId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('participant') && arguments[0].hasOwnProperty('disable') && arguments[0].hasOwnProperty('requestId')){
							var params = vcUtilsParam({c: this.objId, participant: (arguments[0].participant ? arguments[0].participant.objId : 0), disable: arguments[0].disable, requestId: arguments[0].requestId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['participant', 'disable', 'requestId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "boolean") && (typeof(arguments[2]) === "string")){
						var params = vcUtilsParam({c: this.objId, participant: (arguments[0] ? arguments[0].objId : 0), disable: arguments[1], requestId: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorDisableAudioForParticipant?" + params, OnComplete, OnError);
					});
				}

				this.DisableAudioSilenceForAll = function(requestId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('requestId')){
							var params = vcUtilsParam({c: this.objId, requestId: arguments[0].requestId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['requestId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({c: this.objId, requestId: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorDisableAudioSilenceForAll?" + params, OnComplete, OnError);
					});
				}

				this.DisableAudioSilenceForParticipant = function(participant, requestId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('participant') && arguments[0].hasOwnProperty('requestId')){
							var params = vcUtilsParam({c: this.objId, participant: (arguments[0].participant ? arguments[0].participant.objId : 0), requestId: arguments[0].requestId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['participant', 'requestId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "string")){
						var params = vcUtilsParam({c: this.objId, participant: (arguments[0] ? arguments[0].objId : 0), requestId: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorDisableAudioSilenceForParticipant?" + params, OnComplete, OnError);
					});
				}

				this.DisableDebug = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorDisableDebug?" + params, OnComplete, OnError);
					});
				}

				this.DisableVideoForAll = function(disable, requestId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('disable') && arguments[0].hasOwnProperty('requestId')){
							var params = vcUtilsParam({c: this.objId, disable: arguments[0].disable, requestId: arguments[0].requestId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['disable', 'requestId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "boolean") && (typeof(arguments[1]) === "string")){
						var params = vcUtilsParam({c: this.objId, disable: arguments[0], requestId: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorDisableVideoForAll?" + params, OnComplete, OnError);
					});
				}

				this.DisableVideoForParticipant = function(participant, disable, requestId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('participant') && arguments[0].hasOwnProperty('disable') && arguments[0].hasOwnProperty('requestId')){
							var params = vcUtilsParam({c: this.objId, participant: (arguments[0].participant ? arguments[0].participant.objId : 0), disable: arguments[0].disable, requestId: arguments[0].requestId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['participant', 'disable', 'requestId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "boolean") && (typeof(arguments[2]) === "string")){
						var params = vcUtilsParam({c: this.objId, participant: (arguments[0] ? arguments[0].objId : 0), disable: arguments[1], requestId: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorDisableVideoForParticipant?" + params, OnComplete, OnError);
					});
				}

				this.DisableVideoSilenceForAll = function(requestId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('requestId')){
							var params = vcUtilsParam({c: this.objId, requestId: arguments[0].requestId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['requestId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({c: this.objId, requestId: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorDisableVideoSilenceForAll?" + params, OnComplete, OnError);
					});
				}

				this.DisableVideoSilenceForParticipant = function(participant, requestId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('participant') && arguments[0].hasOwnProperty('requestId')){
							var params = vcUtilsParam({c: this.objId, participant: (arguments[0].participant ? arguments[0].participant.objId : 0), requestId: arguments[0].requestId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['participant', 'requestId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "string")){
						var params = vcUtilsParam({c: this.objId, participant: (arguments[0] ? arguments[0].objId : 0), requestId: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorDisableVideoSilenceForParticipant?" + params, OnComplete, OnError);
					});
				}

				this.Disconnect = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data && response.data.hasOwnProperty('retValue') ? response.data.retValue : true);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorDisconnect?" + params, OnComplete, OnError);
					});
				}

				this.DismissAllRaisedHands = function(requestId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('requestId')){
							var params = vcUtilsParam({c: this.objId, requestId: arguments[0].requestId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['requestId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({c: this.objId, requestId: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorDismissAllRaisedHands?" + params, OnComplete, OnError);
					});
				}

				this.DismissRaisedHand = function(participants, requestId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('participants') && arguments[0].hasOwnProperty('requestId')){
							var params = vcUtilsParam({c: this.objId, participants: JSON.stringify({"participants": arguments[0].participants}), requestId: arguments[0].requestId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['participants', 'requestId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "string")){
						var params = vcUtilsParam({c: this.objId, participants: JSON.stringify({"participants": arguments[0]}), requestId: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorDismissRaisedHand?" + params, OnComplete, OnError);
					});
				}

				this.DropAllParticipants = function(reason) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('reason')){
							var params = vcUtilsParam({c: this.objId, reason: arguments[0].reason});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['reason'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({c: this.objId, reason: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorDropAllParticipants?" + params, OnComplete, OnError);
					});
				}

				this.DropParticipant = function(participant, reason) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('participant') && arguments[0].hasOwnProperty('reason')){
							var params = vcUtilsParam({c: this.objId, participant: (arguments[0].participant ? arguments[0].participant.objId : 0), reason: arguments[0].reason});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['participant', 'reason'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "string")){
						var params = vcUtilsParam({c: this.objId, participant: (arguments[0] ? arguments[0].objId : 0), reason: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorDropParticipant?" + params, OnComplete, OnError);
					});
				}

				this.EnableDebug = function(port, logFilter) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('port') && arguments[0].hasOwnProperty('logFilter')){
							var params = vcUtilsParam({c: this.objId, port: arguments[0].port, logFilter: arguments[0].logFilter});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['port', 'logFilter'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "string")){
						var params = vcUtilsParam({c: this.objId, port: arguments[0], logFilter: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorEnableDebug?" + params, OnComplete, OnError);
					});
				}

				this.GetActiveNetworkInterface = function(onGetActiveNetworkInterfaceCallback) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onGetActiveNetworkInterfaceCallback')){
							this.VidyoConnectorOnGetActiveNetworkInterface = arguments[0].onGetActiveNetworkInterfaceCallback;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onGetActiveNetworkInterfaceCallback'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoConnectorOnGetActiveNetworkInterface = onGetActiveNetworkInterfaceCallback;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorGetActiveNetworkInterface?" + params, OnComplete, OnError);
					});
				}

				this.GetAudioBitrateMultiplier = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorGetAudioBitrateMultiplier?" + params, OnComplete, OnError);
					});
				}

				this.GetAudioMode = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorGetAudioMode?" + params, OnComplete, OnError);
					});
				}

				this.GetAudioPacketInterval = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorGetAudioPacketInterval?" + params, OnComplete, OnError);
					});
				}

				this.GetAudioPacketLossPercentage = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorGetAudioPacketLossPercentage?" + params, OnComplete, OnError);
					});
				}

				this.GetAutoReconnect = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorGetAutoReconnect?" + params, OnComplete, OnError);
					});
				}

				this.GetAutoReconnectAttemptBackOff = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorGetAutoReconnectAttemptBackOff?" + params, OnComplete, OnError);
					});
				}

				this.GetAutoReconnectMaxAttempts = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorGetAutoReconnectMaxAttempts?" + params, OnComplete, OnError);
					});
				}

				this.GetAutoReconnectSetting = function(onGetAutoReconnectSettingCallback) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onGetAutoReconnectSettingCallback')){
							this.VidyoConnectorOnGetAutoReconnectSetting = arguments[0].onGetAutoReconnectSettingCallback;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onGetAutoReconnectSettingCallback'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoConnectorOnGetAutoReconnectSetting = onGetAutoReconnectSettingCallback;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorGetAutoReconnectSetting?" + params, OnComplete, OnError);
					});
				}

				this.GetCameraBackgroundEffect = function(onGetEffectInfo) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onGetEffectInfo')){
							this.VidyoConnectorOnGetCameraBackgroundEffectInfo = arguments[0].onGetEffectInfo;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onGetEffectInfo'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoConnectorOnGetCameraBackgroundEffectInfo = onGetEffectInfo;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorGetCameraBackgroundEffect?" + params, OnComplete, OnError);
					});
				}

				this.GetConferenceNumber = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorGetConferenceNumber?" + params, OnComplete, OnError);
					});
				}

				this.GetCpuTradeOffProfile = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorGetCpuTradeOffProfile?" + params, OnComplete, OnError);
					});
				}

				this.GetDisableVideoOnLowBandwidth = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorGetDisableVideoOnLowBandwidth?" + params, OnComplete, OnError);
					});
				}

				this.GetDisableVideoOnLowBandwidthAudioStreams = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorGetDisableVideoOnLowBandwidthAudioStreams?" + params, OnComplete, OnError);
					});
				}

				this.GetDisableVideoOnLowBandwidthRecoveryTime = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorGetDisableVideoOnLowBandwidthRecoveryTime?" + params, OnComplete, OnError);
					});
				}

				this.GetDisableVideoOnLowBandwidthResponseTime = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorGetDisableVideoOnLowBandwidthResponseTime?" + params, OnComplete, OnError);
					});
				}

				this.GetDisableVideoOnLowBandwidthSampleTime = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorGetDisableVideoOnLowBandwidthSampleTime?" + params, OnComplete, OnError);
					});
				}

				this.GetDisableVideoOnLowBandwidthThreshold = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorGetDisableVideoOnLowBandwidthThreshold?" + params, OnComplete, OnError);
					});
				}

				this.GetGoogleAnalyticsEventTable = function(onGetGoogleAnalyticsEventTable) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onGetGoogleAnalyticsEventTable')){
							this.VidyoConnectorOnGetGoogleAnalyticsEventTable = arguments[0].onGetGoogleAnalyticsEventTable;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onGetGoogleAnalyticsEventTable'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoConnectorOnGetGoogleAnalyticsEventTable = onGetGoogleAnalyticsEventTable;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorGetGoogleAnalyticsEventTable?" + params, OnComplete, OnError);
					});
				}

				this.GetGoogleAnalyticsServiceID = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorGetGoogleAnalyticsServiceID?" + params, OnComplete, OnError);
					});
				}

				this.GetInsightsServiceUrl = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorGetInsightsServiceUrl?" + params, OnComplete, OnError);
					});
				}

				this.GetLogLevel = function(loggerType) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('loggerType')){
							var params = vcUtilsParam({c: this.objId, loggerType: arguments[0].loggerType});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['loggerType'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({c: this.objId, loggerType: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorGetLogLevel?" + params, OnComplete, OnError);
					});
				}

				this.GetMaxReceiveBitRate = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorGetMaxReceiveBitRate?" + params, OnComplete, OnError);
					});
				}

				this.GetMaxSendBitRate = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorGetMaxSendBitRate?" + params, OnComplete, OnError);
					});
				}

				this.GetMicrophoneMaxBoostLevel = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorGetMicrophoneMaxBoostLevel?" + params, OnComplete, OnError);
					});
				}

				this.GetMinMicrophoneVolume = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorGetMinMicrophoneVolume?" + params, OnComplete, OnError);
					});
				}

				this.GetOptions = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorGetOptions?" + params, OnComplete, OnError);
					});
				}

				this.GetPreferredAudioCodec = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorGetPreferredAudioCodec?" + params, OnComplete, OnError);
					});
				}

				this.GetRecordingServiceProfiles = function(onGetRecordingProfilesCallback) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onGetRecordingProfilesCallback')){
							this.VidyoConnectorOnGetRecordingServiceProfiles = arguments[0].onGetRecordingProfilesCallback;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onGetRecordingProfilesCallback'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoConnectorOnGetRecordingServiceProfiles = onGetRecordingProfilesCallback;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorGetRecordingServiceProfiles?" + params, OnComplete, OnError);
					});
				}

				this.GetRendererOptionsForViewId = function(viewId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('viewId')){
							arguments[0].viewId = UpdateViewOnDOM({uiEvent:"GetRendererOptionsForViewId", viewId:arguments[0].viewId});
							var params = vcUtilsParam({c: this.objId, viewId: arguments[0].viewId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['viewId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						arguments[0] = UpdateViewOnDOM({uiEvent:"GetRendererOptionsForViewId", viewId:viewId});
						var params = vcUtilsParam({c: this.objId, viewId: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorGetRendererOptionsForViewId?" + params, OnComplete, OnError);
					});
				}

				this.GetState = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorGetState?" + params, OnComplete, OnError);
					});
				}

				this.GetStaticShareSvcState = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorGetStaticShareSvcState?" + params, OnComplete, OnError);
					});
				}

				this.GetStatisticRate = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorGetStatisticRate?" + params, OnComplete, OnError);
					});
				}

				this.GetStatsJson = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorGetStatsJson?" + params, OnComplete, OnError);
					});
				}

				this.GetVersion = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorGetVersion?" + params, OnComplete, OnError);
					});
				}

				this.GetVersionWithoutBuildNumber = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorGetVersionWithoutBuildNumber?" + params, OnComplete, OnError);
					});
				}

				this.GetWhitelistedAudioDevices = function(onGetCallback) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onGetCallback')){
							this.VidyoConnectorOnGetWhitelistedAudioDevices = arguments[0].onGetCallback;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onGetCallback'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoConnectorOnGetWhitelistedAudioDevices = onGetCallback;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorGetWhitelistedAudioDevices?" + params, OnComplete, OnError);
					});
				}

				this.GoogleAnalyticsControlEventAction = function(eventCategory, eventAction, enable) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('eventCategory') && arguments[0].hasOwnProperty('eventAction') && arguments[0].hasOwnProperty('enable')){
							var params = vcUtilsParam({c: this.objId, eventCategory: arguments[0].eventCategory, eventAction: arguments[0].eventAction, enable: arguments[0].enable});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['eventCategory', 'eventAction', 'enable'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "boolean")){
						var params = vcUtilsParam({c: this.objId, eventCategory: arguments[0], eventAction: arguments[1], enable: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorGoogleAnalyticsControlEventAction?" + params, OnComplete, OnError);
					});
				}

				this.HideView = function(viewId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('viewId')){
							arguments[0].viewId = UpdateViewOnDOM({uiEvent:"HideView", viewId:arguments[0].viewId});
							var params = vcUtilsParam({c: this.objId, viewId: arguments[0].viewId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['viewId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						arguments[0] = UpdateViewOnDOM({uiEvent:"HideView", viewId:viewId});
						var params = vcUtilsParam({c: this.objId, viewId: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorHideView?" + params, OnComplete, OnError);
					});
				}

				this.InsightsNotifyEvent = function(eventName, parameters) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('eventName') && arguments[0].hasOwnProperty('parameters')){
							var params = vcUtilsParam({c: this.objId, eventName: arguments[0].eventName, parameters: JSON.stringify({"parameters": arguments[0].parameters})});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['eventName', 'parameters'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "object")){
						var params = vcUtilsParam({c: this.objId, eventName: arguments[0], parameters: JSON.stringify({"parameters": arguments[1]})});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorInsightsNotifyEvent?" + params, OnComplete, OnError);
					});
				}

				this.InviteParticipant = function(contact, message, onInviteResult) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('contact') && arguments[0].hasOwnProperty('message') && arguments[0].hasOwnProperty('onInviteResult')){
							this.VidyoConnectorOnInviteResult = arguments[0].onInviteResult;
							var params = vcUtilsParam({c: this.objId, contact: JSON.stringify(arguments[0].contact), message: arguments[0].message});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['contact', 'message', 'onInviteResult'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "function")){
						this.VidyoConnectorOnInviteResult = onInviteResult;
						var params = vcUtilsParam({c: this.objId, contact: JSON.stringify(arguments[0]), message: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorInviteParticipant?" + params, OnComplete, OnError);
					});
				}

				this.IsGoogleAnalyticsServiceEnabled = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorIsGoogleAnalyticsServiceEnabled?" + params, OnComplete, OnError);
					});
				}

				this.IsInsightsServiceEnabled = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorIsInsightsServiceEnabled?" + params, OnComplete, OnError);
					});
				}

				this.LockRoom = function(onLockRoomResult) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onLockRoomResult')){
							this.VidyoConnectorOnLockRoomResult = arguments[0].onLockRoomResult;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onLockRoomResult'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoConnectorOnLockRoomResult = onLockRoomResult;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorLockRoom?" + params, OnComplete, OnError);
					});
				}

				this.PauseRecording = function(onRecordingServicePauseResultCallback) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onRecordingServicePauseResultCallback')){
							this.VidyoConnectorOnRecordingServicePauseResult = arguments[0].onRecordingServicePauseResultCallback;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onRecordingServicePauseResultCallback'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoConnectorOnRecordingServicePauseResult = onRecordingServicePauseResultCallback;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorPauseRecording?" + params, OnComplete, OnError);
					});
				}

				this.PinParticipant = function(participant, pin) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('participant') && arguments[0].hasOwnProperty('pin')){
							var params = vcUtilsParam({c: this.objId, participant: (arguments[0].participant ? arguments[0].participant.objId : 0), pin: arguments[0].pin});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['participant', 'pin'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "boolean")){
						var params = vcUtilsParam({c: this.objId, participant: (arguments[0] ? arguments[0].objId : 0), pin: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorPinParticipant?" + params, OnComplete, OnError);
					});
				}

				this.RaiseHand = function(raiseHandResponse, requestId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('raiseHandResponse') && arguments[0].hasOwnProperty('requestId')){
							this.VidyoConnectorOnRaiseHandResponse = arguments[0].raiseHandResponse;
							var params = vcUtilsParam({c: this.objId, requestId: arguments[0].requestId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['raiseHandResponse', 'requestId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "string")){
						this.VidyoConnectorOnRaiseHandResponse = raiseHandResponse;
						var params = vcUtilsParam({c: this.objId, requestId: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRaiseHand?" + params, OnComplete, OnError);
					});
				}

				this.RegisterCameraEffectErrorListener = function(onError) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onError')){
							this.VidyoConnectorOnCameraEffectError = arguments[0].onError;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onError'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoConnectorOnCameraEffectError = onError;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRegisterCameraEffectErrorListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterConferenceModeEventListener = function(conferenceModeChanged) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('conferenceModeChanged')){
							this.VidyoConnectorOnConferenceModeChanged = arguments[0].conferenceModeChanged;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['conferenceModeChanged'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoConnectorOnConferenceModeChanged = conferenceModeChanged;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRegisterConferenceModeEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterConnectionPropertiesEventListener = function(onConnectionPropertiesChanged) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onConnectionPropertiesChanged')){
							this.VidyoConnectorOnConnectionPropertiesChanged = arguments[0].onConnectionPropertiesChanged;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onConnectionPropertiesChanged'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoConnectorOnConnectionPropertiesChanged = onConnectionPropertiesChanged;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRegisterConnectionPropertiesEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterErrorEventListener = function(onErrorCallback) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onErrorCallback')){
							this.VidyoConnectorOnError = arguments[0].onErrorCallback;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onErrorCallback'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoConnectorOnError = onErrorCallback;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRegisterErrorEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterHostEventListener = function(hostStatus) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('hostStatus')){
							this.VidyoConnectorOnConferenceHostStatusChanged = arguments[0].hostStatus;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['hostStatus'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoConnectorOnConferenceHostStatusChanged = hostStatus;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRegisterHostEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterInCallEventListener = function(cb) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('cb')){
							this.VidyoConnectorOnInCallEvents = arguments[0].cb;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['cb'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoConnectorOnInCallEvents = cb;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRegisterInCallEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterLectureModeEventListener = function(presenterChanged, handRaised) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('presenterChanged') && arguments[0].hasOwnProperty('handRaised')){
							this.VidyoConnectorOnPresenterChanged = arguments[0].presenterChanged;
							this.VidyoConnectorOnHandRaised = arguments[0].handRaised;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['presenterChanged', 'handRaised'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function")){
						this.VidyoConnectorOnPresenterChanged = presenterChanged;
						this.VidyoConnectorOnHandRaised = handRaised;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRegisterLectureModeEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterLocalCameraEventListener = function(onAdded, onRemoved, onSelected, onStateUpdated) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onAdded') && arguments[0].hasOwnProperty('onRemoved') && arguments[0].hasOwnProperty('onSelected') && arguments[0].hasOwnProperty('onStateUpdated')){
							this.VidyoConnectorOnLocalCameraAdded = arguments[0].onAdded;
							this.VidyoConnectorOnLocalCameraRemoved = arguments[0].onRemoved;
							this.VidyoConnectorOnLocalCameraSelected = arguments[0].onSelected;
							this.VidyoConnectorOnLocalCameraStateUpdated = arguments[0].onStateUpdated;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onAdded', 'onRemoved', 'onSelected', 'onStateUpdated'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "function")){
						this.VidyoConnectorOnLocalCameraAdded = onAdded;
						this.VidyoConnectorOnLocalCameraRemoved = onRemoved;
						this.VidyoConnectorOnLocalCameraSelected = onSelected;
						this.VidyoConnectorOnLocalCameraStateUpdated = onStateUpdated;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRegisterLocalCameraEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterLocalCameraFrameListener = function(onFrame, localCamera, width, height, frameInterval) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onFrame') && arguments[0].hasOwnProperty('localCamera') && arguments[0].hasOwnProperty('width') && arguments[0].hasOwnProperty('height') && arguments[0].hasOwnProperty('frameInterval')){
							this.VidyoConnectorOnLocalCameraFrame = arguments[0].onFrame;
							var params = vcUtilsParam({c: this.objId, localCamera: (arguments[0].localCamera ? arguments[0].localCamera.objId : 0), width: arguments[0].width, height: arguments[0].height, frameInterval: arguments[0].frameInterval});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onFrame', 'localCamera', 'width', 'height', 'frameInterval'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 5 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "object") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number")){
						this.VidyoConnectorOnLocalCameraFrame = onFrame;
						var params = vcUtilsParam({c: this.objId, localCamera: (arguments[1] ? arguments[1].objId : 0), width: arguments[2], height: arguments[3], frameInterval: arguments[4]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRegisterLocalCameraFrameListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterLocalMicrophoneEnergyListener = function(onEnergy) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onEnergy')){
							this.VidyoConnectorOnLocalMicrophoneEnergy = arguments[0].onEnergy;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onEnergy'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoConnectorOnLocalMicrophoneEnergy = onEnergy;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRegisterLocalMicrophoneEnergyListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterLocalMicrophoneEventListener = function(onAdded, onRemoved, onSelected, onStateUpdated) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onAdded') && arguments[0].hasOwnProperty('onRemoved') && arguments[0].hasOwnProperty('onSelected') && arguments[0].hasOwnProperty('onStateUpdated')){
							this.VidyoConnectorOnLocalMicrophoneAdded = arguments[0].onAdded;
							this.VidyoConnectorOnLocalMicrophoneRemoved = arguments[0].onRemoved;
							this.VidyoConnectorOnLocalMicrophoneSelected = arguments[0].onSelected;
							this.VidyoConnectorOnLocalMicrophoneStateUpdated = arguments[0].onStateUpdated;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onAdded', 'onRemoved', 'onSelected', 'onStateUpdated'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "function")){
						this.VidyoConnectorOnLocalMicrophoneAdded = onAdded;
						this.VidyoConnectorOnLocalMicrophoneRemoved = onRemoved;
						this.VidyoConnectorOnLocalMicrophoneSelected = onSelected;
						this.VidyoConnectorOnLocalMicrophoneStateUpdated = onStateUpdated;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRegisterLocalMicrophoneEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterLocalMicrophoneFrameListener = function(onFrame, localMicrophone) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onFrame') && arguments[0].hasOwnProperty('localMicrophone')){
							this.VidyoConnectorOnLocalMicrophoneFrame = arguments[0].onFrame;
							var params = vcUtilsParam({c: this.objId, localMicrophone: (arguments[0].localMicrophone ? arguments[0].localMicrophone.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onFrame', 'localMicrophone'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "object")){
						this.VidyoConnectorOnLocalMicrophoneFrame = onFrame;
						var params = vcUtilsParam({c: this.objId, localMicrophone: (arguments[1] ? arguments[1].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRegisterLocalMicrophoneFrameListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterLocalMonitorEventListener = function(onAdded, onRemoved, onSelected, onStateUpdated) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onAdded') && arguments[0].hasOwnProperty('onRemoved') && arguments[0].hasOwnProperty('onSelected') && arguments[0].hasOwnProperty('onStateUpdated')){
							this.VidyoConnectorOnLocalMonitorAdded = arguments[0].onAdded;
							this.VidyoConnectorOnLocalMonitorRemoved = arguments[0].onRemoved;
							this.VidyoConnectorOnLocalMonitorSelected = arguments[0].onSelected;
							this.VidyoConnectorOnLocalMonitorStateUpdated = arguments[0].onStateUpdated;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onAdded', 'onRemoved', 'onSelected', 'onStateUpdated'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "function")){
						this.VidyoConnectorOnLocalMonitorAdded = onAdded;
						this.VidyoConnectorOnLocalMonitorRemoved = onRemoved;
						this.VidyoConnectorOnLocalMonitorSelected = onSelected;
						this.VidyoConnectorOnLocalMonitorStateUpdated = onStateUpdated;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRegisterLocalMonitorEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterLocalMonitorFrameListener = function(onFrame, localMonitor, width, height, frameInterval) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onFrame') && arguments[0].hasOwnProperty('localMonitor') && arguments[0].hasOwnProperty('width') && arguments[0].hasOwnProperty('height') && arguments[0].hasOwnProperty('frameInterval')){
							this.VidyoConnectorOnLocalMonitorFrame = arguments[0].onFrame;
							var params = vcUtilsParam({c: this.objId, localMonitor: (arguments[0].localMonitor ? arguments[0].localMonitor.objId : 0), width: arguments[0].width, height: arguments[0].height, frameInterval: arguments[0].frameInterval});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onFrame', 'localMonitor', 'width', 'height', 'frameInterval'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 5 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "object") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number")){
						this.VidyoConnectorOnLocalMonitorFrame = onFrame;
						var params = vcUtilsParam({c: this.objId, localMonitor: (arguments[1] ? arguments[1].objId : 0), width: arguments[2], height: arguments[3], frameInterval: arguments[4]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRegisterLocalMonitorFrameListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterLocalSpeakerEventListener = function(onAdded, onRemoved, onSelected, onStateUpdated) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onAdded') && arguments[0].hasOwnProperty('onRemoved') && arguments[0].hasOwnProperty('onSelected') && arguments[0].hasOwnProperty('onStateUpdated')){
							this.VidyoConnectorOnLocalSpeakerAdded = arguments[0].onAdded;
							this.VidyoConnectorOnLocalSpeakerRemoved = arguments[0].onRemoved;
							this.VidyoConnectorOnLocalSpeakerSelected = arguments[0].onSelected;
							this.VidyoConnectorOnLocalSpeakerStateUpdated = arguments[0].onStateUpdated;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onAdded', 'onRemoved', 'onSelected', 'onStateUpdated'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "function")){
						this.VidyoConnectorOnLocalSpeakerAdded = onAdded;
						this.VidyoConnectorOnLocalSpeakerRemoved = onRemoved;
						this.VidyoConnectorOnLocalSpeakerSelected = onSelected;
						this.VidyoConnectorOnLocalSpeakerStateUpdated = onStateUpdated;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRegisterLocalSpeakerEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterLocalWindowShareEventListener = function(onAdded, onRemoved, onSelected, onStateUpdated) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onAdded') && arguments[0].hasOwnProperty('onRemoved') && arguments[0].hasOwnProperty('onSelected') && arguments[0].hasOwnProperty('onStateUpdated')){
							this.VidyoConnectorOnLocalWindowShareAdded = arguments[0].onAdded;
							this.VidyoConnectorOnLocalWindowShareRemoved = arguments[0].onRemoved;
							this.VidyoConnectorOnLocalWindowShareSelected = arguments[0].onSelected;
							this.VidyoConnectorOnLocalWindowShareStateUpdated = arguments[0].onStateUpdated;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onAdded', 'onRemoved', 'onSelected', 'onStateUpdated'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "function")){
						this.VidyoConnectorOnLocalWindowShareAdded = onAdded;
						this.VidyoConnectorOnLocalWindowShareRemoved = onRemoved;
						this.VidyoConnectorOnLocalWindowShareSelected = onSelected;
						this.VidyoConnectorOnLocalWindowShareStateUpdated = onStateUpdated;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRegisterLocalWindowShareEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterLocalWindowShareFrameListener = function(onFrame, localWindowShare, width, height, frameInterval) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onFrame') && arguments[0].hasOwnProperty('localWindowShare') && arguments[0].hasOwnProperty('width') && arguments[0].hasOwnProperty('height') && arguments[0].hasOwnProperty('frameInterval')){
							this.VidyoConnectorOnLocalWindowShareFrame = arguments[0].onFrame;
							var params = vcUtilsParam({c: this.objId, localWindowShare: (arguments[0].localWindowShare ? arguments[0].localWindowShare.objId : 0), width: arguments[0].width, height: arguments[0].height, frameInterval: arguments[0].frameInterval});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onFrame', 'localWindowShare', 'width', 'height', 'frameInterval'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 5 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "object") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number")){
						this.VidyoConnectorOnLocalWindowShareFrame = onFrame;
						var params = vcUtilsParam({c: this.objId, localWindowShare: (arguments[1] ? arguments[1].objId : 0), width: arguments[2], height: arguments[3], frameInterval: arguments[4]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRegisterLocalWindowShareFrameListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterLogEventListener = function(onLog, filter) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onLog') && arguments[0].hasOwnProperty('filter')){
							this.VidyoConnectorOnLog = arguments[0].onLog;
							var params = vcUtilsParam({c: this.objId, filter: arguments[0].filter});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onLog', 'filter'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "string")){
						this.VidyoConnectorOnLog = onLog;
						var params = vcUtilsParam({c: this.objId, filter: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRegisterLogEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterMessageEventListener = function(onChatMessageReceived) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onChatMessageReceived')){
							this.VidyoConnectorOnChatMessageReceived = arguments[0].onChatMessageReceived;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onChatMessageReceived'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoConnectorOnChatMessageReceived = onChatMessageReceived;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRegisterMessageEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterModerationCommandEventListener = function(onModerationCommand) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onModerationCommand')){
							this.VidyoConnectorOnModerationCommandReceived = arguments[0].onModerationCommand;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onModerationCommand'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoConnectorOnModerationCommandReceived = onModerationCommand;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRegisterModerationCommandEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterModerationResultEventListener = function(onModerationResult) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onModerationResult')){
							this.VidyoConnectorOnModerationResult = arguments[0].onModerationResult;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onModerationResult'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoConnectorOnModerationResult = onModerationResult;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRegisterModerationResultEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterNetworkInterfaceEventListener = function(onAdded, onRemoved, onSelected, onStateUpdated) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onAdded') && arguments[0].hasOwnProperty('onRemoved') && arguments[0].hasOwnProperty('onSelected') && arguments[0].hasOwnProperty('onStateUpdated')){
							this.VidyoConnectorOnNetworkInterfaceAdded = arguments[0].onAdded;
							this.VidyoConnectorOnNetworkInterfaceRemoved = arguments[0].onRemoved;
							this.VidyoConnectorOnNetworkInterfaceSelected = arguments[0].onSelected;
							this.VidyoConnectorOnNetworkInterfaceStateUpdated = arguments[0].onStateUpdated;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onAdded', 'onRemoved', 'onSelected', 'onStateUpdated'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "function")){
						this.VidyoConnectorOnNetworkInterfaceAdded = onAdded;
						this.VidyoConnectorOnNetworkInterfaceRemoved = onRemoved;
						this.VidyoConnectorOnNetworkInterfaceSelected = onSelected;
						this.VidyoConnectorOnNetworkInterfaceStateUpdated = onStateUpdated;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRegisterNetworkInterfaceEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterParticipantEventListener = function(onJoined, onLeft, onDynamicChanged, onLoudestChanged) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onJoined') && arguments[0].hasOwnProperty('onLeft') && arguments[0].hasOwnProperty('onDynamicChanged') && arguments[0].hasOwnProperty('onLoudestChanged')){
							this.VidyoConnectorOnParticipantJoined = arguments[0].onJoined;
							this.VidyoConnectorOnParticipantLeft = arguments[0].onLeft;
							this.VidyoConnectorOnDynamicParticipantChanged = arguments[0].onDynamicChanged;
							this.VidyoConnectorOnLoudestParticipantChanged = arguments[0].onLoudestChanged;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onJoined', 'onLeft', 'onDynamicChanged', 'onLoudestChanged'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "function")){
						this.VidyoConnectorOnParticipantJoined = onJoined;
						this.VidyoConnectorOnParticipantLeft = onLeft;
						this.VidyoConnectorOnDynamicParticipantChanged = onDynamicChanged;
						this.VidyoConnectorOnLoudestParticipantChanged = onLoudestChanged;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRegisterParticipantEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterPlugin = function(plugin) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('plugin')){
							var params = vcUtilsParam({c: this.objId, plugin: arguments[0].plugin});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['plugin'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({c: this.objId, plugin: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRegisterPlugin?" + params, OnComplete, OnError);
					});
				}

				this.RegisterReconnectEventListener = function(onReconnecting, onReconnected, onConferenceLost) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onReconnecting') && arguments[0].hasOwnProperty('onReconnected') && arguments[0].hasOwnProperty('onConferenceLost')){
							this.VidyoConnectorOnReconnecting = arguments[0].onReconnecting;
							this.VidyoConnectorOnReconnected = arguments[0].onReconnected;
							this.VidyoConnectorOnConferenceLost = arguments[0].onConferenceLost;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onReconnecting', 'onReconnected', 'onConferenceLost'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function")){
						this.VidyoConnectorOnReconnecting = onReconnecting;
						this.VidyoConnectorOnReconnected = onReconnected;
						this.VidyoConnectorOnConferenceLost = onConferenceLost;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRegisterReconnectEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterRecorderInCallEventListener = function(onRecorderInCallChanged) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onRecorderInCallChanged')){
							this.VidyoConnectorRecorderInCall = arguments[0].onRecorderInCallChanged;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onRecorderInCallChanged'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoConnectorRecorderInCall = onRecorderInCallChanged;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRegisterRecorderInCallEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterRemoteCameraEventListener = function(onAdded, onRemoved, onStateUpdated) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onAdded') && arguments[0].hasOwnProperty('onRemoved') && arguments[0].hasOwnProperty('onStateUpdated')){
							this.VidyoConnectorOnRemoteCameraAdded = arguments[0].onAdded;
							this.VidyoConnectorOnRemoteCameraRemoved = arguments[0].onRemoved;
							this.VidyoConnectorOnRemoteCameraStateUpdated = arguments[0].onStateUpdated;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onAdded', 'onRemoved', 'onStateUpdated'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function")){
						this.VidyoConnectorOnRemoteCameraAdded = onAdded;
						this.VidyoConnectorOnRemoteCameraRemoved = onRemoved;
						this.VidyoConnectorOnRemoteCameraStateUpdated = onStateUpdated;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRegisterRemoteCameraEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterRemoteCameraFrameListener = function(onFrame, remoteCamera, width, height, frameInterval) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onFrame') && arguments[0].hasOwnProperty('remoteCamera') && arguments[0].hasOwnProperty('width') && arguments[0].hasOwnProperty('height') && arguments[0].hasOwnProperty('frameInterval')){
							this.VidyoConnectorOnRemoteCameraFrame = arguments[0].onFrame;
							var params = vcUtilsParam({c: this.objId, remoteCamera: (arguments[0].remoteCamera ? arguments[0].remoteCamera.objId : 0), width: arguments[0].width, height: arguments[0].height, frameInterval: arguments[0].frameInterval});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onFrame', 'remoteCamera', 'width', 'height', 'frameInterval'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 5 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "object") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number")){
						this.VidyoConnectorOnRemoteCameraFrame = onFrame;
						var params = vcUtilsParam({c: this.objId, remoteCamera: (arguments[1] ? arguments[1].objId : 0), width: arguments[2], height: arguments[3], frameInterval: arguments[4]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRegisterRemoteCameraFrameListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterRemoteMicrophoneEnergyListener = function(onEnergy) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onEnergy')){
							this.VidyoConnectorOnRemoteMicrophoneEnergy = arguments[0].onEnergy;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onEnergy'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoConnectorOnRemoteMicrophoneEnergy = onEnergy;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRegisterRemoteMicrophoneEnergyListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterRemoteMicrophoneEventListener = function(onAdded, onRemoved, onStateUpdated) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onAdded') && arguments[0].hasOwnProperty('onRemoved') && arguments[0].hasOwnProperty('onStateUpdated')){
							this.VidyoConnectorOnRemoteMicrophoneAdded = arguments[0].onAdded;
							this.VidyoConnectorOnRemoteMicrophoneRemoved = arguments[0].onRemoved;
							this.VidyoConnectorOnRemoteMicrophoneStateUpdated = arguments[0].onStateUpdated;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onAdded', 'onRemoved', 'onStateUpdated'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function")){
						this.VidyoConnectorOnRemoteMicrophoneAdded = onAdded;
						this.VidyoConnectorOnRemoteMicrophoneRemoved = onRemoved;
						this.VidyoConnectorOnRemoteMicrophoneStateUpdated = onStateUpdated;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRegisterRemoteMicrophoneEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterRemoteMicrophoneFrameListener = function(onFrame, remoteMicrophone) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onFrame') && arguments[0].hasOwnProperty('remoteMicrophone')){
							this.VidyoConnectorOnRemoteMicrophoneFrame = arguments[0].onFrame;
							var params = vcUtilsParam({c: this.objId, remoteMicrophone: (arguments[0].remoteMicrophone ? arguments[0].remoteMicrophone.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onFrame', 'remoteMicrophone'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "object")){
						this.VidyoConnectorOnRemoteMicrophoneFrame = onFrame;
						var params = vcUtilsParam({c: this.objId, remoteMicrophone: (arguments[1] ? arguments[1].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRegisterRemoteMicrophoneFrameListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterRemoteRendererEventListener = function(onAdded, onRemoved, onStateUpdated) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onAdded') && arguments[0].hasOwnProperty('onRemoved') && arguments[0].hasOwnProperty('onStateUpdated')){
							this.VidyoConnectorOnRemoteRendererAdded = arguments[0].onAdded;
							this.VidyoConnectorOnRemoteRendererRemoved = arguments[0].onRemoved;
							this.VidyoConnectorOnRemoteRendererStateUpdated = arguments[0].onStateUpdated;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onAdded', 'onRemoved', 'onStateUpdated'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function")){
						this.VidyoConnectorOnRemoteRendererAdded = onAdded;
						this.VidyoConnectorOnRemoteRendererRemoved = onRemoved;
						this.VidyoConnectorOnRemoteRendererStateUpdated = onStateUpdated;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRegisterRemoteRendererEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterRemoteSpeakerEventListener = function(onAdded, onRemoved, onStateUpdated) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onAdded') && arguments[0].hasOwnProperty('onRemoved') && arguments[0].hasOwnProperty('onStateUpdated')){
							this.VidyoConnectorOnRemoteSpeakerAdded = arguments[0].onAdded;
							this.VidyoConnectorOnRemoteSpeakerRemoved = arguments[0].onRemoved;
							this.VidyoConnectorOnRemoteSpeakerStateUpdated = arguments[0].onStateUpdated;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onAdded', 'onRemoved', 'onStateUpdated'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function")){
						this.VidyoConnectorOnRemoteSpeakerAdded = onAdded;
						this.VidyoConnectorOnRemoteSpeakerRemoved = onRemoved;
						this.VidyoConnectorOnRemoteSpeakerStateUpdated = onStateUpdated;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRegisterRemoteSpeakerEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterRemoteWindowShareEventListener = function(onAdded, onRemoved, onStateUpdated) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onAdded') && arguments[0].hasOwnProperty('onRemoved') && arguments[0].hasOwnProperty('onStateUpdated')){
							this.VidyoConnectorOnRemoteWindowShareAdded = arguments[0].onAdded;
							this.VidyoConnectorOnRemoteWindowShareRemoved = arguments[0].onRemoved;
							this.VidyoConnectorOnRemoteWindowShareStateUpdated = arguments[0].onStateUpdated;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onAdded', 'onRemoved', 'onStateUpdated'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function")){
						this.VidyoConnectorOnRemoteWindowShareAdded = onAdded;
						this.VidyoConnectorOnRemoteWindowShareRemoved = onRemoved;
						this.VidyoConnectorOnRemoteWindowShareStateUpdated = onStateUpdated;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRegisterRemoteWindowShareEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterRemoteWindowShareFrameListener = function(onFrame, remoteWindowShare, width, height, frameInterval) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onFrame') && arguments[0].hasOwnProperty('remoteWindowShare') && arguments[0].hasOwnProperty('width') && arguments[0].hasOwnProperty('height') && arguments[0].hasOwnProperty('frameInterval')){
							this.VidyoConnectorOnRemoteWindowShareFrame = arguments[0].onFrame;
							var params = vcUtilsParam({c: this.objId, remoteWindowShare: (arguments[0].remoteWindowShare ? arguments[0].remoteWindowShare.objId : 0), width: arguments[0].width, height: arguments[0].height, frameInterval: arguments[0].frameInterval});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onFrame', 'remoteWindowShare', 'width', 'height', 'frameInterval'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 5 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "object") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number")){
						this.VidyoConnectorOnRemoteWindowShareFrame = onFrame;
						var params = vcUtilsParam({c: this.objId, remoteWindowShare: (arguments[1] ? arguments[1].objId : 0), width: arguments[2], height: arguments[3], frameInterval: arguments[4]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRegisterRemoteWindowShareFrameListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterResourceManagerEventListener = function(onAvailableResourcesChanged, onMaxRemoteSourcesChanged) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onAvailableResourcesChanged') && arguments[0].hasOwnProperty('onMaxRemoteSourcesChanged')){
							this.VidyoConnectorOnAvailableResourcesChanged = arguments[0].onAvailableResourcesChanged;
							this.VidyoConnectorOnMaxRemoteSourcesChanged = arguments[0].onMaxRemoteSourcesChanged;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onAvailableResourcesChanged', 'onMaxRemoteSourcesChanged'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function")){
						this.VidyoConnectorOnAvailableResourcesChanged = onAvailableResourcesChanged;
						this.VidyoConnectorOnMaxRemoteSourcesChanged = onMaxRemoteSourcesChanged;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRegisterResourceManagerEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterVirtualAudioSourceEventListener = function(onAdded, onRemoved, onStateUpdated, onSelected, onExternalMediaBufferReleased) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onAdded') && arguments[0].hasOwnProperty('onRemoved') && arguments[0].hasOwnProperty('onStateUpdated') && arguments[0].hasOwnProperty('onSelected') && arguments[0].hasOwnProperty('onExternalMediaBufferReleased')){
							this.VidyoConnectorOnVirtualAudioSourceAdded = arguments[0].onAdded;
							this.VidyoConnectorOnVirtualAudioSourceRemoved = arguments[0].onRemoved;
							this.VidyoConnectorOnVirtualAudioSourceStateUpdated = arguments[0].onStateUpdated;
							this.VidyoConnectorOnVirtualAudioSourceSelected = arguments[0].onSelected;
							this.VidyoConnectorOnVirtualAudioSourceExternalMediaBufferReleased = arguments[0].onExternalMediaBufferReleased;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onAdded', 'onRemoved', 'onStateUpdated', 'onSelected', 'onExternalMediaBufferReleased'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 5 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "function") && (typeof(arguments[4]) === "function")){
						this.VidyoConnectorOnVirtualAudioSourceAdded = onAdded;
						this.VidyoConnectorOnVirtualAudioSourceRemoved = onRemoved;
						this.VidyoConnectorOnVirtualAudioSourceStateUpdated = onStateUpdated;
						this.VidyoConnectorOnVirtualAudioSourceSelected = onSelected;
						this.VidyoConnectorOnVirtualAudioSourceExternalMediaBufferReleased = onExternalMediaBufferReleased;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRegisterVirtualAudioSourceEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterVirtualVideoSourceEventListener = function(onAdded, onRemoved, onStateUpdated, onExternalMediaBufferReleased) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onAdded') && arguments[0].hasOwnProperty('onRemoved') && arguments[0].hasOwnProperty('onStateUpdated') && arguments[0].hasOwnProperty('onExternalMediaBufferReleased')){
							this.VidyoConnectorOnVirtualVideoSourceAdded = arguments[0].onAdded;
							this.VidyoConnectorOnVirtualVideoSourceRemoved = arguments[0].onRemoved;
							this.VidyoConnectorOnVirtualVideoSourceStateUpdated = arguments[0].onStateUpdated;
							this.VidyoConnectorOnVirtualVideoSourceExternalMediaBufferReleased = arguments[0].onExternalMediaBufferReleased;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onAdded', 'onRemoved', 'onStateUpdated', 'onExternalMediaBufferReleased'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "function")){
						this.VidyoConnectorOnVirtualVideoSourceAdded = onAdded;
						this.VidyoConnectorOnVirtualVideoSourceRemoved = onRemoved;
						this.VidyoConnectorOnVirtualVideoSourceStateUpdated = onStateUpdated;
						this.VidyoConnectorOnVirtualVideoSourceExternalMediaBufferReleased = onExternalMediaBufferReleased;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRegisterVirtualVideoSourceEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterWebProxyEventListener = function(onWebProxyCredentialsRequest) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onWebProxyCredentialsRequest')){
							this.VidyoConnectorOnWebProxyCredentialsRequest = arguments[0].onWebProxyCredentialsRequest;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onWebProxyCredentialsRequest'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoConnectorOnWebProxyCredentialsRequest = onWebProxyCredentialsRequest;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRegisterWebProxyEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RemoveAudioDeviceFromWhitelist = function(deviceName) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('deviceName')){
							var params = vcUtilsParam({c: this.objId, deviceName: arguments[0].deviceName});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['deviceName'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({c: this.objId, deviceName: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRemoveAudioDeviceFromWhitelist?" + params, OnComplete, OnError);
					});
				}

				this.RemoveModeratorPIN = function(requestId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('requestId')){
							var params = vcUtilsParam({c: this.objId, requestId: arguments[0].requestId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['requestId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({c: this.objId, requestId: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRemoveModeratorPIN?" + params, OnComplete, OnError);
					});
				}

				this.RemoveModeratorRole = function(onRemoveModeratorRoleResult) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onRemoveModeratorRoleResult')){
							this.VidyoConnectorOnRemoveModeratorRoleResult = arguments[0].onRemoveModeratorRoleResult;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onRemoveModeratorRoleResult'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoConnectorOnRemoveModeratorRoleResult = onRemoveModeratorRoleResult;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRemoveModeratorRole?" + params, OnComplete, OnError);
					});
				}

				this.RemovePresenter = function(requestId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('requestId')){
							var params = vcUtilsParam({c: this.objId, requestId: arguments[0].requestId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['requestId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({c: this.objId, requestId: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRemovePresenter?" + params, OnComplete, OnError);
					});
				}

				this.RemoveRoomPIN = function(onRemoveRoomPinResult) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onRemoveRoomPinResult')){
							this.VidyoConnectorOnRemoveRoomPINResult = arguments[0].onRemoveRoomPinResult;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onRemoveRoomPinResult'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoConnectorOnRemoveRoomPINResult = onRemoveRoomPinResult;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRemoveRoomPIN?" + params, OnComplete, OnError);
					});
				}

				this.ReportLocalParticipantOnJoined = function(reportLocalParticipant) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('reportLocalParticipant')){
							var params = vcUtilsParam({c: this.objId, reportLocalParticipant: arguments[0].reportLocalParticipant});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['reportLocalParticipant'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({c: this.objId, reportLocalParticipant: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorReportLocalParticipantOnJoined?" + params, OnComplete, OnError);
					});
				}

				this.RequestModeratorRole = function(moderatorPIN, onRequestModeratorRoleResult) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('moderatorPIN') && arguments[0].hasOwnProperty('onRequestModeratorRoleResult')){
							this.VidyoConnectorOnRequestModeratorRoleResult = arguments[0].onRequestModeratorRoleResult;
							var params = vcUtilsParam({c: this.objId, moderatorPIN: arguments[0].moderatorPIN});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['moderatorPIN', 'onRequestModeratorRoleResult'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "function")){
						this.VidyoConnectorOnRequestModeratorRoleResult = onRequestModeratorRoleResult;
						var params = vcUtilsParam({c: this.objId, moderatorPIN: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRequestModeratorRole?" + params, OnComplete, OnError);
					});
				}

				this.RequestToResumeVideo = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRequestToResumeVideo?" + params, OnComplete, OnError);
					});
				}

				this.RequestToSpeak = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRequestToSpeak?" + params, OnComplete, OnError);
					});
				}

				this.RequestVideoForRemoteCamera = function(remoteCamera, width, height, frameInterval, onFirstFrameReceived) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('remoteCamera') && arguments[0].hasOwnProperty('width') && arguments[0].hasOwnProperty('height') && arguments[0].hasOwnProperty('frameInterval') && arguments[0].hasOwnProperty('onFirstFrameReceived')){
							this.VidyoConnectorOnRemoteCameraFirstFrameReceived = arguments[0].onFirstFrameReceived;
							var params = vcUtilsParam({c: this.objId, remoteCamera: (arguments[0].remoteCamera ? arguments[0].remoteCamera.objId : 0), width: arguments[0].width, height: arguments[0].height, frameInterval: arguments[0].frameInterval});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['remoteCamera', 'width', 'height', 'frameInterval', 'onFirstFrameReceived'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 5 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "function")){
						this.VidyoConnectorOnRemoteCameraFirstFrameReceived = onFirstFrameReceived;
						var params = vcUtilsParam({c: this.objId, remoteCamera: (arguments[0] ? arguments[0].objId : 0), width: arguments[1], height: arguments[2], frameInterval: arguments[3]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRequestVideoForRemoteCamera?" + params, OnComplete, OnError);
					});
				}

				this.RequestVideoForRemoteWindowShare = function(remoteWindowShare, width, height, frameInterval, onFirstFrameReceived) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('remoteWindowShare') && arguments[0].hasOwnProperty('width') && arguments[0].hasOwnProperty('height') && arguments[0].hasOwnProperty('frameInterval') && arguments[0].hasOwnProperty('onFirstFrameReceived')){
							this.VidyoConnectorOnRemoteWindowShareFirstFrameReceived = arguments[0].onFirstFrameReceived;
							var params = vcUtilsParam({c: this.objId, remoteWindowShare: (arguments[0].remoteWindowShare ? arguments[0].remoteWindowShare.objId : 0), width: arguments[0].width, height: arguments[0].height, frameInterval: arguments[0].frameInterval});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['remoteWindowShare', 'width', 'height', 'frameInterval', 'onFirstFrameReceived'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 5 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "function")){
						this.VidyoConnectorOnRemoteWindowShareFirstFrameReceived = onFirstFrameReceived;
						var params = vcUtilsParam({c: this.objId, remoteWindowShare: (arguments[0] ? arguments[0].objId : 0), width: arguments[1], height: arguments[2], frameInterval: arguments[3]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorRequestVideoForRemoteWindowShare?" + params, OnComplete, OnError);
					});
				}

				this.ResumeRecording = function(onRecordingServiceResumeResultCallback) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onRecordingServiceResumeResultCallback')){
							this.VidyoConnectorOnRecordingServiceResumeResult = arguments[0].onRecordingServiceResumeResultCallback;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onRecordingServiceResumeResultCallback'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoConnectorOnRecordingServiceResumeResult = onRecordingServiceResumeResultCallback;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorResumeRecording?" + params, OnComplete, OnError);
					});
				}

				this.SearchUsers = function(searchText, startIndex, maxRecords, onUserSearchResults) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('searchText') && arguments[0].hasOwnProperty('startIndex') && arguments[0].hasOwnProperty('maxRecords') && arguments[0].hasOwnProperty('onUserSearchResults')){
							this.VidyoConnectorOnUserSearchResults = arguments[0].onUserSearchResults;
							var params = vcUtilsParam({c: this.objId, searchText: arguments[0].searchText, startIndex: arguments[0].startIndex, maxRecords: arguments[0].maxRecords});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['searchText', 'startIndex', 'maxRecords', 'onUserSearchResults'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "function")){
						this.VidyoConnectorOnUserSearchResults = onUserSearchResults;
						var params = vcUtilsParam({c: this.objId, searchText: arguments[0], startIndex: arguments[1], maxRecords: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSearchUsers?" + params, OnComplete, OnError);
					});
				}

				this.SelectAudioContentShare = function(localMicrophone) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localMicrophone')){
							var params = vcUtilsParam({c: this.objId, localMicrophone: (arguments[0].localMicrophone ? arguments[0].localMicrophone.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localMicrophone'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({c: this.objId, localMicrophone: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSelectAudioContentShare?" + params, OnComplete, OnError);
					});
				}

				this.SelectDefaultCamera = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSelectDefaultCamera?" + params, OnComplete, OnError);
					});
				}

				this.SelectDefaultMicrophone = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSelectDefaultMicrophone?" + params, OnComplete, OnError);
					});
				}

				this.SelectDefaultNetworkInterfaceForMedia = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSelectDefaultNetworkInterfaceForMedia?" + params, OnComplete, OnError);
					});
				}

				this.SelectDefaultNetworkInterfaceForSignaling = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSelectDefaultNetworkInterfaceForSignaling?" + params, OnComplete, OnError);
					});
				}

				this.SelectDefaultSpeaker = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSelectDefaultSpeaker?" + params, OnComplete, OnError);
					});
				}

				this.SelectLocalCamera = function(localCamera) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localCamera')){
							var params = vcUtilsParam({c: this.objId, localCamera: (arguments[0].localCamera ? arguments[0].localCamera.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localCamera'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({c: this.objId, localCamera: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSelectLocalCamera?" + params, OnComplete, OnError);
					});
				}

				this.SelectLocalMicrophone = function(localMicrophone) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localMicrophone')){
							var params = vcUtilsParam({c: this.objId, localMicrophone: (arguments[0].localMicrophone ? arguments[0].localMicrophone.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localMicrophone'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({c: this.objId, localMicrophone: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSelectLocalMicrophone?" + params, OnComplete, OnError);
					});
				}

				this.SelectLocalMonitor = function(localMonitor) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localMonitor')){
							var params = vcUtilsParam({c: this.objId, localMonitor: (arguments[0].localMonitor ? arguments[0].localMonitor.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localMonitor'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({c: this.objId, localMonitor: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSelectLocalMonitor?" + params, OnComplete, OnError);
					});
				}

				this.SelectLocalMonitorAdvanced = function(localMonitor, options) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localMonitor') && arguments[0].hasOwnProperty('options')){
							var params = vcUtilsParam({c: this.objId, localMonitor: (arguments[0].localMonitor ? arguments[0].localMonitor.objId : 0), options: JSON.stringify(arguments[0].options)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localMonitor', 'options'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "object")){
						var params = vcUtilsParam({c: this.objId, localMonitor: (arguments[0] ? arguments[0].objId : 0), options: JSON.stringify(arguments[1])});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							if(options&& response.data.options)
								vcUtilsExtend(options, response.data.options);
							resolve(response.data);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSelectLocalMonitorAdvanced?" + params, OnComplete, OnError);
					});
				}

				this.SelectLocalSpeaker = function(localSpeaker) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localSpeaker')){
							var params = vcUtilsParam({c: this.objId, localSpeaker: (arguments[0].localSpeaker ? arguments[0].localSpeaker.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localSpeaker'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({c: this.objId, localSpeaker: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSelectLocalSpeaker?" + params, OnComplete, OnError);
					});
				}

				this.SelectLocalWindowShare = function(localWindowShare) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localWindowShare')){
							var params = vcUtilsParam({c: this.objId, localWindowShare: (arguments[0].localWindowShare ? arguments[0].localWindowShare.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localWindowShare'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({c: this.objId, localWindowShare: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSelectLocalWindowShare?" + params, OnComplete, OnError);
					});
				}

				this.SelectLocalWindowShareAdvanced = function(localWindowShare, options) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localWindowShare') && arguments[0].hasOwnProperty('options')){
							var params = vcUtilsParam({c: this.objId, localWindowShare: (arguments[0].localWindowShare ? arguments[0].localWindowShare.objId : 0), options: JSON.stringify(arguments[0].options)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localWindowShare', 'options'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "object")){
						var params = vcUtilsParam({c: this.objId, localWindowShare: (arguments[0] ? arguments[0].objId : 0), options: JSON.stringify(arguments[1])});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							if(options&& response.data.options)
								vcUtilsExtend(options, response.data.options);
							resolve(response.data);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSelectLocalWindowShareAdvanced?" + params, OnComplete, OnError);
					});
				}

				this.SelectNetworkInterfaceForMedia = function(networkInterface) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('networkInterface')){
							var params = vcUtilsParam({c: this.objId, networkInterface: (arguments[0].networkInterface ? arguments[0].networkInterface.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['networkInterface'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({c: this.objId, networkInterface: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSelectNetworkInterfaceForMedia?" + params, OnComplete, OnError);
					});
				}

				this.SelectNetworkInterfaceForSignaling = function(networkInterface) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('networkInterface')){
							var params = vcUtilsParam({c: this.objId, networkInterface: (arguments[0].networkInterface ? arguments[0].networkInterface.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['networkInterface'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({c: this.objId, networkInterface: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSelectNetworkInterfaceForSignaling?" + params, OnComplete, OnError);
					});
				}

				this.SelectVideoContentShare = function(localCamera) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localCamera')){
							var params = vcUtilsParam({c: this.objId, localCamera: (arguments[0].localCamera ? arguments[0].localCamera.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localCamera'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({c: this.objId, localCamera: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSelectVideoContentShare?" + params, OnComplete, OnError);
					});
				}

				this.SelectVirtualAudioContentShare = function(virtualAudioSource) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('virtualAudioSource')){
							var params = vcUtilsParam({c: this.objId, virtualAudioSource: (arguments[0].virtualAudioSource ? arguments[0].virtualAudioSource.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['virtualAudioSource'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({c: this.objId, virtualAudioSource: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSelectVirtualAudioContentShare?" + params, OnComplete, OnError);
					});
				}

				this.SelectVirtualCamera = function(virtualCamera) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('virtualCamera')){
							var params = vcUtilsParam({c: this.objId, virtualCamera: (arguments[0].virtualCamera ? arguments[0].virtualCamera.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['virtualCamera'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({c: this.objId, virtualCamera: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							if(virtualCamera&& response.data.virtualCamera)
								vcUtilsExtend(virtualCamera, response.data.virtualCamera);
							resolve(response.data);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSelectVirtualCamera?" + params, OnComplete, OnError);
					});
				}

				this.SelectVirtualMicrophone = function(virtualAudioSource) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('virtualAudioSource')){
							var params = vcUtilsParam({c: this.objId, virtualAudioSource: (arguments[0].virtualAudioSource ? arguments[0].virtualAudioSource.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['virtualAudioSource'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({c: this.objId, virtualAudioSource: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSelectVirtualMicrophone?" + params, OnComplete, OnError);
					});
				}

				this.SelectVirtualSourceWindowShare = function(virtualWindowShare) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('virtualWindowShare')){
							var params = vcUtilsParam({c: this.objId, virtualWindowShare: (arguments[0].virtualWindowShare ? arguments[0].virtualWindowShare.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['virtualWindowShare'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({c: this.objId, virtualWindowShare: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							if(virtualWindowShare&& response.data.virtualWindowShare)
								vcUtilsExtend(virtualWindowShare, response.data.virtualWindowShare);
							resolve(response.data);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSelectVirtualSourceWindowShare?" + params, OnComplete, OnError);
					});
				}

				this.SendChatMessage = function(message) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('message')){
							var params = vcUtilsParam({c: this.objId, message: arguments[0].message});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['message'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({c: this.objId, message: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSendChatMessage?" + params, OnComplete, OnError);
					});
				}

				this.SendPrivateChatMessage = function(participant, message) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('participant') && arguments[0].hasOwnProperty('message')){
							var params = vcUtilsParam({c: this.objId, participant: (arguments[0].participant ? arguments[0].participant.objId : 0), message: arguments[0].message});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['participant', 'message'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "string")){
						var params = vcUtilsParam({c: this.objId, participant: (arguments[0] ? arguments[0].objId : 0), message: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSendPrivateChatMessage?" + params, OnComplete, OnError);
					});
				}

				this.SendVirtualAudioSourceFrame = function(virtualAudioSource, audioFrame) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('virtualAudioSource') && arguments[0].hasOwnProperty('audioFrame')){
							var params = vcUtilsParam({c: this.objId, virtualAudioSource: (arguments[0].virtualAudioSource ? arguments[0].virtualAudioSource.objId : 0), audioFrame: (arguments[0].audioFrame ? arguments[0].audioFrame.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['virtualAudioSource', 'audioFrame'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "object")){
						var params = vcUtilsParam({c: this.objId, virtualAudioSource: (arguments[0] ? arguments[0].objId : 0), audioFrame: (arguments[1] ? arguments[1].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							if(virtualAudioSource&& response.data.virtualAudioSource)
								vcUtilsExtend(virtualAudioSource, response.data.virtualAudioSource);
							if(audioFrame&& response.data.audioFrame)
								vcUtilsExtend(audioFrame, response.data.audioFrame);
							resolve(response.data);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSendVirtualAudioSourceFrame?" + params, OnComplete, OnError);
					});
				}

				this.SendVirtualAudioSourceFrameWithExternalData = function(virtualAudioSource, buffer, nbSamples, elapsedTime) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('virtualAudioSource') && arguments[0].hasOwnProperty('buffer') && arguments[0].hasOwnProperty('nbSamples') && arguments[0].hasOwnProperty('elapsedTime')){
							var params = vcUtilsParam({c: this.objId, virtualAudioSource: (arguments[0].virtualAudioSource ? arguments[0].virtualAudioSource.objId : 0), buffer: arguments[0].buffer, nbSamples: arguments[0].nbSamples, elapsedTime: arguments[0].elapsedTime});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['virtualAudioSource', 'buffer', 'nbSamples', 'elapsedTime'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number")){
						var params = vcUtilsParam({c: this.objId, virtualAudioSource: (arguments[0] ? arguments[0].objId : 0), buffer: arguments[1], nbSamples: arguments[1], elapsedTime: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							if(virtualAudioSource&& response.data.virtualAudioSource)
								vcUtilsExtend(virtualAudioSource, response.data.virtualAudioSource);
							resolve(response.data);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSendVirtualAudioSourceFrameWithExternalData?" + params, OnComplete, OnError);
					});
				}

				this.SetAdvancedLogOptions = function(loggerType, advancedLogFilter) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('loggerType') && arguments[0].hasOwnProperty('advancedLogFilter')){
							var params = vcUtilsParam({c: this.objId, loggerType: arguments[0].loggerType, advancedLogFilter: arguments[0].advancedLogFilter});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['loggerType', 'advancedLogFilter'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string")){
						var params = vcUtilsParam({c: this.objId, loggerType: arguments[0], advancedLogFilter: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetAdvancedLogOptions?" + params, OnComplete, OnError);
					});
				}

				this.SetAdvancedOptions = function(options) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('options')){
							var params = vcUtilsParam({c: this.objId, options: arguments[0].options});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['options'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({c: this.objId, options: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetAdvancedOptions?" + params, OnComplete, OnError);
					});
				}

				this.SetAudioBitrateMultiplier = function(bitrateMultiplier) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('bitrateMultiplier')){
							var params = vcUtilsParam({c: this.objId, bitrateMultiplier: arguments[0].bitrateMultiplier});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['bitrateMultiplier'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({c: this.objId, bitrateMultiplier: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetAudioBitrateMultiplier?" + params, OnComplete, OnError);
					});
				}

				this.SetAudioMode = function(audioMode) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('audioMode')){
							var params = vcUtilsParam({c: this.objId, audioMode: arguments[0].audioMode});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['audioMode'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({c: this.objId, audioMode: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetAudioMode?" + params, OnComplete, OnError);
					});
				}

				this.SetAudioPacketInterval = function(packetInterval) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('packetInterval')){
							var params = vcUtilsParam({c: this.objId, packetInterval: arguments[0].packetInterval});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['packetInterval'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({c: this.objId, packetInterval: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetAudioPacketInterval?" + params, OnComplete, OnError);
					});
				}

				this.SetAudioPacketLossPercentage = function(lossPercentage) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('lossPercentage')){
							var params = vcUtilsParam({c: this.objId, lossPercentage: arguments[0].lossPercentage});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['lossPercentage'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({c: this.objId, lossPercentage: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetAudioPacketLossPercentage?" + params, OnComplete, OnError);
					});
				}

				this.SetAutoReconnect = function(enable) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('enable')){
							var params = vcUtilsParam({c: this.objId, enable: arguments[0].enable});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['enable'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({c: this.objId, enable: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetAutoReconnect?" + params, OnComplete, OnError);
					});
				}

				this.SetAutoReconnectAttemptBackOff = function(backOff) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('backOff')){
							var params = vcUtilsParam({c: this.objId, backOff: arguments[0].backOff});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['backOff'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({c: this.objId, backOff: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetAutoReconnectAttemptBackOff?" + params, OnComplete, OnError);
					});
				}

				this.SetAutoReconnectMaxAttempts = function(maxAttempts) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('maxAttempts')){
							var params = vcUtilsParam({c: this.objId, maxAttempts: arguments[0].maxAttempts});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['maxAttempts'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({c: this.objId, maxAttempts: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetAutoReconnectMaxAttempts?" + params, OnComplete, OnError);
					});
				}

				this.SetBlurIntensity = function(intensity) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('intensity')){
							var params = vcUtilsParam({c: this.objId, intensity: arguments[0].intensity});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['intensity'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({c: this.objId, intensity: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetBlurIntensity?" + params, OnComplete, OnError);
					});
				}

				this.SetCameraBackgroundEffect = function(effectInfo) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('effectInfo')){
							var params = vcUtilsParam({c: this.objId, effectInfo: JSON.stringify(arguments[0].effectInfo)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['effectInfo'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({c: this.objId, effectInfo: JSON.stringify(arguments[0])});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetCameraBackgroundEffect?" + params, OnComplete, OnError);
					});
				}

				this.SetCameraNudgeConfiguration = function(cameraNudgeConfig) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('cameraNudgeConfig')){
							var params = vcUtilsParam({c: this.objId, cameraNudgeConfig: arguments[0].cameraNudgeConfig});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['cameraNudgeConfig'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({c: this.objId, cameraNudgeConfig: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetCameraNudgeConfiguration?" + params, OnComplete, OnError);
					});
				}

				this.SetCameraPrivacy = function(privacy) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('privacy')){
							var params = vcUtilsParam({c: this.objId, privacy: arguments[0].privacy});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['privacy'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({c: this.objId, privacy: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetCameraPrivacy?" + params, OnComplete, OnError);
					});
				}

				this.SetCertificateAuthorityFile = function(certificateAuthorityFile) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('certificateAuthorityFile')){
							var params = vcUtilsParam({c: this.objId, certificateAuthorityFile: arguments[0].certificateAuthorityFile});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['certificateAuthorityFile'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({c: this.objId, certificateAuthorityFile: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetCertificateAuthorityFile?" + params, OnComplete, OnError);
					});
				}

				this.SetCertificateAuthorityList = function(certificateAuthorityList) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('certificateAuthorityList')){
							var params = vcUtilsParam({c: this.objId, certificateAuthorityList: arguments[0].certificateAuthorityList});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['certificateAuthorityList'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({c: this.objId, certificateAuthorityList: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetCertificateAuthorityList?" + params, OnComplete, OnError);
					});
				}

				this.SetConferenceNumber = function(conferenceNumber) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('conferenceNumber')){
							var params = vcUtilsParam({c: this.objId, conferenceNumber: arguments[0].conferenceNumber});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['conferenceNumber'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({c: this.objId, conferenceNumber: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetConferenceNumber?" + params, OnComplete, OnError);
					});
				}

				this.SetCpuTradeOffProfile = function(profile) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('profile')){
							var params = vcUtilsParam({c: this.objId, profile: arguments[0].profile});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['profile'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({c: this.objId, profile: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetCpuTradeOffProfile?" + params, OnComplete, OnError);
					});
				}

				this.SetDisableVideoOnLowBandwidth = function(enable) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('enable')){
							var params = vcUtilsParam({c: this.objId, enable: arguments[0].enable});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['enable'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({c: this.objId, enable: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetDisableVideoOnLowBandwidth?" + params, OnComplete, OnError);
					});
				}

				this.SetDisableVideoOnLowBandwidthAudioStreams = function(audioStreams) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('audioStreams')){
							var params = vcUtilsParam({c: this.objId, audioStreams: arguments[0].audioStreams});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['audioStreams'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({c: this.objId, audioStreams: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetDisableVideoOnLowBandwidthAudioStreams?" + params, OnComplete, OnError);
					});
				}

				this.SetDisableVideoOnLowBandwidthRecoveryTime = function(recoveryTime) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('recoveryTime')){
							var params = vcUtilsParam({c: this.objId, recoveryTime: arguments[0].recoveryTime});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['recoveryTime'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({c: this.objId, recoveryTime: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetDisableVideoOnLowBandwidthRecoveryTime?" + params, OnComplete, OnError);
					});
				}

				this.SetDisableVideoOnLowBandwidthResponseTime = function(responseTime) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('responseTime')){
							var params = vcUtilsParam({c: this.objId, responseTime: arguments[0].responseTime});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['responseTime'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({c: this.objId, responseTime: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetDisableVideoOnLowBandwidthResponseTime?" + params, OnComplete, OnError);
					});
				}

				this.SetDisableVideoOnLowBandwidthSampleTime = function(sampleTime) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('sampleTime')){
							var params = vcUtilsParam({c: this.objId, sampleTime: arguments[0].sampleTime});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['sampleTime'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({c: this.objId, sampleTime: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetDisableVideoOnLowBandwidthSampleTime?" + params, OnComplete, OnError);
					});
				}

				this.SetDisableVideoOnLowBandwidthThreshold = function(kbps) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('kbps')){
							var params = vcUtilsParam({c: this.objId, kbps: arguments[0].kbps});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['kbps'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({c: this.objId, kbps: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetDisableVideoOnLowBandwidthThreshold?" + params, OnComplete, OnError);
					});
				}

				this.SetFileLoggerRotationParameters = function(maxSize, wrapPeriod, wrapCount) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('maxSize') && arguments[0].hasOwnProperty('wrapPeriod') && arguments[0].hasOwnProperty('wrapCount')){
							var params = vcUtilsParam({c: this.objId, maxSize: arguments[0].maxSize, wrapPeriod: arguments[0].wrapPeriod, wrapCount: arguments[0].wrapCount});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['maxSize', 'wrapPeriod', 'wrapCount'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number")){
						var params = vcUtilsParam({c: this.objId, maxSize: arguments[0], wrapPeriod: arguments[1], wrapCount: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetFileLoggerRotationParameters?" + params, OnComplete, OnError);
					});
				}

				this.SetFontFileName = function(fontFileName) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('fontFileName')){
							var params = vcUtilsParam({c: this.objId, fontFileName: arguments[0].fontFileName});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['fontFileName'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({c: this.objId, fontFileName: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetFontFileName?" + params, OnComplete, OnError);
					});
				}

				this.SetLocation = function(latitude, longitude) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('latitude') && arguments[0].hasOwnProperty('longitude')){
							var params = vcUtilsParam({c: this.objId, latitude: arguments[0].latitude, longitude: arguments[0].longitude});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['latitude', 'longitude'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number")){
						var params = vcUtilsParam({c: this.objId, latitude: arguments[0], longitude: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetLocation?" + params, OnComplete, OnError);
					});
				}

				this.SetLogFilePath = function(filename) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('filename')){
							var params = vcUtilsParam({c: this.objId, filename: arguments[0].filename});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['filename'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({c: this.objId, filename: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetLogFilePath?" + params, OnComplete, OnError);
					});
				}

				this.SetLogLevel = function(loggerType, logLevel) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('loggerType') && arguments[0].hasOwnProperty('logLevel')){
							var params = vcUtilsParam({c: this.objId, loggerType: arguments[0].loggerType, logLevel: arguments[0].logLevel});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['loggerType', 'logLevel'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string")){
						var params = vcUtilsParam({c: this.objId, loggerType: arguments[0], logLevel: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetLogLevel?" + params, OnComplete, OnError);
					});
				}

				this.SetMaxBitRate = function(bitRate) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('bitRate')){
							var params = vcUtilsParam({c: this.objId, bitRate: arguments[0].bitRate});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['bitRate'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({c: this.objId, bitRate: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetMaxBitRate?" + params, OnComplete, OnError);
					});
				}

				this.SetMaxReceiveBitRate = function(bitRate) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('bitRate')){
							var params = vcUtilsParam({c: this.objId, bitRate: arguments[0].bitRate});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['bitRate'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({c: this.objId, bitRate: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetMaxReceiveBitRate?" + params, OnComplete, OnError);
					});
				}

				this.SetMaxSendBitRate = function(bitRate) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('bitRate')){
							var params = vcUtilsParam({c: this.objId, bitRate: arguments[0].bitRate});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['bitRate'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({c: this.objId, bitRate: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetMaxSendBitRate?" + params, OnComplete, OnError);
					});
				}

				this.SetMicrophoneMaxBoostLevel = function(boostLevel) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('boostLevel')){
							var params = vcUtilsParam({c: this.objId, boostLevel: arguments[0].boostLevel});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['boostLevel'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({c: this.objId, boostLevel: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetMicrophoneMaxBoostLevel?" + params, OnComplete, OnError);
					});
				}

				this.SetMicrophonePrivacy = function(privacy) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('privacy')){
							var params = vcUtilsParam({c: this.objId, privacy: arguments[0].privacy});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['privacy'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({c: this.objId, privacy: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetMicrophonePrivacy?" + params, OnComplete, OnError);
					});
				}

				this.SetMinMicrophoneVolume = function(volumePercent) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('volumePercent')){
							var params = vcUtilsParam({c: this.objId, volumePercent: arguments[0].volumePercent});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['volumePercent'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({c: this.objId, volumePercent: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetMinMicrophoneVolume?" + params, OnComplete, OnError);
					});
				}

				this.SetMode = function(mode) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('mode')){
							var params = vcUtilsParam({c: this.objId, mode: arguments[0].mode});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['mode'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({c: this.objId, mode: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetMode?" + params, OnComplete, OnError);
					});
				}

				this.SetModeratorPIN = function(moderatorPIN, requestId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('moderatorPIN') && arguments[0].hasOwnProperty('requestId')){
							var params = vcUtilsParam({c: this.objId, moderatorPIN: arguments[0].moderatorPIN, requestId: arguments[0].requestId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['moderatorPIN', 'requestId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string")){
						var params = vcUtilsParam({c: this.objId, moderatorPIN: arguments[0], requestId: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetModeratorPIN?" + params, OnComplete, OnError);
					});
				}

				this.SetOptions = function(options) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('options')){
							var params = vcUtilsParam({c: this.objId, options: arguments[0].options});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['options'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({c: this.objId, options: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetOptions?" + params, OnComplete, OnError);
					});
				}

				this.SetPool = function(name) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('name')){
							var params = vcUtilsParam({c: this.objId, name: arguments[0].name});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['name'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({c: this.objId, name: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetPool?" + params, OnComplete, OnError);
					});
				}

				this.SetPreferredAudioCodec = function(preferredAudioCodec) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('preferredAudioCodec')){
							var params = vcUtilsParam({c: this.objId, preferredAudioCodec: arguments[0].preferredAudioCodec});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['preferredAudioCodec'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({c: this.objId, preferredAudioCodec: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetPreferredAudioCodec?" + params, OnComplete, OnError);
					});
				}

				this.SetPresenter = function(participant, requestId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('participant') && arguments[0].hasOwnProperty('requestId')){
							var params = vcUtilsParam({c: this.objId, participant: (arguments[0].participant ? arguments[0].participant.objId : 0), requestId: arguments[0].requestId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['participant', 'requestId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "string")){
						var params = vcUtilsParam({c: this.objId, participant: (arguments[0] ? arguments[0].objId : 0), requestId: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetPresenter?" + params, OnComplete, OnError);
					});
				}

				this.SetProductInfo = function(productInfo) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('productInfo')){
							var params = vcUtilsParam({c: this.objId, productInfo: JSON.stringify({"productInfo": arguments[0].productInfo})});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['productInfo'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({c: this.objId, productInfo: JSON.stringify({"productInfo": arguments[0]})});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetProductInfo?" + params, OnComplete, OnError);
					});
				}

				this.SetRendererOptionsForViewId = function(viewId, options) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('viewId') && arguments[0].hasOwnProperty('options')){
							arguments[0].viewId = UpdateViewOnDOM({uiEvent:"SetRendererOptionsForViewId", viewId:arguments[0].viewId, options:arguments[0].options});
							var params = vcUtilsParam({c: this.objId, viewId: arguments[0].viewId, options: arguments[0].options});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['viewId', 'options'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string")){
						arguments[0] = UpdateViewOnDOM({uiEvent:"SetRendererOptionsForViewId", viewId:viewId, options:options});
						var params = vcUtilsParam({c: this.objId, viewId: arguments[0], options: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetRendererOptionsForViewId?" + params, OnComplete, OnError);
					});
				}

				this.SetRoomPIN = function(roomPIN, onSetRoomPinResult) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('roomPIN') && arguments[0].hasOwnProperty('onSetRoomPinResult')){
							this.VidyoConnectorOnSetRoomPINResult = arguments[0].onSetRoomPinResult;
							var params = vcUtilsParam({c: this.objId, roomPIN: arguments[0].roomPIN});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['roomPIN', 'onSetRoomPinResult'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "function")){
						this.VidyoConnectorOnSetRoomPINResult = onSetRoomPinResult;
						var params = vcUtilsParam({c: this.objId, roomPIN: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetRoomPIN?" + params, OnComplete, OnError);
					});
				}

				this.SetSpeakerPrivacy = function(privacy) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('privacy')){
							var params = vcUtilsParam({c: this.objId, privacy: arguments[0].privacy});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['privacy'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({c: this.objId, privacy: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetSpeakerPrivacy?" + params, OnComplete, OnError);
					});
				}

				this.SetStaticShareSvcState = function(enable) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('enable')){
							var params = vcUtilsParam({c: this.objId, enable: arguments[0].enable});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['enable'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({c: this.objId, enable: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetStaticShareSvcState?" + params, OnComplete, OnError);
					});
				}

				this.SetStatisticRate = function(statRate) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('statRate')){
							var params = vcUtilsParam({c: this.objId, statRate: arguments[0].statRate});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['statRate'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({c: this.objId, statRate: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetStatisticRate?" + params, OnComplete, OnError);
					});
				}

				this.SetTCPTransport = function(enable) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('enable')){
							var params = vcUtilsParam({c: this.objId, enable: arguments[0].enable});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['enable'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({c: this.objId, enable: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetTCPTransport?" + params, OnComplete, OnError);
					});
				}

				this.SetTURNAddressCredentials = function(turnAddress, port, username, password, baseTransport) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('turnAddress') && arguments[0].hasOwnProperty('port') && arguments[0].hasOwnProperty('username') && arguments[0].hasOwnProperty('password') && arguments[0].hasOwnProperty('baseTransport')){
							var params = vcUtilsParam({c: this.objId, turnAddress: arguments[0].turnAddress, port: arguments[0].port, username: arguments[0].username, password: arguments[0].password, baseTransport: arguments[0].baseTransport});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['turnAddress', 'port', 'username', 'password', 'baseTransport'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 5 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "string") && (typeof(arguments[3]) === "string") && (typeof(arguments[4]) === "string")){
						var params = vcUtilsParam({c: this.objId, turnAddress: arguments[0], port: arguments[1], username: arguments[2], password: arguments[3], baseTransport: arguments[4]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetTURNAddressCredentials?" + params, OnComplete, OnError);
					});
				}

				this.SetTURNServerCertificateRequired = function(required) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('required')){
							var params = vcUtilsParam({c: this.objId, required: arguments[0].required});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['required'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({c: this.objId, required: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetTURNServerCertificateRequired?" + params, OnComplete, OnError);
					});
				}

				this.SetUDPTransport = function(enable) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('enable')){
							var params = vcUtilsParam({c: this.objId, enable: arguments[0].enable});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['enable'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({c: this.objId, enable: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetUDPTransport?" + params, OnComplete, OnError);
					});
				}

				this.SetViewAnimationSpeed = function(viewId, speedPercentage) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('viewId') && arguments[0].hasOwnProperty('speedPercentage')){
							arguments[0].viewId = UpdateViewOnDOM({uiEvent:"SetViewAnimationSpeed", viewId:arguments[0].viewId, speedPercentage:arguments[0].speedPercentage});
							var params = vcUtilsParam({c: this.objId, viewId: arguments[0].viewId, speedPercentage: arguments[0].speedPercentage});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['viewId', 'speedPercentage'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "number")){
						arguments[0] = UpdateViewOnDOM({uiEvent:"SetViewAnimationSpeed", viewId:viewId, speedPercentage:speedPercentage});
						var params = vcUtilsParam({c: this.objId, viewId: arguments[0], speedPercentage: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetViewAnimationSpeed?" + params, OnComplete, OnError);
					});
				}

				this.SetViewBackgroundColor = function(viewId, red, green, blue) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('viewId') && arguments[0].hasOwnProperty('red') && arguments[0].hasOwnProperty('green') && arguments[0].hasOwnProperty('blue')){
							arguments[0].viewId = UpdateViewOnDOM({uiEvent:"SetViewBackgroundColor", viewId:arguments[0].viewId, red:arguments[0].red, green:arguments[0].green, blue:arguments[0].blue});
							var params = vcUtilsParam({c: this.objId, viewId: arguments[0].viewId, red: arguments[0].red, green: arguments[0].green, blue: arguments[0].blue});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['viewId', 'red', 'green', 'blue'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number")){
						arguments[0] = UpdateViewOnDOM({uiEvent:"SetViewBackgroundColor", viewId:viewId, red:red, green:green, blue:blue});
						var params = vcUtilsParam({c: this.objId, viewId: arguments[0], red: arguments[1], green: arguments[2], blue: arguments[3]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetViewBackgroundColor?" + params, OnComplete, OnError);
					});
				}

				this.SetVirtualBackgroundPicture = function(pathToPicture) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('pathToPicture')){
							var params = vcUtilsParam({c: this.objId, pathToPicture: arguments[0].pathToPicture});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['pathToPicture'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({c: this.objId, pathToPicture: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetVirtualBackgroundPicture?" + params, OnComplete, OnError);
					});
				}

				this.SetWebProxyAddressCredentials = function(proxyAddress, username, password) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('proxyAddress') && arguments[0].hasOwnProperty('username') && arguments[0].hasOwnProperty('password')){
							var params = vcUtilsParam({c: this.objId, proxyAddress: arguments[0].proxyAddress, username: arguments[0].username, password: arguments[0].password});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['proxyAddress', 'username', 'password'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "string")){
						var params = vcUtilsParam({c: this.objId, proxyAddress: arguments[0], username: arguments[1], password: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetWebProxyAddressCredentials?" + params, OnComplete, OnError);
					});
				}

				this.SetWebProxyTransport = function(enable) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('enable')){
							var params = vcUtilsParam({c: this.objId, enable: arguments[0].enable});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['enable'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({c: this.objId, enable: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetWebProxyTransport?" + params, OnComplete, OnError);
					});
				}

				this.SetWebProxyTransportAddress = function(name, port) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('name') && arguments[0].hasOwnProperty('port')){
							var params = vcUtilsParam({c: this.objId, name: arguments[0].name, port: arguments[0].port});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['name', 'port'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "number")){
						var params = vcUtilsParam({c: this.objId, name: arguments[0], port: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSetWebProxyTransportAddress?" + params, OnComplete, OnError);
					});
				}

				this.ShowAudioMeters = function(viewId, showMeters) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('viewId') && arguments[0].hasOwnProperty('showMeters')){
							arguments[0].viewId = UpdateViewOnDOM({uiEvent:"ShowAudioMeters", viewId:arguments[0].viewId, showMeters:arguments[0].showMeters});
							var params = vcUtilsParam({c: this.objId, viewId: arguments[0].viewId, showMeters: arguments[0].showMeters});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['viewId', 'showMeters'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "boolean")){
						arguments[0] = UpdateViewOnDOM({uiEvent:"ShowAudioMeters", viewId:viewId, showMeters:showMeters});
						var params = vcUtilsParam({c: this.objId, viewId: arguments[0], showMeters: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorShowAudioMeters?" + params, OnComplete, OnError);
					});
				}

				this.ShowPreview = function(preview) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('preview')){
							var params = vcUtilsParam({c: this.objId, preview: arguments[0].preview});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['preview'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({c: this.objId, preview: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorShowPreview?" + params, OnComplete, OnError);
					});
				}

				this.ShowViewAt = function(viewId, x, y, width, height) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('viewId') && arguments[0].hasOwnProperty('x') && arguments[0].hasOwnProperty('y') && arguments[0].hasOwnProperty('width') && arguments[0].hasOwnProperty('height')){
							arguments[0].viewId = UpdateViewOnDOM({uiEvent:"ShowViewAt", viewId:arguments[0].viewId, x:arguments[0].x, y:arguments[0].y, width:arguments[0].width, height:arguments[0].height});
							var params = vcUtilsParam({c: this.objId, viewId: arguments[0].viewId, x: arguments[0].x, y: arguments[0].y, width: arguments[0].width, height: arguments[0].height});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['viewId', 'x', 'y', 'width', 'height'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 5 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number")){
						arguments[0] = UpdateViewOnDOM({uiEvent:"ShowViewAt", viewId:viewId, x:x, y:y, width:width, height:height});
						var params = vcUtilsParam({c: this.objId, viewId: arguments[0], x: arguments[1], y: arguments[2], width: arguments[3], height: arguments[4]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorShowViewAt?" + params, OnComplete, OnError);
					});
				}

				this.ShowViewAtPoints = function(viewId, x, y, width, height) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('viewId') && arguments[0].hasOwnProperty('x') && arguments[0].hasOwnProperty('y') && arguments[0].hasOwnProperty('width') && arguments[0].hasOwnProperty('height')){
							arguments[0].viewId = UpdateViewOnDOM({uiEvent:"ShowViewAtPoints", viewId:arguments[0].viewId, x:arguments[0].x, y:arguments[0].y, width:arguments[0].width, height:arguments[0].height});
							var params = vcUtilsParam({c: this.objId, viewId: arguments[0].viewId, x: arguments[0].x, y: arguments[0].y, width: arguments[0].width, height: arguments[0].height});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['viewId', 'x', 'y', 'width', 'height'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 5 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number")){
						arguments[0] = UpdateViewOnDOM({uiEvent:"ShowViewAtPoints", viewId:viewId, x:x, y:y, width:width, height:height});
						var params = vcUtilsParam({c: this.objId, viewId: arguments[0], x: arguments[1], y: arguments[2], width: arguments[3], height: arguments[4]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorShowViewAtPoints?" + params, OnComplete, OnError);
					});
				}

				this.ShowViewLabel = function(viewId, showLabel) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('viewId') && arguments[0].hasOwnProperty('showLabel')){
							arguments[0].viewId = UpdateViewOnDOM({uiEvent:"ShowViewLabel", viewId:arguments[0].viewId, showLabel:arguments[0].showLabel});
							var params = vcUtilsParam({c: this.objId, viewId: arguments[0].viewId, showLabel: arguments[0].showLabel});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['viewId', 'showLabel'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "boolean")){
						arguments[0] = UpdateViewOnDOM({uiEvent:"ShowViewLabel", viewId:viewId, showLabel:showLabel});
						var params = vcUtilsParam({c: this.objId, viewId: arguments[0], showLabel: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorShowViewLabel?" + params, OnComplete, OnError);
					});
				}

				this.ShowWindowSharePreview = function(preview) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('preview')){
							var params = vcUtilsParam({c: this.objId, preview: arguments[0].preview});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['preview'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({c: this.objId, preview: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorShowWindowSharePreview?" + params, OnComplete, OnError);
					});
				}

				this.StartGoogleAnalyticsService = function(trackingID) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('trackingID')){
							var params = vcUtilsParam({c: this.objId, trackingID: arguments[0].trackingID});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['trackingID'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({c: this.objId, trackingID: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorStartGoogleAnalyticsService?" + params, OnComplete, OnError);
					});
				}

				this.StartInsightsService = function(serverUrl) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('serverUrl')){
							var params = vcUtilsParam({c: this.objId, serverUrl: arguments[0].serverUrl});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['serverUrl'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({c: this.objId, serverUrl: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorStartInsightsService?" + params, OnComplete, OnError);
					});
				}

				this.StartLectureMode = function(requestId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('requestId')){
							var params = vcUtilsParam({c: this.objId, requestId: arguments[0].requestId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['requestId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({c: this.objId, requestId: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorStartLectureMode?" + params, OnComplete, OnError);
					});
				}

				this.StartNextLogFile = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorStartNextLogFile?" + params, OnComplete, OnError);
					});
				}

				this.StartRecording = function(recordingProfilePrefix, onRecordingServiceStartCallback) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('recordingProfilePrefix') && arguments[0].hasOwnProperty('onRecordingServiceStartCallback')){
							this.VidyoConnectorOnRecordingServiceStartResult = arguments[0].onRecordingServiceStartCallback;
							var params = vcUtilsParam({c: this.objId, recordingProfilePrefix: arguments[0].recordingProfilePrefix});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['recordingProfilePrefix', 'onRecordingServiceStartCallback'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "function")){
						this.VidyoConnectorOnRecordingServiceStartResult = onRecordingServiceStartCallback;
						var params = vcUtilsParam({c: this.objId, recordingProfilePrefix: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorStartRecording?" + params, OnComplete, OnError);
					});
				}

				this.StopGoogleAnalyticsService = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorStopGoogleAnalyticsService?" + params, OnComplete, OnError);
					});
				}

				this.StopInsightsService = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorStopInsightsService?" + params, OnComplete, OnError);
					});
				}

				this.StopLectureMode = function(requestId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('requestId')){
							var params = vcUtilsParam({c: this.objId, requestId: arguments[0].requestId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['requestId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({c: this.objId, requestId: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorStopLectureMode?" + params, OnComplete, OnError);
					});
				}

				this.StopRecording = function(onRecordingServiceStopResultCallback) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onRecordingServiceStopResultCallback')){
							this.VidyoConnectorOnRecordingServiceStopResult = arguments[0].onRecordingServiceStopResultCallback;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onRecordingServiceStopResultCallback'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoConnectorOnRecordingServiceStopResult = onRecordingServiceStopResultCallback;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorStopRecording?" + params, OnComplete, OnError);
					});
				}

				this.SwapStreamsBetweenViews = function(first, second) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('first') && arguments[0].hasOwnProperty('second')){
							// arguments[0].firstarguments[0].second = UpdateViewOnDOM({uiEvent:"SwapStreamsBetweenViews", first:arguments[0].first, second:arguments[0].second});
							var params = vcUtilsParam({c: this.objId, first: arguments[0].first, second: arguments[0].second});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['first', 'second'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string")){
						// arguments[0]arguments[1] = UpdateViewOnDOM({uiEvent:"SwapStreamsBetweenViews", first:first, second:second});
						var params = vcUtilsParam({c: this.objId, first: arguments[0], second: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorSwapStreamsBetweenViews?" + params, OnComplete, OnError);
					});
				}

				this.UnlockRoom = function(onUnlockRoomResult) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onUnlockRoomResult')){
							this.VidyoConnectorOnUnlockRoomResult = arguments[0].onUnlockRoomResult;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onUnlockRoomResult'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoConnectorOnUnlockRoomResult = onUnlockRoomResult;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorUnlockRoom?" + params, OnComplete, OnError);
					});
				}

				this.UnraiseHand = function(requestId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('requestId')){
							var params = vcUtilsParam({c: this.objId, requestId: arguments[0].requestId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['requestId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({c: this.objId, requestId: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorUnraiseHand?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterCameraEffectErrorListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorUnregisterCameraEffectErrorListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterConferenceModeEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorUnregisterConferenceModeEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterConnectionPropertiesEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorUnregisterConnectionPropertiesEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterErrorEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorUnregisterErrorEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterHostEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorUnregisterHostEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterInCallEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorUnregisterInCallEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterLectureModeEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorUnregisterLectureModeEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterLocalCameraEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorUnregisterLocalCameraEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterLocalCameraFrameListener = function(localCamera) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localCamera')){
							var params = vcUtilsParam({c: this.objId, localCamera: (arguments[0].localCamera ? arguments[0].localCamera.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localCamera'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({c: this.objId, localCamera: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorUnregisterLocalCameraFrameListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterLocalMicrophoneEnergyListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorUnregisterLocalMicrophoneEnergyListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterLocalMicrophoneEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorUnregisterLocalMicrophoneEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterLocalMicrophoneFrameListener = function(localMicrophone) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localMicrophone')){
							var params = vcUtilsParam({c: this.objId, localMicrophone: (arguments[0].localMicrophone ? arguments[0].localMicrophone.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localMicrophone'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({c: this.objId, localMicrophone: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorUnregisterLocalMicrophoneFrameListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterLocalMonitorEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorUnregisterLocalMonitorEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterLocalMonitorFrameListener = function(localMonitor) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localMonitor')){
							var params = vcUtilsParam({c: this.objId, localMonitor: (arguments[0].localMonitor ? arguments[0].localMonitor.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localMonitor'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({c: this.objId, localMonitor: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorUnregisterLocalMonitorFrameListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterLocalSpeakerEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorUnregisterLocalSpeakerEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterLocalWindowShareEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorUnregisterLocalWindowShareEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterLocalWindowShareFrameListener = function(localWindowShare) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localWindowShare')){
							var params = vcUtilsParam({c: this.objId, localWindowShare: (arguments[0].localWindowShare ? arguments[0].localWindowShare.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localWindowShare'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({c: this.objId, localWindowShare: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorUnregisterLocalWindowShareFrameListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterLogEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorUnregisterLogEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterMessageEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorUnregisterMessageEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterModerationCommandEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorUnregisterModerationCommandEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterModerationResultEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorUnregisterModerationResultEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterNetworkInterfaceEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorUnregisterNetworkInterfaceEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterParticipantEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorUnregisterParticipantEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterPlugin = function(plugin) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('plugin')){
							var params = vcUtilsParam({c: this.objId, plugin: arguments[0].plugin});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['plugin'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({c: this.objId, plugin: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorUnregisterPlugin?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterReconnectEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorUnregisterReconnectEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterRecorderInCallEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorUnregisterRecorderInCallEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterRemoteCameraEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorUnregisterRemoteCameraEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterRemoteCameraFrameListener = function(remoteCamera) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('remoteCamera')){
							var params = vcUtilsParam({c: this.objId, remoteCamera: (arguments[0].remoteCamera ? arguments[0].remoteCamera.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['remoteCamera'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({c: this.objId, remoteCamera: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorUnregisterRemoteCameraFrameListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterRemoteMicrophoneEnergyListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorUnregisterRemoteMicrophoneEnergyListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterRemoteMicrophoneEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorUnregisterRemoteMicrophoneEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterRemoteMicrophoneFrameListener = function(remoteMicrophone) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('remoteMicrophone')){
							var params = vcUtilsParam({c: this.objId, remoteMicrophone: (arguments[0].remoteMicrophone ? arguments[0].remoteMicrophone.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['remoteMicrophone'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({c: this.objId, remoteMicrophone: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorUnregisterRemoteMicrophoneFrameListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterRemoteRendererEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorUnregisterRemoteRendererEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterRemoteSpeakerEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorUnregisterRemoteSpeakerEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterRemoteWindowShareEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorUnregisterRemoteWindowShareEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterRemoteWindowShareFrameListener = function(remoteWindowShare) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('remoteWindowShare')){
							var params = vcUtilsParam({c: this.objId, remoteWindowShare: (arguments[0].remoteWindowShare ? arguments[0].remoteWindowShare.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['remoteWindowShare'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({c: this.objId, remoteWindowShare: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorUnregisterRemoteWindowShareFrameListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterResourceManagerEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorUnregisterResourceManagerEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterVirtualAudioSourceEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorUnregisterVirtualAudioSourceEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterVirtualVideoSourceEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorUnregisterVirtualVideoSourceEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterWebProxyEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConnectorUnregisterWebProxyEventListener?" + params, OnComplete, OnError);
					});
				}

				return this;
			}

			this.VidyoGateway = function(){

				this.Destruct = function() {
					GetRequest("VidyoGatewayDestruct?" + vcUtilsParam({ gateway: this.objId }), function(){}, function(){});
					delete objects[this.objId];
				}

				this.Connect = function(host, token, displayName, resourceId, onSuccess, onFailure, onDisconnected) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('host') && arguments[0].hasOwnProperty('token') && arguments[0].hasOwnProperty('displayName') && arguments[0].hasOwnProperty('resourceId') && arguments[0].hasOwnProperty('onSuccess') && arguments[0].hasOwnProperty('onFailure') && arguments[0].hasOwnProperty('onDisconnected')){
							this.VidyoGatewayOnSuccess = arguments[0].onSuccess;
							this.VidyoGatewayOnFailure = arguments[0].onFailure;
							this.VidyoGatewayOnDisconnected = arguments[0].onDisconnected;
							var params = vcUtilsParam({gateway: this.objId, host: arguments[0].host, token: arguments[0].token, displayName: arguments[0].displayName, resourceId: arguments[0].resourceId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['host', 'token', 'displayName', 'resourceId', 'onSuccess', 'onFailure', 'onDisconnected'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 7 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "string") && (typeof(arguments[3]) === "string") && (typeof(arguments[4]) === "function") && (typeof(arguments[5]) === "function") && (typeof(arguments[6]) === "function")){
						this.VidyoGatewayOnSuccess = onSuccess;
						this.VidyoGatewayOnFailure = onFailure;
						this.VidyoGatewayOnDisconnected = onDisconnected;
						var params = vcUtilsParam({gateway: this.objId, host: arguments[0], token: arguments[1], displayName: arguments[2], resourceId: arguments[3]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoGatewayConnect?" + params, OnComplete, OnError);
					});
				}

				this.Disconnect = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({gateway: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({gateway: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoGatewayDisconnect?" + params, OnComplete, OnError);
					});
				}

				return this;
			}

			this.VidyoAudioFrame = function(){

				this.Destruct = function() {
					GetRequest("VidyoAudioFrameDestruct?" + vcUtilsParam({ obj: this.objId }), function(){}, function(){});
					delete objects[this.objId];
				}

				this.GetBitsPerSample = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({f: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({f: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoAudioFrameGetBitsPerSample?" + params, OnComplete, OnError);
					});
				}

				this.GetData = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({f: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({f: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoAudioFrameGetData?" + params, OnComplete, OnError);
					});
				}

				this.GetDiscontinuity = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({f: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({f: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoAudioFrameGetDiscontinuity?" + params, OnComplete, OnError);
					});
				}

				this.GetDiscontinuityBitPresent = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({f: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({f: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoAudioFrameGetDiscontinuityBitPresent?" + params, OnComplete, OnError);
					});
				}

				this.GetElapsedTime = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({f: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({f: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoAudioFrameGetElapsedTime?" + params, OnComplete, OnError);
					});
				}

				this.GetEnergy = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({f: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({f: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoAudioFrameGetEnergy?" + params, OnComplete, OnError);
					});
				}

				this.GetEnergyBitPresent = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({f: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({f: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoAudioFrameGetEnergyBitPresent?" + params, OnComplete, OnError);
					});
				}

				this.GetFormat = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({f: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({f: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoAudioFrameGetFormat?" + params, OnComplete, OnError);
					});
				}

				this.GetNumberOfChannels = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({f: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({f: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoAudioFrameGetNumberOfChannels?" + params, OnComplete, OnError);
					});
				}

				this.GetNumberOfSamples = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({f: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({f: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoAudioFrameGetNumberOfSamples?" + params, OnComplete, OnError);
					});
				}

				this.GetSampleRate = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({f: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({f: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoAudioFrameGetSampleRate?" + params, OnComplete, OnError);
					});
				}

				this.GetSize = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({f: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({f: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoAudioFrameGetSize?" + params, OnComplete, OnError);
					});
				}

				this.GetSpeech = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({f: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({f: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoAudioFrameGetSpeech?" + params, OnComplete, OnError);
					});
				}

				this.GetSpeechBitPresent = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({f: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({f: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoAudioFrameGetSpeechBitPresent?" + params, OnComplete, OnError);
					});
				}

				this.GetTimestamp = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({f: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({f: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoAudioFrameGetTimestamp?" + params, OnComplete, OnError);
					});
				}

				return this;
			}

			this.VidyoDevice = function(){

				this.Destruct = function() {
					GetRequest("VidyoDeviceDestruct?" + vcUtilsParam({ device: this.objId }), function(){}, function(){});
					delete objects[this.objId];
				}

				this.DerivedEqual = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({obj: this.objId, other: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({obj: this.objId, other: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoDeviceDerivedEqual?" + params, OnComplete, OnError);
					});
				}

				this.GetId = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({d: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({d: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoDeviceGetId?" + params, OnComplete, OnError);
					});
				}

				this.GetName = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({d: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({d: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoDeviceGetName?" + params, OnComplete, OnError);
					});
				}

				this.GetType = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({d: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({d: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoDeviceGetType?" + params, OnComplete, OnError);
					});
				}

				return this;
			}

			this.VidyoLocalCamera = function(){

				this.Destruct = function() {
					GetRequest("VidyoLocalCameraDestruct?" + vcUtilsParam({ obj: this.objId }), function(){}, function(){});
					delete objects[this.objId];
				}

				this.AddToLocalRenderer = function(localRenderer) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localRenderer')){
							var params = vcUtilsParam({c: this.objId, localRenderer: (arguments[0].localRenderer ? arguments[0].localRenderer.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localRenderer'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({c: this.objId, localRenderer: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalCameraAddToLocalRenderer?" + params, OnComplete, OnError);
					});
				}

				this.AddToRemoteRenderer = function(remoteRenderer) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('remoteRenderer')){
							var params = vcUtilsParam({c: this.objId, remoteRenderer: (arguments[0].remoteRenderer ? arguments[0].remoteRenderer.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['remoteRenderer'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({c: this.objId, remoteRenderer: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalCameraAddToRemoteRenderer?" + params, OnComplete, OnError);
					});
				}

				this.AllowRemoteCameraControl = function(allow) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('allow')){
							var params = vcUtilsParam({c: this.objId, allow: arguments[0].allow});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['allow'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({c: this.objId, allow: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalCameraAllowRemoteCameraControl?" + params, OnComplete, OnError);
					});
				}

				this.ControlPTZ = function(pan, tilt, zoom) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('pan') && arguments[0].hasOwnProperty('tilt') && arguments[0].hasOwnProperty('zoom')){
							var params = vcUtilsParam({c: this.objId, pan: arguments[0].pan, tilt: arguments[0].tilt, zoom: arguments[0].zoom});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['pan', 'tilt', 'zoom'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number")){
						var params = vcUtilsParam({c: this.objId, pan: arguments[0], tilt: arguments[1], zoom: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalCameraControlPTZ?" + params, OnComplete, OnError);
					});
				}

				this.ControlPTZStart = function(cmd, timeout) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('cmd') && arguments[0].hasOwnProperty('timeout')){
							var params = vcUtilsParam({c: this.objId, cmd: arguments[0].cmd, timeout: arguments[0].timeout});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['cmd', 'timeout'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "number")){
						var params = vcUtilsParam({c: this.objId, cmd: arguments[0], timeout: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalCameraControlPTZStart?" + params, OnComplete, OnError);
					});
				}

				this.ControlPTZStop = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalCameraControlPTZStop?" + params, OnComplete, OnError);
					});
				}

				this.GetBacklightCompensation = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalCameraGetBacklightCompensation?" + params, OnComplete, OnError);
					});
				}

				this.GetControlCapabilities = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalCameraGetControlCapabilities?" + params, OnComplete, OnError);
					});
				}

				this.GetFramerateTradeOffProfile = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalCameraGetFramerateTradeOffProfile?" + params, OnComplete, OnError);
					});
				}

				this.GetId = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalCameraGetId?" + params, OnComplete, OnError);
					});
				}

				this.GetName = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalCameraGetName?" + params, OnComplete, OnError);
					});
				}

				this.GetPosition = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalCameraGetPosition?" + params, OnComplete, OnError);
					});
				}

				this.GetPreviewLabel = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalCameraGetPreviewLabel?" + params, OnComplete, OnError);
					});
				}

				this.GetResolutionTradeOffProfile = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalCameraGetResolutionTradeOffProfile?" + params, OnComplete, OnError);
					});
				}

				this.GetVideoCapabilities = function(capabilities) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('capabilities')){
							var params = vcUtilsParam({c: this.objId, capabilities: JSON.stringify({"capabilities": arguments[0].capabilities})});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['capabilities'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({c: this.objId, capabilities: JSON.stringify({"capabilities": arguments[0]})});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							if(capabilities&& response.data.capabilities)
								vcUtilsExtend(capabilities, response.data.capabilities);
							resolve(response.data);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalCameraGetVideoCapabilities?" + params, OnComplete, OnError);
					});
				}

				this.GetVideoCapabilitiesAsync = function(onComplete) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onComplete')){
							this.VidyoLocalCameraOnGetVideoCapabilitiesComplete = arguments[0].onComplete;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onComplete'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoLocalCameraOnGetVideoCapabilitiesComplete = onComplete;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalCameraGetVideoCapabilitiesAsync?" + params, OnComplete, OnError);
					});
				}

				this.IsControlDigital = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalCameraIsControlDigital?" + params, OnComplete, OnError);
					});
				}

				this.IsPaused = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalCameraIsPaused?" + params, OnComplete, OnError);
					});
				}

				this.IsSuspended = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalCameraIsSuspended?" + params, OnComplete, OnError);
					});
				}

				this.RemoveFromLocalRenderer = function(localRenderer) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localRenderer')){
							var params = vcUtilsParam({c: this.objId, localRenderer: (arguments[0].localRenderer ? arguments[0].localRenderer.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localRenderer'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({c: this.objId, localRenderer: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalCameraRemoveFromLocalRenderer?" + params, OnComplete, OnError);
					});
				}

				this.RemoveFromRemoteRenderer = function(remoteRenderer) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('remoteRenderer')){
							var params = vcUtilsParam({c: this.objId, remoteRenderer: (arguments[0].remoteRenderer ? arguments[0].remoteRenderer.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['remoteRenderer'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({c: this.objId, remoteRenderer: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalCameraRemoveFromRemoteRenderer?" + params, OnComplete, OnError);
					});
				}

				this.Resume = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalCameraResume?" + params, OnComplete, OnError);
					});
				}

				this.SetAspectRatioConstraint = function(aspectRatioWidth, aspectRatioHeight) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('aspectRatioWidth') && arguments[0].hasOwnProperty('aspectRatioHeight')){
							var params = vcUtilsParam({c: this.objId, aspectRatioWidth: arguments[0].aspectRatioWidth, aspectRatioHeight: arguments[0].aspectRatioHeight});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['aspectRatioWidth', 'aspectRatioHeight'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number")){
						var params = vcUtilsParam({c: this.objId, aspectRatioWidth: arguments[0], aspectRatioHeight: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalCameraSetAspectRatioConstraint?" + params, OnComplete, OnError);
					});
				}

				this.SetBacklightCompensation = function(backlightCompensation) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('backlightCompensation')){
							var params = vcUtilsParam({c: this.objId, backlightCompensation: arguments[0].backlightCompensation});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['backlightCompensation'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({c: this.objId, backlightCompensation: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalCameraSetBacklightCompensation?" + params, OnComplete, OnError);
					});
				}

				this.SetBoundsConstraint = function(minWidth, minHeight, maxWidth, maxHeight, maxFrameInterval, minFrameInterval, aspectRatioWidth, aspectRatioHeight, temporalSpatialTradeOff) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('minWidth') && arguments[0].hasOwnProperty('minHeight') && arguments[0].hasOwnProperty('maxWidth') && arguments[0].hasOwnProperty('maxHeight') && arguments[0].hasOwnProperty('maxFrameInterval') && arguments[0].hasOwnProperty('minFrameInterval') && arguments[0].hasOwnProperty('aspectRatioWidth') && arguments[0].hasOwnProperty('aspectRatioHeight') && arguments[0].hasOwnProperty('temporalSpatialTradeOff')){
							var params = vcUtilsParam({c: this.objId, minWidth: arguments[0].minWidth, minHeight: arguments[0].minHeight, maxWidth: arguments[0].maxWidth, maxHeight: arguments[0].maxHeight, maxFrameInterval: arguments[0].maxFrameInterval, minFrameInterval: arguments[0].minFrameInterval, aspectRatioWidth: arguments[0].aspectRatioWidth, aspectRatioHeight: arguments[0].aspectRatioHeight, temporalSpatialTradeOff: arguments[0].temporalSpatialTradeOff});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['minWidth', 'minHeight', 'maxWidth', 'maxHeight', 'maxFrameInterval', 'minFrameInterval', 'aspectRatioWidth', 'aspectRatioHeight', 'temporalSpatialTradeOff'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 9 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number") && (typeof(arguments[5]) === "number") && (typeof(arguments[6]) === "number") && (typeof(arguments[7]) === "number") && (typeof(arguments[8]) === "number")){
						var params = vcUtilsParam({c: this.objId, minWidth: arguments[0], minHeight: arguments[1], maxWidth: arguments[2], maxHeight: arguments[3], maxFrameInterval: arguments[4], minFrameInterval: arguments[5], aspectRatioWidth: arguments[6], aspectRatioHeight: arguments[7], temporalSpatialTradeOff: arguments[8]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalCameraSetBoundsConstraint?" + params, OnComplete, OnError);
					});
				}

				this.SetCapabilitiesConstraint = function(capabilities, temporalSpatialTradeOff) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('capabilities') && arguments[0].hasOwnProperty('temporalSpatialTradeOff')){
							var params = vcUtilsParam({c: this.objId, capabilities: JSON.stringify({"capabilities": arguments[0].capabilities}), temporalSpatialTradeOff: arguments[0].temporalSpatialTradeOff});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['capabilities', 'temporalSpatialTradeOff'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "number")){
						var params = vcUtilsParam({c: this.objId, capabilities: JSON.stringify({"capabilities": arguments[0]}), temporalSpatialTradeOff: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalCameraSetCapabilitiesConstraint?" + params, OnComplete, OnError);
					});
				}

				this.SetConstraints = function(minWidth, minHeight, maxWidth, maxHeight, maxFrameInterval, minFrameInterval, aspectRatioWidth, aspectRatioHeight, temporalSpatialTradeOff, capabilities) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('minWidth') && arguments[0].hasOwnProperty('minHeight') && arguments[0].hasOwnProperty('maxWidth') && arguments[0].hasOwnProperty('maxHeight') && arguments[0].hasOwnProperty('maxFrameInterval') && arguments[0].hasOwnProperty('minFrameInterval') && arguments[0].hasOwnProperty('aspectRatioWidth') && arguments[0].hasOwnProperty('aspectRatioHeight') && arguments[0].hasOwnProperty('temporalSpatialTradeOff') && arguments[0].hasOwnProperty('capabilities')){
							var params = vcUtilsParam({c: this.objId, minWidth: arguments[0].minWidth, minHeight: arguments[0].minHeight, maxWidth: arguments[0].maxWidth, maxHeight: arguments[0].maxHeight, maxFrameInterval: arguments[0].maxFrameInterval, minFrameInterval: arguments[0].minFrameInterval, aspectRatioWidth: arguments[0].aspectRatioWidth, aspectRatioHeight: arguments[0].aspectRatioHeight, temporalSpatialTradeOff: arguments[0].temporalSpatialTradeOff, capabilities: JSON.stringify({"capabilities": arguments[0].capabilities})});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['minWidth', 'minHeight', 'maxWidth', 'maxHeight', 'maxFrameInterval', 'minFrameInterval', 'aspectRatioWidth', 'aspectRatioHeight', 'temporalSpatialTradeOff', 'capabilities'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 10 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number") && (typeof(arguments[5]) === "number") && (typeof(arguments[6]) === "number") && (typeof(arguments[7]) === "number") && (typeof(arguments[8]) === "number") && (typeof(arguments[9]) === "object")){
						var params = vcUtilsParam({c: this.objId, minWidth: arguments[0], minHeight: arguments[1], maxWidth: arguments[2], maxHeight: arguments[3], maxFrameInterval: arguments[4], minFrameInterval: arguments[5], aspectRatioWidth: arguments[6], aspectRatioHeight: arguments[7], temporalSpatialTradeOff: arguments[8], capabilities: JSON.stringify({"capabilities": arguments[9]})});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalCameraSetConstraints?" + params, OnComplete, OnError);
					});
				}

				this.SetControlCapabilities = function(caps) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('caps')){
							var params = vcUtilsParam({c: this.objId, caps: JSON.stringify(arguments[0].caps)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['caps'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({c: this.objId, caps: JSON.stringify(arguments[0])});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalCameraSetControlCapabilities?" + params, OnComplete, OnError);
					});
				}

				this.SetControlDigital = function(digital) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('digital')){
							var params = vcUtilsParam({c: this.objId, digital: arguments[0].digital});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['digital'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({c: this.objId, digital: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalCameraSetControlDigital?" + params, OnComplete, OnError);
					});
				}

				this.SetFramerateTradeOffProfile = function(profile) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('profile')){
							var params = vcUtilsParam({c: this.objId, profile: arguments[0].profile});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['profile'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({c: this.objId, profile: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalCameraSetFramerateTradeOffProfile?" + params, OnComplete, OnError);
					});
				}

				this.SetMaxConstraint = function(width, height, frameInterval) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('width') && arguments[0].hasOwnProperty('height') && arguments[0].hasOwnProperty('frameInterval')){
							var params = vcUtilsParam({c: this.objId, width: arguments[0].width, height: arguments[0].height, frameInterval: arguments[0].frameInterval});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['width', 'height', 'frameInterval'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number")){
						var params = vcUtilsParam({c: this.objId, width: arguments[0], height: arguments[1], frameInterval: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalCameraSetMaxConstraint?" + params, OnComplete, OnError);
					});
				}

				this.SetNudgeTimes = function(panTime, tiltTime, zoomTime) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('panTime') && arguments[0].hasOwnProperty('tiltTime') && arguments[0].hasOwnProperty('zoomTime')){
							var params = vcUtilsParam({c: this.objId, panTime: arguments[0].panTime, tiltTime: arguments[0].tiltTime, zoomTime: arguments[0].zoomTime});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['panTime', 'tiltTime', 'zoomTime'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number")){
						var params = vcUtilsParam({c: this.objId, panTime: arguments[0], tiltTime: arguments[1], zoomTime: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalCameraSetNudgeTimes?" + params, OnComplete, OnError);
					});
				}

				this.SetOrientation = function(orientation, lockOrientation) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('orientation') && arguments[0].hasOwnProperty('lockOrientation')){
							var params = vcUtilsParam({c: this.objId, orientation: arguments[0].orientation, lockOrientation: arguments[0].lockOrientation});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['orientation', 'lockOrientation'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "boolean")){
						var params = vcUtilsParam({c: this.objId, orientation: arguments[0], lockOrientation: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalCameraSetOrientation?" + params, OnComplete, OnError);
					});
				}

				this.SetPositionInLocalRenderer = function(localRenderer, x, y, width, height, frameInterval) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localRenderer') && arguments[0].hasOwnProperty('x') && arguments[0].hasOwnProperty('y') && arguments[0].hasOwnProperty('width') && arguments[0].hasOwnProperty('height') && arguments[0].hasOwnProperty('frameInterval')){
							var params = vcUtilsParam({c: this.objId, localRenderer: (arguments[0].localRenderer ? arguments[0].localRenderer.objId : 0), x: arguments[0].x, y: arguments[0].y, width: arguments[0].width, height: arguments[0].height, frameInterval: arguments[0].frameInterval});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localRenderer', 'x', 'y', 'width', 'height', 'frameInterval'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 6 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number") && (typeof(arguments[5]) === "number")){
						var params = vcUtilsParam({c: this.objId, localRenderer: (arguments[0] ? arguments[0].objId : 0), x: arguments[1], y: arguments[2], width: arguments[3], height: arguments[4], frameInterval: arguments[5]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalCameraSetPositionInLocalRenderer?" + params, OnComplete, OnError);
					});
				}

				this.SetPreviewLabel = function(previewLabel) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('previewLabel')){
							var params = vcUtilsParam({c: this.objId, previewLabel: arguments[0].previewLabel});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['previewLabel'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({c: this.objId, previewLabel: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalCameraSetPreviewLabel?" + params, OnComplete, OnError);
					});
				}

				this.SetPreviewStreamLabel = function(previewLabel) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('previewLabel')){
							var params = vcUtilsParam({c: this.objId, previewLabel: arguments[0].previewLabel});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['previewLabel'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({c: this.objId, previewLabel: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalCameraSetPreviewStreamLabel?" + params, OnComplete, OnError);
					});
				}

				this.SetResolutionTradeOffProfile = function(profile) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('profile')){
							var params = vcUtilsParam({c: this.objId, profile: arguments[0].profile});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['profile'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({c: this.objId, profile: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalCameraSetResolutionTradeOffProfile?" + params, OnComplete, OnError);
					});
				}

				this.SetTargetBitRate = function(bitRate) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('bitRate')){
							var params = vcUtilsParam({c: this.objId, bitRate: arguments[0].bitRate});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['bitRate'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({c: this.objId, bitRate: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalCameraSetTargetBitRate?" + params, OnComplete, OnError);
					});
				}

				this.ShowCameraControl = function(show) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('show')){
							var params = vcUtilsParam({c: this.objId, show: arguments[0].show});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['show'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({c: this.objId, show: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalCameraShowCameraControl?" + params, OnComplete, OnError);
					});
				}

				return this;
			}

			this.VidyoLocalMicrophone = function(){

				this.Destruct = function() {
					GetRequest("VidyoLocalMicrophoneDestruct?" + vcUtilsParam({ obj: this.objId }), function(){}, function(){});
					delete objects[this.objId];
				}

				this.AddToLocalSpeaker = function(speaker) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('speaker')){
							var params = vcUtilsParam({m: this.objId, speaker: (arguments[0].speaker ? arguments[0].speaker.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['speaker'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({m: this.objId, speaker: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMicrophoneAddToLocalSpeaker?" + params, OnComplete, OnError);
					});
				}

				this.AddToRemoteSpeaker = function(remoteSpeaker) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('remoteSpeaker')){
							var params = vcUtilsParam({m: this.objId, remoteSpeaker: (arguments[0].remoteSpeaker ? arguments[0].remoteSpeaker.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['remoteSpeaker'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({m: this.objId, remoteSpeaker: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMicrophoneAddToRemoteSpeaker?" + params, OnComplete, OnError);
					});
				}

				this.DisableDebugRecording = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({m: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({m: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMicrophoneDisableDebugRecording?" + params, OnComplete, OnError);
					});
				}

				this.EnableDebugRecording = function(dir) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('dir')){
							var params = vcUtilsParam({m: this.objId, dir: arguments[0].dir});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['dir'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({m: this.objId, dir: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMicrophoneEnableDebugRecording?" + params, OnComplete, OnError);
					});
				}

				this.GetAutoGain = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({m: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({m: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMicrophoneGetAutoGain?" + params, OnComplete, OnError);
					});
				}

				this.GetBoost = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({m: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({m: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMicrophoneGetBoost?" + params, OnComplete, OnError);
					});
				}

				this.GetEchoCancellation = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({m: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({m: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMicrophoneGetEchoCancellation?" + params, OnComplete, OnError);
					});
				}

				this.GetId = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({m: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({m: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMicrophoneGetId?" + params, OnComplete, OnError);
					});
				}

				this.GetName = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({m: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({m: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMicrophoneGetName?" + params, OnComplete, OnError);
					});
				}

				this.GetSignalType = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({m: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({m: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMicrophoneGetSignalType?" + params, OnComplete, OnError);
					});
				}

				this.GetVoiceProcessing = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({m: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({m: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMicrophoneGetVoiceProcessing?" + params, OnComplete, OnError);
					});
				}

				this.GetVolume = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({m: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({m: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMicrophoneGetVolume?" + params, OnComplete, OnError);
					});
				}

				this.HideDebugDialog = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({microphone: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({microphone: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMicrophoneHideDebugDialog?" + params, OnComplete, OnError);
					});
				}

				this.IsDebugRecordingEnabled = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({m: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({m: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMicrophoneIsDebugRecordingEnabled?" + params, OnComplete, OnError);
					});
				}

				this.IsPaused = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({m: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({m: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMicrophoneIsPaused?" + params, OnComplete, OnError);
					});
				}

				this.Pause = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({m: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({m: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMicrophonePause?" + params, OnComplete, OnError);
					});
				}

				this.PlayTone = function(dtmfTone) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('dtmfTone')){
							var params = vcUtilsParam({m: this.objId, dtmfTone: arguments[0].dtmfTone});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['dtmfTone'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({m: this.objId, dtmfTone: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMicrophonePlayTone?" + params, OnComplete, OnError);
					});
				}

				this.RemoveFromLocalSpeaker = function(speaker) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('speaker')){
							var params = vcUtilsParam({m: this.objId, speaker: (arguments[0].speaker ? arguments[0].speaker.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['speaker'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({m: this.objId, speaker: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMicrophoneRemoveFromLocalSpeaker?" + params, OnComplete, OnError);
					});
				}

				this.RemoveFromRemoteSpeaker = function(remoteSpeaker) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('remoteSpeaker')){
							var params = vcUtilsParam({m: this.objId, remoteSpeaker: (arguments[0].remoteSpeaker ? arguments[0].remoteSpeaker.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['remoteSpeaker'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({m: this.objId, remoteSpeaker: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMicrophoneRemoveFromRemoteSpeaker?" + params, OnComplete, OnError);
					});
				}

				this.Restart = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({microphone: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({microphone: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMicrophoneRestart?" + params, OnComplete, OnError);
					});
				}

				this.Resume = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({m: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({m: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMicrophoneResume?" + params, OnComplete, OnError);
					});
				}

				this.SetAutoGain = function(autoGain) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('autoGain')){
							var params = vcUtilsParam({m: this.objId, autoGain: arguments[0].autoGain});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['autoGain'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({m: this.objId, autoGain: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMicrophoneSetAutoGain?" + params, OnComplete, OnError);
					});
				}

				this.SetBoost = function(value) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('value')){
							var params = vcUtilsParam({m: this.objId, value: arguments[0].value});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['value'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({m: this.objId, value: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMicrophoneSetBoost?" + params, OnComplete, OnError);
					});
				}

				this.SetEchoCancellation = function(speaker, isEnable) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('speaker') && arguments[0].hasOwnProperty('isEnable')){
							var params = vcUtilsParam({m: this.objId, speaker: (arguments[0].speaker ? arguments[0].speaker.objId : 0), isEnable: arguments[0].isEnable});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['speaker', 'isEnable'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "boolean")){
						var params = vcUtilsParam({m: this.objId, speaker: (arguments[0] ? arguments[0].objId : 0), isEnable: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMicrophoneSetEchoCancellation?" + params, OnComplete, OnError);
					});
				}

				this.SetSignalType = function(signalType) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('signalType')){
							var params = vcUtilsParam({m: this.objId, signalType: arguments[0].signalType});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['signalType'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({m: this.objId, signalType: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMicrophoneSetSignalType?" + params, OnComplete, OnError);
					});
				}

				this.SetVoiceProcessing = function(voiceProcessing, mode) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('voiceProcessing') && arguments[0].hasOwnProperty('mode')){
							var params = vcUtilsParam({m: this.objId, voiceProcessing: arguments[0].voiceProcessing, mode: arguments[0].mode});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['voiceProcessing', 'mode'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "boolean") && (typeof(arguments[1]) === "string")){
						var params = vcUtilsParam({m: this.objId, voiceProcessing: arguments[0], mode: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMicrophoneSetVoiceProcessing?" + params, OnComplete, OnError);
					});
				}

				this.SetVolume = function(volumePercent) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('volumePercent')){
							var params = vcUtilsParam({m: this.objId, volumePercent: arguments[0].volumePercent});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['volumePercent'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({m: this.objId, volumePercent: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMicrophoneSetVolume?" + params, OnComplete, OnError);
					});
				}

				this.ShowDebugDialog = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({microphone: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({microphone: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMicrophoneShowDebugDialog?" + params, OnComplete, OnError);
					});
				}

				return this;
			}

			this.VidyoLocalMonitor = function(){

				this.Destruct = function() {
					GetRequest("VidyoLocalMonitorDestruct?" + vcUtilsParam({ obj: this.objId }), function(){}, function(){});
					delete objects[this.objId];
				}

				this.AddToLocalRenderer = function(renderer) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('renderer')){
							var params = vcUtilsParam({m: this.objId, renderer: (arguments[0].renderer ? arguments[0].renderer.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['renderer'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({m: this.objId, renderer: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMonitorAddToLocalRenderer?" + params, OnComplete, OnError);
					});
				}

				this.AddToRemoteRenderer = function(remoteRenderer) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('remoteRenderer')){
							var params = vcUtilsParam({m: this.objId, remoteRenderer: (arguments[0].remoteRenderer ? arguments[0].remoteRenderer.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['remoteRenderer'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({m: this.objId, remoteRenderer: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMonitorAddToRemoteRenderer?" + params, OnComplete, OnError);
					});
				}

				this.ClearConstraints = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({m: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({m: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMonitorClearConstraints?" + params, OnComplete, OnError);
					});
				}

				this.ExcludeWindow = function(window, exclude) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('window') && arguments[0].hasOwnProperty('exclude')){
							var params = vcUtilsParam({monitor: this.objId, window: (arguments[0].window ? arguments[0].window.objId : 0), exclude: arguments[0].exclude});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['window', 'exclude'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "boolean")){
						var params = vcUtilsParam({monitor: this.objId, window: (arguments[0] ? arguments[0].objId : 0), exclude: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMonitorExcludeWindow?" + params, OnComplete, OnError);
					});
				}

				this.GetId = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({m: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({m: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMonitorGetId?" + params, OnComplete, OnError);
					});
				}

				this.GetName = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({m: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({m: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMonitorGetName?" + params, OnComplete, OnError);
					});
				}

				this.GetPreviewFrameDataUri = function(maxWidth, maxHeight, videoFrame) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('maxWidth') && arguments[0].hasOwnProperty('maxHeight') && arguments[0].hasOwnProperty('videoFrame')){
							var params = vcUtilsParam({m: this.objId, maxWidth: arguments[0].maxWidth, maxHeight: arguments[0].maxHeight, videoFrame: arguments[0].videoFrame});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['maxWidth', 'maxHeight', 'videoFrame'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "string")){
						var params = vcUtilsParam({m: this.objId, maxWidth: arguments[0], maxHeight: arguments[1], videoFrame: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMonitorGetPreviewFrameDataUri?" + params, OnComplete, OnError);
					});
				}

				this.GetPreviewFrameDataUriAsync = function(maxWidth, maxHeight, onComplete) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('maxWidth') && arguments[0].hasOwnProperty('maxHeight') && arguments[0].hasOwnProperty('onComplete')){
							this.VidyoLocalMonitorOnPreviewDataUriComplete = arguments[0].onComplete;
							var params = vcUtilsParam({m: this.objId, maxWidth: arguments[0].maxWidth, maxHeight: arguments[0].maxHeight});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['maxWidth', 'maxHeight', 'onComplete'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "function")){
						this.VidyoLocalMonitorOnPreviewDataUriComplete = onComplete;
						var params = vcUtilsParam({m: this.objId, maxWidth: arguments[0], maxHeight: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMonitorGetPreviewFrameDataUriAsync?" + params, OnComplete, OnError);
					});
				}

				this.IsPrimary = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({m: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({m: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMonitorIsPrimary?" + params, OnComplete, OnError);
					});
				}

				this.PrecludeApplication = function(w) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('w')){
							var params = vcUtilsParam({m: this.objId, w: (arguments[0].w ? arguments[0].w.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['w'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({m: this.objId, w: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMonitorPrecludeApplication?" + params, OnComplete, OnError);
					});
				}

				this.PrecludeWindow = function(w) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('w')){
							var params = vcUtilsParam({m: this.objId, w: (arguments[0].w ? arguments[0].w.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['w'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({m: this.objId, w: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMonitorPrecludeWindow?" + params, OnComplete, OnError);
					});
				}

				this.RemoveFromLocalRenderer = function(renderer) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('renderer')){
							var params = vcUtilsParam({m: this.objId, renderer: (arguments[0].renderer ? arguments[0].renderer.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['renderer'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({m: this.objId, renderer: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMonitorRemoveFromLocalRenderer?" + params, OnComplete, OnError);
					});
				}

				this.RemoveFromRemoteRenderer = function(remoteRenderer) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('remoteRenderer')){
							var params = vcUtilsParam({m: this.objId, remoteRenderer: (arguments[0].remoteRenderer ? arguments[0].remoteRenderer.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['remoteRenderer'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({m: this.objId, remoteRenderer: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMonitorRemoveFromRemoteRenderer?" + params, OnComplete, OnError);
					});
				}

				this.SetBoundsConstraints = function(maxFrameInterval, minFrameInterval, maxWidth, minWidth, maxHeight, minHeight) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('maxFrameInterval') && arguments[0].hasOwnProperty('minFrameInterval') && arguments[0].hasOwnProperty('maxWidth') && arguments[0].hasOwnProperty('minWidth') && arguments[0].hasOwnProperty('maxHeight') && arguments[0].hasOwnProperty('minHeight')){
							var params = vcUtilsParam({m: this.objId, maxFrameInterval: arguments[0].maxFrameInterval, minFrameInterval: arguments[0].minFrameInterval, maxWidth: arguments[0].maxWidth, minWidth: arguments[0].minWidth, maxHeight: arguments[0].maxHeight, minHeight: arguments[0].minHeight});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['maxFrameInterval', 'minFrameInterval', 'maxWidth', 'minWidth', 'maxHeight', 'minHeight'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 6 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number") && (typeof(arguments[5]) === "number")){
						var params = vcUtilsParam({m: this.objId, maxFrameInterval: arguments[0], minFrameInterval: arguments[1], maxWidth: arguments[2], minWidth: arguments[3], maxHeight: arguments[4], minHeight: arguments[5]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMonitorSetBoundsConstraints?" + params, OnComplete, OnError);
					});
				}

				this.SetCaptureInterval = function(frameInterval) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('frameInterval')){
							var params = vcUtilsParam({m: this.objId, frameInterval: arguments[0].frameInterval});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['frameInterval'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({m: this.objId, frameInterval: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMonitorSetCaptureInterval?" + params, OnComplete, OnError);
					});
				}

				this.SetDiscreteConstraints = function(maxFrameInterval, minFrameInterval, width, height, scaleFactor) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('maxFrameInterval') && arguments[0].hasOwnProperty('minFrameInterval') && arguments[0].hasOwnProperty('width') && arguments[0].hasOwnProperty('height') && arguments[0].hasOwnProperty('scaleFactor')){
							var params = vcUtilsParam({m: this.objId, maxFrameInterval: arguments[0].maxFrameInterval, minFrameInterval: arguments[0].minFrameInterval, width: arguments[0].width, height: arguments[0].height, scaleFactor: arguments[0].scaleFactor});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['maxFrameInterval', 'minFrameInterval', 'width', 'height', 'scaleFactor'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 5 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number")){
						var params = vcUtilsParam({m: this.objId, maxFrameInterval: arguments[0], minFrameInterval: arguments[1], width: arguments[2], height: arguments[3], scaleFactor: arguments[4]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMonitorSetDiscreteConstraints?" + params, OnComplete, OnError);
					});
				}

				this.SetFrameInterval = function(frameInterval) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('frameInterval')){
							var params = vcUtilsParam({m: this.objId, frameInterval: arguments[0].frameInterval});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['frameInterval'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({m: this.objId, frameInterval: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMonitorSetFrameInterval?" + params, OnComplete, OnError);
					});
				}

				this.SetLowLatencyProfile = function(profile) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('profile')){
							var params = vcUtilsParam({m: this.objId, profile: arguments[0].profile});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['profile'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({m: this.objId, profile: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMonitorSetLowLatencyProfile?" + params, OnComplete, OnError);
					});
				}

				this.SetPositionInLocalRenderer = function(localRenderer, x, y, width, height, frameInterval) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localRenderer') && arguments[0].hasOwnProperty('x') && arguments[0].hasOwnProperty('y') && arguments[0].hasOwnProperty('width') && arguments[0].hasOwnProperty('height') && arguments[0].hasOwnProperty('frameInterval')){
							var params = vcUtilsParam({m: this.objId, localRenderer: (arguments[0].localRenderer ? arguments[0].localRenderer.objId : 0), x: arguments[0].x, y: arguments[0].y, width: arguments[0].width, height: arguments[0].height, frameInterval: arguments[0].frameInterval});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localRenderer', 'x', 'y', 'width', 'height', 'frameInterval'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 6 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number") && (typeof(arguments[5]) === "number")){
						var params = vcUtilsParam({m: this.objId, localRenderer: (arguments[0] ? arguments[0].objId : 0), x: arguments[1], y: arguments[2], width: arguments[3], height: arguments[4], frameInterval: arguments[5]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMonitorSetPositionInLocalRenderer?" + params, OnComplete, OnError);
					});
				}

				this.eGetCapabilities = function(onGetCapabilities) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onGetCapabilities')){
							this.VidyoLocalMonitorOnGetCapabilities = arguments[0].onGetCapabilities;
							var params = vcUtilsParam({monitor: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onGetCapabilities'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoLocalMonitorOnGetCapabilities = onGetCapabilities;
						var params = vcUtilsParam({monitor: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalMonitoreGetCapabilities?" + params, OnComplete, OnError);
					});
				}

				return this;
			}

			this.VidyoLocalRenderer = function(){

				this.Destruct = function() {
					GetRequest("VidyoLocalRendererDestruct?" + vcUtilsParam({ obj: this.objId }), function(){}, function(){});
					delete objects[this.objId];
				}

				this.Disable = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({r: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererDisable?" + params, OnComplete, OnError);
					});
				}

				this.EnableExpandedCameraControl = function(enable) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('enable')){
							var params = vcUtilsParam({r: this.objId, enable: arguments[0].enable});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['enable'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({r: this.objId, enable: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererEnableExpandedCameraControl?" + params, OnComplete, OnError);
					});
				}

				this.EnableFECCIconCustomLayout = function(enable) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('enable')){
							var params = vcUtilsParam({r: this.objId, enable: arguments[0].enable});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['enable'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({r: this.objId, enable: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererEnableFECCIconCustomLayout?" + params, OnComplete, OnError);
					});
				}

				this.EnablePreviewMirroring = function(enable) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('enable')){
							var params = vcUtilsParam({r: this.objId, enable: arguments[0].enable});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['enable'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({r: this.objId, enable: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererEnablePreviewMirroring?" + params, OnComplete, OnError);
					});
				}

				this.EnableSelfViewCustomLayout = function(enable) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('enable')){
							var params = vcUtilsParam({renderer: this.objId, enable: arguments[0].enable});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['enable'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({renderer: this.objId, enable: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererEnableSelfViewCustomLayout?" + params, OnComplete, OnError);
					});
				}

				this.EnableShowAudioTiles = function(enable) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('enable')){
							var params = vcUtilsParam({r: this.objId, enable: arguments[0].enable});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['enable'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({r: this.objId, enable: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererEnableShowAudioTiles?" + params, OnComplete, OnError);
					});
				}

				this.EnableTouchInputDevice = function(isTouchInputDevice) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('isTouchInputDevice')){
							var params = vcUtilsParam({r: this.objId, isTouchInputDevice: arguments[0].isTouchInputDevice});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['isTouchInputDevice'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({r: this.objId, isTouchInputDevice: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererEnableTouchInputDevice?" + params, OnComplete, OnError);
					});
				}

				this.EnableVerticalVideoCentering = function(enable) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('enable')){
							var params = vcUtilsParam({r: this.objId, enable: arguments[0].enable});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['enable'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({r: this.objId, enable: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererEnableVerticalVideoCentering?" + params, OnComplete, OnError);
					});
				}

				this.GetId = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({r: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererGetId?" + params, OnComplete, OnError);
					});
				}

				this.GetName = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({r: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererGetName?" + params, OnComplete, OnError);
					});
				}

				this.GetPixelDensity = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({r: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererGetPixelDensity?" + params, OnComplete, OnError);
					});
				}

				this.GetViewingDistance = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({r: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererGetViewingDistance?" + params, OnComplete, OnError);
					});
				}

				this.IsExpandedCameraControlEnabled = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({r: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererIsExpandedCameraControlEnabled?" + params, OnComplete, OnError);
					});
				}

				this.IsFECCIconCustomLayoutEnabled = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({r: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererIsFECCIconCustomLayoutEnabled?" + params, OnComplete, OnError);
					});
				}

				this.IsPaused = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({r: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererIsPaused?" + params, OnComplete, OnError);
					});
				}

				this.IsPreviewMirroringEnabled = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({r: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererIsPreviewMirroringEnabled?" + params, OnComplete, OnError);
					});
				}

				this.IsSelectedTileControllingRemoteCamera = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({r: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererIsSelectedTileControllingRemoteCamera?" + params, OnComplete, OnError);
					});
				}

				this.IsShowAudioTilesEnabled = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({r: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererIsShowAudioTilesEnabled?" + params, OnComplete, OnError);
					});
				}

				this.IsTouchInputDeviceEnabled = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({r: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererIsTouchInputDeviceEnabled?" + params, OnComplete, OnError);
					});
				}

				this.IsVerticalVideoCenteringEnabled = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({r: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererIsVerticalVideoCenteringEnabled?" + params, OnComplete, OnError);
					});
				}

				this.Pause = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({r: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererPause?" + params, OnComplete, OnError);
					});
				}

				this.PinParticipant = function(p, pin) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('p') && arguments[0].hasOwnProperty('pin')){
							var params = vcUtilsParam({r: this.objId, p: (arguments[0].p ? arguments[0].p.objId : 0), pin: arguments[0].pin});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['p', 'pin'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "boolean")){
						var params = vcUtilsParam({r: this.objId, p: (arguments[0] ? arguments[0].objId : 0), pin: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererPinParticipant?" + params, OnComplete, OnError);
					});
				}

				this.RegisterPipEventListener = function(onPipLocationChanged) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onPipLocationChanged')){
							this.VidyoLocalRendererOnPipLocationChanged = arguments[0].onPipLocationChanged;
							var params = vcUtilsParam({r: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onPipLocationChanged'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoLocalRendererOnPipLocationChanged = onPipLocationChanged;
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererRegisterPipEventListener?" + params, OnComplete, OnError);
					});
				}

				this.Resume = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({r: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererResume?" + params, OnComplete, OnError);
					});
				}

				this.SetAllowContentMultiScreen = function(allow, displayIndex) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('allow') && arguments[0].hasOwnProperty('displayIndex')){
							var params = vcUtilsParam({r: this.objId, allow: arguments[0].allow, displayIndex: arguments[0].displayIndex});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['allow', 'displayIndex'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "boolean") && (typeof(arguments[1]) === "number")){
						var params = vcUtilsParam({r: this.objId, allow: arguments[0], displayIndex: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererSetAllowContentMultiScreen?" + params, OnComplete, OnError);
					});
				}

				this.SetAllowPreviewMultiScreen = function(allow, displayIndex) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('allow') && arguments[0].hasOwnProperty('displayIndex')){
							var params = vcUtilsParam({r: this.objId, allow: arguments[0].allow, displayIndex: arguments[0].displayIndex});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['allow', 'displayIndex'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "boolean") && (typeof(arguments[1]) === "number")){
						var params = vcUtilsParam({r: this.objId, allow: arguments[0], displayIndex: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererSetAllowPreviewMultiScreen?" + params, OnComplete, OnError);
					});
				}

				this.SetAnimationSpeed = function(speedPercentage) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('speedPercentage')){
							var params = vcUtilsParam({renderer: this.objId, speedPercentage: arguments[0].speedPercentage});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['speedPercentage'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({renderer: this.objId, speedPercentage: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererSetAnimationSpeed?" + params, OnComplete, OnError);
					});
				}

				this.SetBackgroundColor = function(red, green, blue) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('red') && arguments[0].hasOwnProperty('green') && arguments[0].hasOwnProperty('blue')){
							var params = vcUtilsParam({renderer: this.objId, red: arguments[0].red, green: arguments[0].green, blue: arguments[0].blue});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['red', 'green', 'blue'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number")){
						var params = vcUtilsParam({renderer: this.objId, red: arguments[0], green: arguments[1], blue: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererSetBackgroundColor?" + params, OnComplete, OnError);
					});
				}

				this.SetBorderStyle = function(style) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('style')){
							var params = vcUtilsParam({ct: this.objId, style: arguments[0].style});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['style'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({ct: this.objId, style: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererSetBorderStyle?" + params, OnComplete, OnError);
					});
				}

				this.SetCropped = function(cropped) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('cropped')){
							var params = vcUtilsParam({renderer: this.objId, cropped: arguments[0].cropped});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['cropped'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({renderer: this.objId, cropped: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererSetCropped?" + params, OnComplete, OnError);
					});
				}

				this.SetMaxCropping = function(maxCropPct) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('maxCropPct')){
							var params = vcUtilsParam({r: this.objId, maxCropPct: arguments[0].maxCropPct});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['maxCropPct'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({r: this.objId, maxCropPct: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererSetMaxCropping?" + params, OnComplete, OnError);
					});
				}

				this.SetMaxStreams = function(numStreams) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('numStreams')){
							var params = vcUtilsParam({r: this.objId, numStreams: arguments[0].numStreams});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['numStreams'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({r: this.objId, numStreams: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererSetMaxStreams?" + params, OnComplete, OnError);
					});
				}

				this.SetMaxStreamsMultiScreen = function(numStreams, displayIndex) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('numStreams') && arguments[0].hasOwnProperty('displayIndex')){
							var params = vcUtilsParam({r: this.objId, numStreams: arguments[0].numStreams, displayIndex: arguments[0].displayIndex});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['numStreams', 'displayIndex'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number")){
						var params = vcUtilsParam({r: this.objId, numStreams: arguments[0], displayIndex: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererSetMaxStreamsMultiScreen?" + params, OnComplete, OnError);
					});
				}

				this.SetNumPreferred = function(numPreferred) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('numPreferred')){
							var params = vcUtilsParam({r: this.objId, numPreferred: arguments[0].numPreferred});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['numPreferred'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({r: this.objId, numPreferred: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererSetNumPreferred?" + params, OnComplete, OnError);
					});
				}

				this.SetParametersForHighDPIDevice = function(pixelsPerInch, viewingDistance, isTouchInputDevice) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('pixelsPerInch') && arguments[0].hasOwnProperty('viewingDistance') && arguments[0].hasOwnProperty('isTouchInputDevice')){
							var params = vcUtilsParam({r: this.objId, pixelsPerInch: arguments[0].pixelsPerInch, viewingDistance: arguments[0].viewingDistance, isTouchInputDevice: arguments[0].isTouchInputDevice});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['pixelsPerInch', 'viewingDistance', 'isTouchInputDevice'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "boolean")){
						var params = vcUtilsParam({r: this.objId, pixelsPerInch: arguments[0], viewingDistance: arguments[1], isTouchInputDevice: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererSetParametersForHighDPIDevice?" + params, OnComplete, OnError);
					});
				}

				this.SetPipPosition = function(x, y, lockPip) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('x') && arguments[0].hasOwnProperty('y') && arguments[0].hasOwnProperty('lockPip')){
							var params = vcUtilsParam({r: this.objId, x: arguments[0].x, y: arguments[0].y, lockPip: arguments[0].lockPip});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['x', 'y', 'lockPip'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "boolean")){
						var params = vcUtilsParam({r: this.objId, x: arguments[0], y: arguments[1], lockPip: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererSetPipPosition?" + params, OnComplete, OnError);
					});
				}

				this.SetPixelDensity = function(pixelsPerInch) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('pixelsPerInch')){
							var params = vcUtilsParam({r: this.objId, pixelsPerInch: arguments[0].pixelsPerInch});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['pixelsPerInch'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({r: this.objId, pixelsPerInch: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererSetPixelDensity?" + params, OnComplete, OnError);
					});
				}

				this.SetPosition = function(x, y, width, height) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('x') && arguments[0].hasOwnProperty('y') && arguments[0].hasOwnProperty('width') && arguments[0].hasOwnProperty('height')){
							var params = vcUtilsParam({r: this.objId, x: arguments[0].x, y: arguments[0].y, width: arguments[0].width, height: arguments[0].height});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['x', 'y', 'width', 'height'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number")){
						var params = vcUtilsParam({r: this.objId, x: arguments[0], y: arguments[1], width: arguments[2], height: arguments[3]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererSetPosition?" + params, OnComplete, OnError);
					});
				}

				this.SetPriorityMultiScreen = function(priority, displayIndex) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('priority') && arguments[0].hasOwnProperty('displayIndex')){
							var params = vcUtilsParam({r: this.objId, priority: arguments[0].priority, displayIndex: arguments[0].displayIndex});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['priority', 'displayIndex'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number")){
						var params = vcUtilsParam({r: this.objId, priority: arguments[0], displayIndex: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererSetPriorityMultiScreen?" + params, OnComplete, OnError);
					});
				}

				this.SetRemoteWindowSharePinMode = function(autoPin) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('autoPin')){
							var params = vcUtilsParam({r: this.objId, autoPin: arguments[0].autoPin});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['autoPin'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({r: this.objId, autoPin: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererSetRemoteWindowSharePinMode?" + params, OnComplete, OnError);
					});
				}

				this.SetTilesBackgroundColor = function(red, green, blue) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('red') && arguments[0].hasOwnProperty('green') && arguments[0].hasOwnProperty('blue')){
							var params = vcUtilsParam({renderer: this.objId, red: arguments[0].red, green: arguments[0].green, blue: arguments[0].blue});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['red', 'green', 'blue'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number")){
						var params = vcUtilsParam({renderer: this.objId, red: arguments[0], green: arguments[1], blue: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererSetTilesBackgroundColor?" + params, OnComplete, OnError);
					});
				}

				this.SetViewingDistance = function(viewingDistanceFt) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('viewingDistanceFt')){
							var params = vcUtilsParam({r: this.objId, viewingDistanceFt: arguments[0].viewingDistanceFt});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['viewingDistanceFt'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({r: this.objId, viewingDistanceFt: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererSetViewingDistance?" + params, OnComplete, OnError);
					});
				}

				this.ShowAudioMeters = function(showMeters) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('showMeters')){
							var params = vcUtilsParam({renderer: this.objId, showMeters: arguments[0].showMeters});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['showMeters'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({renderer: this.objId, showMeters: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererShowAudioMeters?" + params, OnComplete, OnError);
					});
				}

				this.ShowDebugStats = function(showStats) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('showStats')){
							var params = vcUtilsParam({renderer: this.objId, showStats: arguments[0].showStats});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['showStats'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({renderer: this.objId, showStats: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererShowDebugStats?" + params, OnComplete, OnError);
					});
				}

				this.ShowLabel = function(showLabel) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('showLabel')){
							var params = vcUtilsParam({renderer: this.objId, showLabel: arguments[0].showLabel});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['showLabel'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({renderer: this.objId, showLabel: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererShowLabel?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterPipEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({r: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalRendererUnregisterPipEventListener?" + params, OnComplete, OnError);
					});
				}

				return this;
			}

			this.VidyoLocalSpeaker = function(){

				this.Destruct = function() {
					GetRequest("VidyoLocalSpeakerDestruct?" + vcUtilsParam({ obj: this.objId }), function(){}, function(){});
					delete objects[this.objId];
				}

				this.DisableDebugRecordings = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({s: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({s: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalSpeakerDisableDebugRecordings?" + params, OnComplete, OnError);
					});
				}

				this.EnableDebugRecordings = function(dir) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('dir')){
							var params = vcUtilsParam({s: this.objId, dir: arguments[0].dir});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['dir'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({s: this.objId, dir: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalSpeakerEnableDebugRecordings?" + params, OnComplete, OnError);
					});
				}

				this.GetId = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({s: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({s: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalSpeakerGetId?" + params, OnComplete, OnError);
					});
				}

				this.GetName = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({s: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({s: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalSpeakerGetName?" + params, OnComplete, OnError);
					});
				}

				this.GetStreamType = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({s: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({s: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalSpeakerGetStreamType?" + params, OnComplete, OnError);
					});
				}

				this.GetVolume = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({s: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({s: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalSpeakerGetVolume?" + params, OnComplete, OnError);
					});
				}

				this.IsPaused = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({s: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({s: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalSpeakerIsPaused?" + params, OnComplete, OnError);
					});
				}

				this.Pause = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({s: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({s: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalSpeakerPause?" + params, OnComplete, OnError);
					});
				}

				this.PlaySound = function(sound, loop) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('sound') && arguments[0].hasOwnProperty('loop')){
							var params = vcUtilsParam({s: this.objId, sound: (arguments[0].sound ? arguments[0].sound.objId : 0), loop: arguments[0].loop});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['sound', 'loop'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "boolean")){
						var params = vcUtilsParam({s: this.objId, sound: (arguments[0] ? arguments[0].objId : 0), loop: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							if(sound&& response.data.sound)
								vcUtilsExtend(sound, response.data.sound);
							resolve(response.data);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalSpeakerPlaySound?" + params, OnComplete, OnError);
					});
				}

				this.PlayTone = function(dtmfTone) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('dtmfTone')){
							var params = vcUtilsParam({s: this.objId, dtmfTone: arguments[0].dtmfTone});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['dtmfTone'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({s: this.objId, dtmfTone: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalSpeakerPlayTone?" + params, OnComplete, OnError);
					});
				}

				this.Resume = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({s: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({s: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalSpeakerResume?" + params, OnComplete, OnError);
					});
				}

				this.SetStreamType = function(streamType) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('streamType')){
							var params = vcUtilsParam({s: this.objId, streamType: arguments[0].streamType});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['streamType'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({s: this.objId, streamType: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalSpeakerSetStreamType?" + params, OnComplete, OnError);
					});
				}

				this.SetVolume = function(volumePercent) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('volumePercent')){
							var params = vcUtilsParam({s: this.objId, volumePercent: arguments[0].volumePercent});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['volumePercent'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({s: this.objId, volumePercent: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalSpeakerSetVolume?" + params, OnComplete, OnError);
					});
				}

				this.StopSound = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({s: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({s: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalSpeakerStopSound?" + params, OnComplete, OnError);
					});
				}

				return this;
			}

			this.VidyoLocalWindowShare = function(){

				this.Destruct = function() {
					GetRequest("VidyoLocalWindowShareDestruct?" + vcUtilsParam({ obj: this.objId }), function(){}, function(){});
					delete objects[this.objId];
				}

				this.AddToLocalRenderer = function(renderer) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('renderer')){
							var params = vcUtilsParam({w: this.objId, renderer: (arguments[0].renderer ? arguments[0].renderer.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['renderer'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({w: this.objId, renderer: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalWindowShareAddToLocalRenderer?" + params, OnComplete, OnError);
					});
				}

				this.AddToRemoteRenderer = function(remoteRenderer) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('remoteRenderer')){
							var params = vcUtilsParam({w: this.objId, remoteRenderer: (arguments[0].remoteRenderer ? arguments[0].remoteRenderer.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['remoteRenderer'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({w: this.objId, remoteRenderer: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalWindowShareAddToRemoteRenderer?" + params, OnComplete, OnError);
					});
				}

				this.ClearConstraints = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({w: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({w: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalWindowShareClearConstraints?" + params, OnComplete, OnError);
					});
				}

				this.GetApplicationIconFrameDataUriAsync = function(maxWidth, maxHeight, onComplete) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('maxWidth') && arguments[0].hasOwnProperty('maxHeight') && arguments[0].hasOwnProperty('onComplete')){
							this.VidyoLocalWindowShareOnApplicationIconDataUriComplete = arguments[0].onComplete;
							var params = vcUtilsParam({w: this.objId, maxWidth: arguments[0].maxWidth, maxHeight: arguments[0].maxHeight});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['maxWidth', 'maxHeight', 'onComplete'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "function")){
						this.VidyoLocalWindowShareOnApplicationIconDataUriComplete = onComplete;
						var params = vcUtilsParam({w: this.objId, maxWidth: arguments[0], maxHeight: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalWindowShareGetApplicationIconFrameDataUriAsync?" + params, OnComplete, OnError);
					});
				}

				this.GetApplicationName = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({w: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({w: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalWindowShareGetApplicationName?" + params, OnComplete, OnError);
					});
				}

				this.GetCapabilities = function(onGetCapabilities) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onGetCapabilities')){
							this.VidyoLocalWindowShareOnGetCapabilities = arguments[0].onGetCapabilities;
							var params = vcUtilsParam({windowShare: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onGetCapabilities'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoLocalWindowShareOnGetCapabilities = onGetCapabilities;
						var params = vcUtilsParam({windowShare: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalWindowShareGetCapabilities?" + params, OnComplete, OnError);
					});
				}

				this.GetId = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({w: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({w: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalWindowShareGetId?" + params, OnComplete, OnError);
					});
				}

				this.GetName = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({w: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({w: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalWindowShareGetName?" + params, OnComplete, OnError);
					});
				}

				this.GetPreviewFrameDataUriAsync = function(maxWidth, maxHeight, onComplete) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('maxWidth') && arguments[0].hasOwnProperty('maxHeight') && arguments[0].hasOwnProperty('onComplete')){
							this.VidyoLocalWindowShareOnPreviewDataUriComplete = arguments[0].onComplete;
							var params = vcUtilsParam({w: this.objId, maxWidth: arguments[0].maxWidth, maxHeight: arguments[0].maxHeight});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['maxWidth', 'maxHeight', 'onComplete'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "function")){
						this.VidyoLocalWindowShareOnPreviewDataUriComplete = onComplete;
						var params = vcUtilsParam({w: this.objId, maxWidth: arguments[0], maxHeight: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalWindowShareGetPreviewFrameDataUriAsync?" + params, OnComplete, OnError);
					});
				}

				this.GetPreviewLabel = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({w: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({w: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalWindowShareGetPreviewLabel?" + params, OnComplete, OnError);
					});
				}

				this.GetProcessId = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({w: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({w: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalWindowShareGetProcessId?" + params, OnComplete, OnError);
					});
				}

				this.GetProcessName = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({w: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({w: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalWindowShareGetProcessName?" + params, OnComplete, OnError);
					});
				}

				this.GetUpdatedName = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({w: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({w: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalWindowShareGetUpdatedName?" + params, OnComplete, OnError);
					});
				}

				this.GetWindowState = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({w: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({w: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalWindowShareGetWindowState?" + params, OnComplete, OnError);
					});
				}

				this.IsApplicationNameSet = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({w: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({w: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalWindowShareIsApplicationNameSet?" + params, OnComplete, OnError);
					});
				}

				this.IsNameSet = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({w: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({w: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalWindowShareIsNameSet?" + params, OnComplete, OnError);
					});
				}

				this.RemoveFromLocalRenderer = function(renderer) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('renderer')){
							var params = vcUtilsParam({w: this.objId, renderer: (arguments[0].renderer ? arguments[0].renderer.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['renderer'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({w: this.objId, renderer: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalWindowShareRemoveFromLocalRenderer?" + params, OnComplete, OnError);
					});
				}

				this.RemoveFromRemoteRenderer = function(remoteRenderer) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('remoteRenderer')){
							var params = vcUtilsParam({w: this.objId, remoteRenderer: (arguments[0].remoteRenderer ? arguments[0].remoteRenderer.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['remoteRenderer'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({w: this.objId, remoteRenderer: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalWindowShareRemoveFromRemoteRenderer?" + params, OnComplete, OnError);
					});
				}

				this.SetBoundsConstraints = function(maxFrameInterval, minFrameInterval, maxWidth, minWidth, maxHeight, minHeight) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('maxFrameInterval') && arguments[0].hasOwnProperty('minFrameInterval') && arguments[0].hasOwnProperty('maxWidth') && arguments[0].hasOwnProperty('minWidth') && arguments[0].hasOwnProperty('maxHeight') && arguments[0].hasOwnProperty('minHeight')){
							var params = vcUtilsParam({w: this.objId, maxFrameInterval: arguments[0].maxFrameInterval, minFrameInterval: arguments[0].minFrameInterval, maxWidth: arguments[0].maxWidth, minWidth: arguments[0].minWidth, maxHeight: arguments[0].maxHeight, minHeight: arguments[0].minHeight});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['maxFrameInterval', 'minFrameInterval', 'maxWidth', 'minWidth', 'maxHeight', 'minHeight'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 6 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number") && (typeof(arguments[5]) === "number")){
						var params = vcUtilsParam({w: this.objId, maxFrameInterval: arguments[0], minFrameInterval: arguments[1], maxWidth: arguments[2], minWidth: arguments[3], maxHeight: arguments[4], minHeight: arguments[5]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalWindowShareSetBoundsConstraints?" + params, OnComplete, OnError);
					});
				}

				this.SetCapability = function(frameInterval, showCursor, redactOccludedAreas) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('frameInterval') && arguments[0].hasOwnProperty('showCursor') && arguments[0].hasOwnProperty('redactOccludedAreas')){
							var params = vcUtilsParam({w: this.objId, frameInterval: arguments[0].frameInterval, showCursor: arguments[0].showCursor, redactOccludedAreas: arguments[0].redactOccludedAreas});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['frameInterval', 'showCursor', 'redactOccludedAreas'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "boolean") && (typeof(arguments[2]) === "boolean")){
						var params = vcUtilsParam({w: this.objId, frameInterval: arguments[0], showCursor: arguments[1], redactOccludedAreas: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalWindowShareSetCapability?" + params, OnComplete, OnError);
					});
				}

				this.SetCursorVisibility = function(showCursor) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('showCursor')){
							var params = vcUtilsParam({w: this.objId, showCursor: arguments[0].showCursor});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['showCursor'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({w: this.objId, showCursor: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalWindowShareSetCursorVisibility?" + params, OnComplete, OnError);
					});
				}

				this.SetDiscreteConstraints = function(maxFrameInterval, minFrameInterval, width, height, scaleFactor) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('maxFrameInterval') && arguments[0].hasOwnProperty('minFrameInterval') && arguments[0].hasOwnProperty('width') && arguments[0].hasOwnProperty('height') && arguments[0].hasOwnProperty('scaleFactor')){
							var params = vcUtilsParam({w: this.objId, maxFrameInterval: arguments[0].maxFrameInterval, minFrameInterval: arguments[0].minFrameInterval, width: arguments[0].width, height: arguments[0].height, scaleFactor: arguments[0].scaleFactor});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['maxFrameInterval', 'minFrameInterval', 'width', 'height', 'scaleFactor'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 5 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number")){
						var params = vcUtilsParam({w: this.objId, maxFrameInterval: arguments[0], minFrameInterval: arguments[1], width: arguments[2], height: arguments[3], scaleFactor: arguments[4]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalWindowShareSetDiscreteConstraints?" + params, OnComplete, OnError);
					});
				}

				this.SetFrameInterval = function(frameInterval) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('frameInterval')){
							var params = vcUtilsParam({w: this.objId, frameInterval: arguments[0].frameInterval});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['frameInterval'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({w: this.objId, frameInterval: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalWindowShareSetFrameInterval?" + params, OnComplete, OnError);
					});
				}

				this.SetLowLatencyProfile = function(profile) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('profile')){
							var params = vcUtilsParam({w: this.objId, profile: arguments[0].profile});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['profile'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({w: this.objId, profile: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalWindowShareSetLowLatencyProfile?" + params, OnComplete, OnError);
					});
				}

				this.SetPositionInLocalRenderer = function(localRenderer, x, y, width, height, frameInterval) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localRenderer') && arguments[0].hasOwnProperty('x') && arguments[0].hasOwnProperty('y') && arguments[0].hasOwnProperty('width') && arguments[0].hasOwnProperty('height') && arguments[0].hasOwnProperty('frameInterval')){
							var params = vcUtilsParam({w: this.objId, localRenderer: (arguments[0].localRenderer ? arguments[0].localRenderer.objId : 0), x: arguments[0].x, y: arguments[0].y, width: arguments[0].width, height: arguments[0].height, frameInterval: arguments[0].frameInterval});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localRenderer', 'x', 'y', 'width', 'height', 'frameInterval'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 6 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number") && (typeof(arguments[5]) === "number")){
						var params = vcUtilsParam({w: this.objId, localRenderer: (arguments[0] ? arguments[0].objId : 0), x: arguments[1], y: arguments[2], width: arguments[3], height: arguments[4], frameInterval: arguments[5]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalWindowShareSetPositionInLocalRenderer?" + params, OnComplete, OnError);
					});
				}

				this.SetPreviewLabel = function(previewLabel) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('previewLabel')){
							var params = vcUtilsParam({w: this.objId, previewLabel: arguments[0].previewLabel});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['previewLabel'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({w: this.objId, previewLabel: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalWindowShareSetPreviewLabel?" + params, OnComplete, OnError);
					});
				}

				this.SetRedactOccludedAreas = function(redactOccludedAreas) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('redactOccludedAreas')){
							var params = vcUtilsParam({w: this.objId, redactOccludedAreas: arguments[0].redactOccludedAreas});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['redactOccludedAreas'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({w: this.objId, redactOccludedAreas: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalWindowShareSetRedactOccludedAreas?" + params, OnComplete, OnError);
					});
				}

				this.SetScaleFactor = function(scaleFactor) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('scaleFactor')){
							var params = vcUtilsParam({w: this.objId, scaleFactor: arguments[0].scaleFactor});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['scaleFactor'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({w: this.objId, scaleFactor: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoLocalWindowShareSetScaleFactor?" + params, OnComplete, OnError);
					});
				}

				return this;
			}

			this.VidyoRemoteCamera = function(){

				this.Destruct = function() {
					GetRequest("VidyoRemoteCameraDestruct?" + vcUtilsParam({ obj: this.objId }), function(){}, function(){});
					delete objects[this.objId];
				}

				this.ActivatePreset = function(index) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('index')){
							var params = vcUtilsParam({c: this.objId, index: arguments[0].index});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['index'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({c: this.objId, index: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteCameraActivatePreset?" + params, OnComplete, OnError);
					});
				}

				this.AddToLocalRenderer = function(localRenderer, mode) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localRenderer') && arguments[0].hasOwnProperty('mode')){
							var params = vcUtilsParam({c: this.objId, localRenderer: (arguments[0].localRenderer ? arguments[0].localRenderer.objId : 0), mode: arguments[0].mode});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localRenderer', 'mode'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "string")){
						var params = vcUtilsParam({c: this.objId, localRenderer: (arguments[0] ? arguments[0].objId : 0), mode: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteCameraAddToLocalRenderer?" + params, OnComplete, OnError);
					});
				}

				this.ControlPTZNudge = function(pan, tilt, zoom) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('pan') && arguments[0].hasOwnProperty('tilt') && arguments[0].hasOwnProperty('zoom')){
							var params = vcUtilsParam({c: this.objId, pan: arguments[0].pan, tilt: arguments[0].tilt, zoom: arguments[0].zoom});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['pan', 'tilt', 'zoom'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number")){
						var params = vcUtilsParam({c: this.objId, pan: arguments[0], tilt: arguments[1], zoom: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteCameraControlPTZNudge?" + params, OnComplete, OnError);
					});
				}

				this.ControlPTZStart = function(direction, timeout) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('direction') && arguments[0].hasOwnProperty('timeout')){
							var params = vcUtilsParam({c: this.objId, direction: arguments[0].direction, timeout: arguments[0].timeout});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['direction', 'timeout'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "number")){
						var params = vcUtilsParam({c: this.objId, direction: arguments[0], timeout: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteCameraControlPTZStart?" + params, OnComplete, OnError);
					});
				}

				this.ControlPTZStop = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteCameraControlPTZStop?" + params, OnComplete, OnError);
					});
				}

				this.GetControlCapabilities = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteCameraGetControlCapabilities?" + params, OnComplete, OnError);
					});
				}

				this.GetId = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteCameraGetId?" + params, OnComplete, OnError);
					});
				}

				this.GetLocalRenderingStreamId = function(index) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('index')){
							var params = vcUtilsParam({c: this.objId, index: arguments[0].index});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['index'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({c: this.objId, index: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteCameraGetLocalRenderingStreamId?" + params, OnComplete, OnError);
					});
				}

				this.GetName = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteCameraGetName?" + params, OnComplete, OnError);
					});
				}

				this.GetPosition = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteCameraGetPosition?" + params, OnComplete, OnError);
					});
				}

				this.IsControllable = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteCameraIsControllable?" + params, OnComplete, OnError);
					});
				}

				this.RegisterFrameEventListener = function(onFrame) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onFrame')){
							this.VidyoRemoteCameraOnRemoteCameraFrame = arguments[0].onFrame;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onFrame'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoRemoteCameraOnRemoteCameraFrame = onFrame;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteCameraRegisterFrameEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterFrameSizeListener = function(onFrameSizeUpdate) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onFrameSizeUpdate')){
							this.VidyoRemoteCameraOnFrameSizeUpdate = arguments[0].onFrameSizeUpdate;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onFrameSizeUpdate'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoRemoteCameraOnFrameSizeUpdate = onFrameSizeUpdate;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteCameraRegisterFrameSizeListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterPresetEventListener = function(onPresetUpdated) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onPresetUpdated')){
							this.VidyoRemoteCameraOnPresetUpdated = arguments[0].onPresetUpdated;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onPresetUpdated'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoRemoteCameraOnPresetUpdated = onPresetUpdated;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteCameraRegisterPresetEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RemoveFromLocalRenderer = function(localRenderer) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localRenderer')){
							var params = vcUtilsParam({c: this.objId, localRenderer: (arguments[0].localRenderer ? arguments[0].localRenderer.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localRenderer'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({c: this.objId, localRenderer: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteCameraRemoveFromLocalRenderer?" + params, OnComplete, OnError);
					});
				}

				this.SetPositionInLocalRenderer = function(localRenderer, x, y, width, height, frameInterval) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localRenderer') && arguments[0].hasOwnProperty('x') && arguments[0].hasOwnProperty('y') && arguments[0].hasOwnProperty('width') && arguments[0].hasOwnProperty('height') && arguments[0].hasOwnProperty('frameInterval')){
							var params = vcUtilsParam({c: this.objId, localRenderer: (arguments[0].localRenderer ? arguments[0].localRenderer.objId : 0), x: arguments[0].x, y: arguments[0].y, width: arguments[0].width, height: arguments[0].height, frameInterval: arguments[0].frameInterval});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localRenderer', 'x', 'y', 'width', 'height', 'frameInterval'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 6 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number") && (typeof(arguments[5]) === "number")){
						var params = vcUtilsParam({c: this.objId, localRenderer: (arguments[0] ? arguments[0].objId : 0), x: arguments[1], y: arguments[2], width: arguments[3], height: arguments[4], frameInterval: arguments[5]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteCameraSetPositionInLocalRenderer?" + params, OnComplete, OnError);
					});
				}

				this.ShowCameraControl = function(show) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('show')){
							var params = vcUtilsParam({c: this.objId, show: arguments[0].show});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['show'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({c: this.objId, show: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteCameraShowCameraControl?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterFrameEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteCameraUnregisterFrameEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterFrameSizeListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteCameraUnregisterFrameSizeListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterPresetEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteCameraUnregisterPresetEventListener?" + params, OnComplete, OnError);
					});
				}

				this.ViscaControl = function(viscaCmd, viscaCmdId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('viscaCmd') && arguments[0].hasOwnProperty('viscaCmdId')){
							var params = vcUtilsParam({c: this.objId, viscaCmd: arguments[0].viscaCmd, viscaCmdId: arguments[0].viscaCmdId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['viscaCmd', 'viscaCmdId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string")){
						var params = vcUtilsParam({c: this.objId, viscaCmd: arguments[0], viscaCmdId: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteCameraViscaControl?" + params, OnComplete, OnError);
					});
				}

				return this;
			}

			this.VidyoRemoteMicrophone = function(){

				this.Destruct = function() {
					GetRequest("VidyoRemoteMicrophoneDestruct?" + vcUtilsParam({ obj: this.objId }), function(){}, function(){});
					delete objects[this.objId];
				}

				this.AddToLocalSpeaker = function(speaker, mode) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('speaker') && arguments[0].hasOwnProperty('mode')){
							var params = vcUtilsParam({m: this.objId, speaker: (arguments[0].speaker ? arguments[0].speaker.objId : 0), mode: arguments[0].mode});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['speaker', 'mode'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "string")){
						var params = vcUtilsParam({m: this.objId, speaker: (arguments[0] ? arguments[0].objId : 0), mode: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteMicrophoneAddToLocalSpeaker?" + params, OnComplete, OnError);
					});
				}

				this.GetId = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({m: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({m: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteMicrophoneGetId?" + params, OnComplete, OnError);
					});
				}

				this.GetName = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({m: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({m: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteMicrophoneGetName?" + params, OnComplete, OnError);
					});
				}

				this.GetSignalType = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({m: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({m: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteMicrophoneGetSignalType?" + params, OnComplete, OnError);
					});
				}

				this.RemoveFromLocalSpeaker = function(speaker) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('speaker')){
							var params = vcUtilsParam({m: this.objId, speaker: (arguments[0].speaker ? arguments[0].speaker.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['speaker'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({m: this.objId, speaker: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteMicrophoneRemoveFromLocalSpeaker?" + params, OnComplete, OnError);
					});
				}

				return this;
			}

			this.VidyoRemoteRenderer = function(){

				this.Destruct = function() {
					GetRequest("VidyoRemoteRendererDestruct?" + vcUtilsParam({ obj: this.objId }), function(){}, function(){});
					delete objects[this.objId];
				}

				this.GetId = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({r: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteRendererGetId?" + params, OnComplete, OnError);
					});
				}

				this.GetName = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({r: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteRendererGetName?" + params, OnComplete, OnError);
					});
				}

				this.IsClientCanResume = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({r: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteRendererIsClientCanResume?" + params, OnComplete, OnError);
					});
				}

				this.IsPaused = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({r: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteRendererIsPaused?" + params, OnComplete, OnError);
					});
				}

				this.Pause = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({r: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteRendererPause?" + params, OnComplete, OnError);
					});
				}

				this.Resume = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({r: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteRendererResume?" + params, OnComplete, OnError);
					});
				}

				return this;
			}

			this.VidyoRemoteSpeaker = function(){

				this.Destruct = function() {
					GetRequest("VidyoRemoteSpeakerDestruct?" + vcUtilsParam({ obj: this.objId }), function(){}, function(){});
					delete objects[this.objId];
				}

				this.GetId = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({s: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({s: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteSpeakerGetId?" + params, OnComplete, OnError);
					});
				}

				this.GetName = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({s: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({s: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteSpeakerGetName?" + params, OnComplete, OnError);
					});
				}

				this.IsClientCanResume = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({s: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({s: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteSpeakerIsClientCanResume?" + params, OnComplete, OnError);
					});
				}

				this.IsPaused = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({s: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({s: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteSpeakerIsPaused?" + params, OnComplete, OnError);
					});
				}

				this.Pause = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({s: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({s: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteSpeakerPause?" + params, OnComplete, OnError);
					});
				}

				this.Resume = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({s: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({s: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteSpeakerResume?" + params, OnComplete, OnError);
					});
				}

				return this;
			}

			this.VidyoRemoteWindowShare = function(){

				this.Destruct = function() {
					GetRequest("VidyoRemoteWindowShareDestruct?" + vcUtilsParam({ obj: this.objId }), function(){}, function(){});
					delete objects[this.objId];
				}

				this.AddToLocalRenderer = function(renderer) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('renderer')){
							var params = vcUtilsParam({w: this.objId, renderer: (arguments[0].renderer ? arguments[0].renderer.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['renderer'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({w: this.objId, renderer: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteWindowShareAddToLocalRenderer?" + params, OnComplete, OnError);
					});
				}

				this.GetId = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({w: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({w: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteWindowShareGetId?" + params, OnComplete, OnError);
					});
				}

				this.GetName = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({w: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({w: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteWindowShareGetName?" + params, OnComplete, OnError);
					});
				}

				this.RegisterFrameEventListener = function(onFrame) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onFrame')){
							this.VidyoRemoteWindowShareOnRemoteWindowShareFrame = arguments[0].onFrame;
							var params = vcUtilsParam({w: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onFrame'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoRemoteWindowShareOnRemoteWindowShareFrame = onFrame;
						var params = vcUtilsParam({w: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteWindowShareRegisterFrameEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RemoveFromLocalRenderer = function(renderer) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('renderer')){
							var params = vcUtilsParam({w: this.objId, renderer: (arguments[0].renderer ? arguments[0].renderer.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['renderer'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({w: this.objId, renderer: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteWindowShareRemoveFromLocalRenderer?" + params, OnComplete, OnError);
					});
				}

				this.SetPositionInLocalRenderer = function(localRenderer, x, y, width, height, frameInterval) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localRenderer') && arguments[0].hasOwnProperty('x') && arguments[0].hasOwnProperty('y') && arguments[0].hasOwnProperty('width') && arguments[0].hasOwnProperty('height') && arguments[0].hasOwnProperty('frameInterval')){
							var params = vcUtilsParam({w: this.objId, localRenderer: (arguments[0].localRenderer ? arguments[0].localRenderer.objId : 0), x: arguments[0].x, y: arguments[0].y, width: arguments[0].width, height: arguments[0].height, frameInterval: arguments[0].frameInterval});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localRenderer', 'x', 'y', 'width', 'height', 'frameInterval'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 6 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number") && (typeof(arguments[5]) === "number")){
						var params = vcUtilsParam({w: this.objId, localRenderer: (arguments[0] ? arguments[0].objId : 0), x: arguments[1], y: arguments[2], width: arguments[3], height: arguments[4], frameInterval: arguments[5]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteWindowShareSetPositionInLocalRenderer?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterFrameEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({w: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({w: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRemoteWindowShareUnregisterFrameEventListener?" + params, OnComplete, OnError);
					});
				}

				return this;
			}

			this.CreateVidyoVideoFrame = function(format, buffer, size, releaseCallback, width, height) {
				var args = [].slice.apply(arguments);
				if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
					if(arguments[0].hasOwnProperty('format') && arguments[0].hasOwnProperty('buffer') && arguments[0].hasOwnProperty('size') && arguments[0].hasOwnProperty('releaseCallback') && arguments[0].hasOwnProperty('width') && arguments[0].hasOwnProperty('height')){
						var params = vcUtilsParam({x: this.objId, format: arguments[0].format, buffer: arguments[0].buffer, size: arguments[0].size, width: arguments[0].width, height: arguments[0].height});
					} else {
						return Promise.reject(new MissingArgumentException('Missing Parameters', ['format', 'buffer', 'size', 'releaseCallback', 'width', 'height'], Object.keys(arguments[0])).error);
					}
				} else if (arguments.length === 5 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number")){
					var params = vcUtilsParam({x: this.objId, format: arguments[0], buffer: arguments[1], size: arguments[1], width: arguments[3], height: arguments[4]});
				} else {
					return Promise.reject(new Error('Invalid Parameters'));
				}

				return new Promise(function(resolve, reject){
					function OnComplete(response) {
						var vidyoVideoFrame = new contextObj.VidyoVideoFrame(response.data.VidyoVideoFrame);	// copy construct
						if(args.length === 1 && (typeof(args[0]) === "object") && !args[0].objId){
							vidyoVideoFrame.VidyoVideoFrameReleaseCallback = args[0].releaseCallback;
						} else {
							vidyoVideoFrame.VidyoVideoFrameReleaseCallback = releaseCallback;
						}
						objects[vidyoVideoFrame.objId] = vidyoVideoFrame;
						resolve(vidyoVideoFrame);
					}
					function OnError(response) {
						reject(Error(response));
					}
					GetRequest("VidyoVideoFrameConstructFromKnownFormatWithExternalBuffer?" + params, OnComplete, OnError);
				});
			}
			this.VidyoVideoFrame = function(format, buffer, size, releaseCallback, width, height) {
				if(arguments.length === 1 && arguments[0].objId && arguments[0].objType && arguments[0].objType === "VidyoVideoFrame"){
					vcUtilsExtend(this, arguments[0]);	//	copy construct
				} else {
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('format') && arguments[0].hasOwnProperty('buffer') && arguments[0].hasOwnProperty('size') && arguments[0].hasOwnProperty('releaseCallback') && arguments[0].hasOwnProperty('width') && arguments[0].hasOwnProperty('height')){
							this.VidyoVideoFrameReleaseCallback = arguments[0].releaseCallback;
							var params = vcUtilsParam({x: this.objId, format: arguments[0].format, buffer: arguments[0].buffer, size: arguments[0].size, width: arguments[0].width, height: arguments[0].height});
						} else {
							throw new MissingArgumentException('Missing Parameters', ['format', 'buffer', 'size', 'releaseCallback', 'width', 'height'], Object.keys(arguments[0])).error;
						}
					} else if (arguments.length === 5 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number")){
						this.VidyoVideoFrameReleaseCallback = releaseCallback;
						var params = vcUtilsParam({x: this.objId, format: arguments[0], buffer: arguments[1], size: arguments[1], width: arguments[3], height: arguments[4]});
					} else {
						throw new Error('Invalid Parameters');
					}
					var response = GetRequest("VidyoVideoFrameConstructFromKnownFormatWithExternalBuffer?" + params);
					if(response == null)
						throw new Error('No Response from VidyoClient');
					vcUtilsExtend(this, response.VidyoVideoFrame);
					objects[this.objId] = this;

				}

				this.Destruct = function() {
					GetRequest("VidyoVideoFrameDestruct?" + vcUtilsParam({ obj: this.objId }), function(){}, function(){});
					delete objects[this.objId];
				}

				this.GetData = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({f: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({f: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVideoFrameGetData?" + params, OnComplete, OnError);
					});
				}

				this.GetDataCb = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({f: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({f: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVideoFrameGetDataCb?" + params, OnComplete, OnError);
					});
				}

				this.GetDataCr = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({f: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({f: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVideoFrameGetDataCr?" + params, OnComplete, OnError);
					});
				}

				this.GetDataY = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({f: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({f: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVideoFrameGetDataY?" + params, OnComplete, OnError);
					});
				}

				this.GetElapsedTime = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({f: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({f: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVideoFrameGetElapsedTime?" + params, OnComplete, OnError);
					});
				}

				this.GetFormat = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({f: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({f: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVideoFrameGetFormat?" + params, OnComplete, OnError);
					});
				}

				this.GetHeight = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({f: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({f: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVideoFrameGetHeight?" + params, OnComplete, OnError);
					});
				}

				this.GetHeightCb = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({f: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({f: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVideoFrameGetHeightCb?" + params, OnComplete, OnError);
					});
				}

				this.GetHeightCr = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({f: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({f: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVideoFrameGetHeightCr?" + params, OnComplete, OnError);
					});
				}

				this.GetHeightY = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({f: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({f: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVideoFrameGetHeightY?" + params, OnComplete, OnError);
					});
				}

				this.GetOffsetCb = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({f: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({f: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVideoFrameGetOffsetCb?" + params, OnComplete, OnError);
					});
				}

				this.GetOffsetCr = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({f: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({f: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVideoFrameGetOffsetCr?" + params, OnComplete, OnError);
					});
				}

				this.GetOffsetY = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({f: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({f: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVideoFrameGetOffsetY?" + params, OnComplete, OnError);
					});
				}

				this.GetPitchCb = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({f: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({f: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVideoFrameGetPitchCb?" + params, OnComplete, OnError);
					});
				}

				this.GetPitchCr = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({f: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({f: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVideoFrameGetPitchCr?" + params, OnComplete, OnError);
					});
				}

				this.GetPitchY = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({f: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({f: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVideoFrameGetPitchY?" + params, OnComplete, OnError);
					});
				}

				this.GetSize = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({f: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({f: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVideoFrameGetSize?" + params, OnComplete, OnError);
					});
				}

				this.GetSizeCb = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({f: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({f: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVideoFrameGetSizeCb?" + params, OnComplete, OnError);
					});
				}

				this.GetSizeCr = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({f: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({f: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVideoFrameGetSizeCr?" + params, OnComplete, OnError);
					});
				}

				this.GetSizeY = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({f: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({f: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVideoFrameGetSizeY?" + params, OnComplete, OnError);
					});
				}

				this.GetTimestamp = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({f: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({f: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVideoFrameGetTimestamp?" + params, OnComplete, OnError);
					});
				}

				this.GetWidth = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({f: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({f: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVideoFrameGetWidth?" + params, OnComplete, OnError);
					});
				}

				this.GetWidthCb = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({f: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({f: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVideoFrameGetWidthCb?" + params, OnComplete, OnError);
					});
				}

				this.GetWidthCr = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({f: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({f: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVideoFrameGetWidthCr?" + params, OnComplete, OnError);
					});
				}

				this.GetWidthY = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({f: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({f: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVideoFrameGetWidthY?" + params, OnComplete, OnError);
					});
				}

				this.SetTimeProperties = function(elapsedTime, timestamp) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('elapsedTime') && arguments[0].hasOwnProperty('timestamp')){
							var params = vcUtilsParam({f: this.objId, elapsedTime: arguments[0].elapsedTime, timestamp: arguments[0].timestamp});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['elapsedTime', 'timestamp'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number")){
						var params = vcUtilsParam({f: this.objId, elapsedTime: arguments[0], timestamp: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVideoFrameSetTimeProperties?" + params, OnComplete, OnError);
					});
				}

				return this;
			}

			this.CreateVidyoVirtualAudioSource = function(endpoint, name, id, configuration) {
				var args = [].slice.apply(arguments);
				if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
					if(arguments[0].hasOwnProperty('endpoint') && arguments[0].hasOwnProperty('name') && arguments[0].hasOwnProperty('id') && arguments[0].hasOwnProperty('configuration')){
						var params = vcUtilsParam({virtualAudioSource: this.objId, endpoint: (arguments[0].endpoint ? arguments[0].endpoint.objId : 0), name: arguments[0].name, id: arguments[0].id, configuration: arguments[0].configuration});
					} else {
						return Promise.reject(new MissingArgumentException('Missing Parameters', ['endpoint', 'name', 'id', 'configuration'], Object.keys(arguments[0])).error);
					}
				} else if (arguments.length === 4 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "string") && (typeof(arguments[3]) === "string")){
					var params = vcUtilsParam({virtualAudioSource: this.objId, endpoint: (arguments[0] ? arguments[0].objId : 0), name: arguments[1], id: arguments[2], configuration: arguments[3]});
				} else {
					return Promise.reject(new Error('Invalid Parameters'));
				}

				return new Promise(function(resolve, reject){
					function OnComplete(response) {
						var vidyoVirtualAudioSource = new contextObj.VidyoVirtualAudioSource(response.data.VidyoVirtualAudioSource);	// copy construct
						objects[vidyoVirtualAudioSource.objId] = vidyoVirtualAudioSource;
						resolve(vidyoVirtualAudioSource);
					}
					function OnError(response) {
						reject(Error(response));
					}
					GetRequest("VidyoVirtualAudioSourceConstruct?" + params, OnComplete, OnError);
				});
			}
			this.VidyoVirtualAudioSource = function(endpoint, name, id, configuration) {
				if(arguments.length === 1 && arguments[0].objId && arguments[0].objType && arguments[0].objType === "VidyoVirtualAudioSource"){
					vcUtilsExtend(this, arguments[0]);	//	copy construct
				} else {
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('endpoint') && arguments[0].hasOwnProperty('name') && arguments[0].hasOwnProperty('id') && arguments[0].hasOwnProperty('configuration')){
							var params = vcUtilsParam({virtualAudioSource: this.objId, endpoint: (arguments[0].endpoint ? arguments[0].endpoint.objId : 0), name: arguments[0].name, id: arguments[0].id, configuration: arguments[0].configuration});
						} else {
							throw new MissingArgumentException('Missing Parameters', ['endpoint', 'name', 'id', 'configuration'], Object.keys(arguments[0])).error;
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "string") && (typeof(arguments[3]) === "string")){
						var params = vcUtilsParam({virtualAudioSource: this.objId, endpoint: (arguments[0] ? arguments[0].objId : 0), name: arguments[1], id: arguments[2], configuration: arguments[3]});
					} else {
						throw new Error('Invalid Parameters');
					}
					var response = GetRequest("VidyoVirtualAudioSourceConstruct?" + params);
					if(response == null)
						throw new Error('No Response from VidyoClient');
					vcUtilsExtend(this, response.VidyoVirtualAudioSource);
					objects[this.objId] = this;

				}

				this.Destruct = function() {
					GetRequest("VidyoVirtualAudioSourceDestruct?" + vcUtilsParam({ virtualAudioSource: this.objId }), function(){}, function(){});
					delete objects[this.objId];
				}

				this.AddToLocalSpeaker = function(localSpeaker) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localSpeaker')){
							var params = vcUtilsParam({virtualAudioSource: this.objId, localSpeaker: (arguments[0].localSpeaker ? arguments[0].localSpeaker.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localSpeaker'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({virtualAudioSource: this.objId, localSpeaker: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVirtualAudioSourceAddToLocalSpeaker?" + params, OnComplete, OnError);
					});
				}

				this.AddToRemoteSpeaker = function(remoteSpeaker) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('remoteSpeaker')){
							var params = vcUtilsParam({virtualAudioSource: this.objId, remoteSpeaker: (arguments[0].remoteSpeaker ? arguments[0].remoteSpeaker.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['remoteSpeaker'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({virtualAudioSource: this.objId, remoteSpeaker: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVirtualAudioSourceAddToRemoteSpeaker?" + params, OnComplete, OnError);
					});
				}

				this.GetConfiguration = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({virtualAudioSource: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({virtualAudioSource: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVirtualAudioSourceGetConfiguration?" + params, OnComplete, OnError);
					});
				}

				this.GetId = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({virtualAudioSource: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({virtualAudioSource: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVirtualAudioSourceGetId?" + params, OnComplete, OnError);
					});
				}

				this.GetName = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({virtualAudioSource: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({virtualAudioSource: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVirtualAudioSourceGetName?" + params, OnComplete, OnError);
					});
				}

				this.IsSelected = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({virtualAudioSource: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({virtualAudioSource: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVirtualAudioSourceIsSelected?" + params, OnComplete, OnError);
					});
				}

				this.RegisterEventListener = function(onStart, onStop, onReconfigure, onBufferRelease) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onStart') && arguments[0].hasOwnProperty('onStop') && arguments[0].hasOwnProperty('onReconfigure') && arguments[0].hasOwnProperty('onBufferRelease')){
							this.VidyoVirtualAudioSourceStartCallback = arguments[0].onStart;
							this.VidyoVirtualAudioSourceStopCallback = arguments[0].onStop;
							this.VidyoVirtualAudioSourceReconfigureCallback = arguments[0].onReconfigure;
							this.VidyoVirtualAudioSourceExternalMediaBufferReleaseCallback = arguments[0].onBufferRelease;
							var params = vcUtilsParam({virtualAudioSource: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onStart', 'onStop', 'onReconfigure', 'onBufferRelease'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "function")){
						this.VidyoVirtualAudioSourceStartCallback = onStart;
						this.VidyoVirtualAudioSourceStopCallback = onStop;
						this.VidyoVirtualAudioSourceReconfigureCallback = onReconfigure;
						this.VidyoVirtualAudioSourceExternalMediaBufferReleaseCallback = onBufferRelease;
						var params = vcUtilsParam({virtualAudioSource: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVirtualAudioSourceRegisterEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RemoveFromLocalSpeaker = function(localSpeaker) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localSpeaker')){
							var params = vcUtilsParam({virtualAudioSource: this.objId, localSpeaker: (arguments[0].localSpeaker ? arguments[0].localSpeaker.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localSpeaker'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({virtualAudioSource: this.objId, localSpeaker: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVirtualAudioSourceRemoveFromLocalSpeaker?" + params, OnComplete, OnError);
					});
				}

				this.RemoveFromRemoteSpeaker = function(remoteSpeaker) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('remoteSpeaker')){
							var params = vcUtilsParam({virtualAudioSource: this.objId, remoteSpeaker: (arguments[0].remoteSpeaker ? arguments[0].remoteSpeaker.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['remoteSpeaker'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({virtualAudioSource: this.objId, remoteSpeaker: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVirtualAudioSourceRemoveFromRemoteSpeaker?" + params, OnComplete, OnError);
					});
				}

				this.SendFrame = function(audioFrame) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('audioFrame')){
							var params = vcUtilsParam({virtualAudioSource: this.objId, audioFrame: (arguments[0].audioFrame ? arguments[0].audioFrame.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['audioFrame'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({virtualAudioSource: this.objId, audioFrame: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							if(audioFrame&& response.data.audioFrame)
								vcUtilsExtend(audioFrame, response.data.audioFrame);
							resolve(response.data);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVirtualAudioSourceSendFrame?" + params, OnComplete, OnError);
					});
				}

				this.SendFrameWithExternalData = function(buffer, nbSamples, elapsedTime) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('buffer') && arguments[0].hasOwnProperty('nbSamples') && arguments[0].hasOwnProperty('elapsedTime')){
							var params = vcUtilsParam({virtualAudioSource: this.objId, buffer: arguments[0].buffer, nbSamples: arguments[0].nbSamples, elapsedTime: arguments[0].elapsedTime});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['buffer', 'nbSamples', 'elapsedTime'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number")){
						var params = vcUtilsParam({virtualAudioSource: this.objId, buffer: arguments[0], nbSamples: arguments[0], elapsedTime: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVirtualAudioSourceSendFrameWithExternalData?" + params, OnComplete, OnError);
					});
				}

				this.SetAudioContentShare = function(enable) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('enable')){
							var params = vcUtilsParam({virtualAudioSource: this.objId, enable: arguments[0].enable});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['enable'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({virtualAudioSource: this.objId, enable: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVirtualAudioSourceSetAudioContentShare?" + params, OnComplete, OnError);
					});
				}

				this.SetConfiguration = function(configuration) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('configuration')){
							var params = vcUtilsParam({virtualAudioSource: this.objId, configuration: arguments[0].configuration});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['configuration'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({virtualAudioSource: this.objId, configuration: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVirtualAudioSourceSetConfiguration?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({virtualAudioSource: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({virtualAudioSource: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVirtualAudioSourceUnregisterEventListener?" + params, OnComplete, OnError);
					});
				}

				return this;
			}

			this.VidyoVirtualDeviceManager = function(){

				this.Destruct = function() {
					GetRequest("VidyoVirtualDeviceManagerDestruct?" + vcUtilsParam({ obj: this.objId }), function(){}, function(){});
					delete objects[this.objId];
				}

				this.LocalCameraEvent = function(endpoint, camera, state) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('endpoint') && arguments[0].hasOwnProperty('camera') && arguments[0].hasOwnProperty('state')){
							var params = vcUtilsParam({m: this.objId, endpoint: (arguments[0].endpoint ? arguments[0].endpoint.objId : 0), camera: (arguments[0].camera ? arguments[0].camera.objId : 0), state: arguments[0].state});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['endpoint', 'camera', 'state'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "object") && (typeof(arguments[2]) === "string")){
						var params = vcUtilsParam({m: this.objId, endpoint: (arguments[0] ? arguments[0].objId : 0), camera: (arguments[1] ? arguments[1].objId : 0), state: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVirtualDeviceManagerLocalCameraEvent?" + params, OnComplete, OnError);
					});
				}

				this.LocalMicrophoneEvent = function(endpoint, microphone, state) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('endpoint') && arguments[0].hasOwnProperty('microphone') && arguments[0].hasOwnProperty('state')){
							var params = vcUtilsParam({m: this.objId, endpoint: (arguments[0].endpoint ? arguments[0].endpoint.objId : 0), microphone: (arguments[0].microphone ? arguments[0].microphone.objId : 0), state: arguments[0].state});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['endpoint', 'microphone', 'state'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "object") && (typeof(arguments[2]) === "string")){
						var params = vcUtilsParam({m: this.objId, endpoint: (arguments[0] ? arguments[0].objId : 0), microphone: (arguments[1] ? arguments[1].objId : 0), state: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVirtualDeviceManagerLocalMicrophoneEvent?" + params, OnComplete, OnError);
					});
				}

				this.LocalSpeakerEvent = function(endpoint, speaker, state) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('endpoint') && arguments[0].hasOwnProperty('speaker') && arguments[0].hasOwnProperty('state')){
							var params = vcUtilsParam({m: this.objId, endpoint: (arguments[0].endpoint ? arguments[0].endpoint.objId : 0), speaker: (arguments[0].speaker ? arguments[0].speaker.objId : 0), state: arguments[0].state});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['endpoint', 'speaker', 'state'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "object") && (typeof(arguments[2]) === "string")){
						var params = vcUtilsParam({m: this.objId, endpoint: (arguments[0] ? arguments[0].objId : 0), speaker: (arguments[1] ? arguments[1].objId : 0), state: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVirtualDeviceManagerLocalSpeakerEvent?" + params, OnComplete, OnError);
					});
				}

				this.MediaFailedEvent = function(endpoint) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('endpoint')){
							var params = vcUtilsParam({m: this.objId, endpoint: (arguments[0].endpoint ? arguments[0].endpoint.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['endpoint'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({m: this.objId, endpoint: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVirtualDeviceManagerMediaFailedEvent?" + params, OnComplete, OnError);
					});
				}

				return this;
			}

			this.VidyoVirtualShareManager = function(){

				this.Destruct = function() {
					GetRequest("VidyoVirtualShareManagerDestruct?" + vcUtilsParam({ obj: this.objId }), function(){}, function(){});
					delete objects[this.objId];
				}

				this.LocalMonitorEvent = function(endpoint, monitor, state) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('endpoint') && arguments[0].hasOwnProperty('monitor') && arguments[0].hasOwnProperty('state')){
							var params = vcUtilsParam({m: this.objId, endpoint: (arguments[0].endpoint ? arguments[0].endpoint.objId : 0), monitor: (arguments[0].monitor ? arguments[0].monitor.objId : 0), state: arguments[0].state});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['endpoint', 'monitor', 'state'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "object") && (typeof(arguments[2]) === "string")){
						var params = vcUtilsParam({m: this.objId, endpoint: (arguments[0] ? arguments[0].objId : 0), monitor: (arguments[1] ? arguments[1].objId : 0), state: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVirtualShareManagerLocalMonitorEvent?" + params, OnComplete, OnError);
					});
				}

				this.LocalWindowShareEvent = function(endpoint, windowShare, state) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('endpoint') && arguments[0].hasOwnProperty('windowShare') && arguments[0].hasOwnProperty('state')){
							var params = vcUtilsParam({m: this.objId, endpoint: (arguments[0].endpoint ? arguments[0].endpoint.objId : 0), windowShare: (arguments[0].windowShare ? arguments[0].windowShare.objId : 0), state: arguments[0].state});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['endpoint', 'windowShare', 'state'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "object") && (typeof(arguments[2]) === "string")){
						var params = vcUtilsParam({m: this.objId, endpoint: (arguments[0] ? arguments[0].objId : 0), windowShare: (arguments[1] ? arguments[1].objId : 0), state: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVirtualShareManagerLocalWindowShareEvent?" + params, OnComplete, OnError);
					});
				}

				this.MediaFailedEvent = function(endpoint) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('endpoint')){
							var params = vcUtilsParam({m: this.objId, endpoint: (arguments[0].endpoint ? arguments[0].endpoint.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['endpoint'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({m: this.objId, endpoint: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVirtualShareManagerMediaFailedEvent?" + params, OnComplete, OnError);
					});
				}

				return this;
			}

			this.CreateVidyoVirtualVideoSource = function(endpoint, type, id, name) {
				var args = [].slice.apply(arguments);
				if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
					if(arguments[0].hasOwnProperty('endpoint') && arguments[0].hasOwnProperty('type') && arguments[0].hasOwnProperty('id') && arguments[0].hasOwnProperty('name')){
						var params = vcUtilsParam({s: this.objId, endpoint: (arguments[0].endpoint ? arguments[0].endpoint.objId : 0), type: arguments[0].type, id: arguments[0].id, name: arguments[0].name});
					} else {
						return Promise.reject(new MissingArgumentException('Missing Parameters', ['endpoint', 'type', 'id', 'name'], Object.keys(arguments[0])).error);
					}
				} else if (arguments.length === 4 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "string") && (typeof(arguments[3]) === "string")){
					var params = vcUtilsParam({s: this.objId, endpoint: (arguments[0] ? arguments[0].objId : 0), type: arguments[1], id: arguments[2], name: arguments[3]});
				} else {
					return Promise.reject(new Error('Invalid Parameters'));
				}

				return new Promise(function(resolve, reject){
					function OnComplete(response) {
						var vidyoVirtualVideoSource = new contextObj.VidyoVirtualVideoSource(response.data.VidyoVirtualVideoSource);	// copy construct
						objects[vidyoVirtualVideoSource.objId] = vidyoVirtualVideoSource;
						resolve(vidyoVirtualVideoSource);
					}
					function OnError(response) {
						reject(Error(response));
					}
					GetRequest("VidyoVirtualVideoSourceConstruct?" + params, OnComplete, OnError);
				});
			}
			this.VidyoVirtualVideoSource = function(endpoint, type, id, name) {
				if(arguments.length === 1 && arguments[0].objId && arguments[0].objType && arguments[0].objType === "VidyoVirtualVideoSource"){
					vcUtilsExtend(this, arguments[0]);	//	copy construct
				} else {
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('endpoint') && arguments[0].hasOwnProperty('type') && arguments[0].hasOwnProperty('id') && arguments[0].hasOwnProperty('name')){
							var params = vcUtilsParam({s: this.objId, endpoint: (arguments[0].endpoint ? arguments[0].endpoint.objId : 0), type: arguments[0].type, id: arguments[0].id, name: arguments[0].name});
						} else {
							throw new MissingArgumentException('Missing Parameters', ['endpoint', 'type', 'id', 'name'], Object.keys(arguments[0])).error;
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "string") && (typeof(arguments[3]) === "string")){
						var params = vcUtilsParam({s: this.objId, endpoint: (arguments[0] ? arguments[0].objId : 0), type: arguments[1], id: arguments[2], name: arguments[3]});
					} else {
						throw new Error('Invalid Parameters');
					}
					var response = GetRequest("VidyoVirtualVideoSourceConstruct?" + params);
					if(response == null)
						throw new Error('No Response from VidyoClient');
					vcUtilsExtend(this, response.VidyoVirtualVideoSource);
					objects[this.objId] = this;

				}

				this.Destruct = function() {
					GetRequest("VidyoVirtualVideoSourceDestruct?" + vcUtilsParam({ obj: this.objId }), function(){}, function(){});
					delete objects[this.objId];
				}

				this.AddToLocalRenderer = function(renderer) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('renderer')){
							var params = vcUtilsParam({s: this.objId, renderer: (arguments[0].renderer ? arguments[0].renderer.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['renderer'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({s: this.objId, renderer: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVirtualVideoSourceAddToLocalRenderer?" + params, OnComplete, OnError);
					});
				}

				this.AddToRemoteRenderer = function(remoteRenderer) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('remoteRenderer')){
							var params = vcUtilsParam({s: this.objId, remoteRenderer: (arguments[0].remoteRenderer ? arguments[0].remoteRenderer.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['remoteRenderer'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({s: this.objId, remoteRenderer: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVirtualVideoSourceAddToRemoteRenderer?" + params, OnComplete, OnError);
					});
				}

				this.ClearConstraints = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({s: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({s: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVirtualVideoSourceClearConstraints?" + params, OnComplete, OnError);
					});
				}

				this.GetCurrentEncodeFrameInterval = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({s: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({s: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVirtualVideoSourceGetCurrentEncodeFrameInterval?" + params, OnComplete, OnError);
					});
				}

				this.GetId = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({s: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({s: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVirtualVideoSourceGetId?" + params, OnComplete, OnError);
					});
				}

				this.GetMediaType = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({s: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({s: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVirtualVideoSourceGetMediaType?" + params, OnComplete, OnError);
					});
				}

				this.GetName = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({s: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({s: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVirtualVideoSourceGetName?" + params, OnComplete, OnError);
					});
				}

				this.GetPreviewLabel = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({s: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({s: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVirtualVideoSourceGetPreviewLabel?" + params, OnComplete, OnError);
					});
				}

				this.GetType = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({s: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({s: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVirtualVideoSourceGetType?" + params, OnComplete, OnError);
					});
				}

				this.IsPreviewOn = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({s: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({s: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVirtualVideoSourceIsPreviewOn?" + params, OnComplete, OnError);
					});
				}

				this.IsSelected = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({s: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({s: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVirtualVideoSourceIsSelected?" + params, OnComplete, OnError);
					});
				}

				this.OnFrame = function(videoFrame, mediaFormat) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('videoFrame') && arguments[0].hasOwnProperty('mediaFormat')){
							var params = vcUtilsParam({s: this.objId, videoFrame: (arguments[0].videoFrame ? arguments[0].videoFrame.objId : 0), mediaFormat: arguments[0].mediaFormat});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['videoFrame', 'mediaFormat'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "string")){
						var params = vcUtilsParam({s: this.objId, videoFrame: (arguments[0] ? arguments[0].objId : 0), mediaFormat: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVirtualVideoSourceOnFrame?" + params, OnComplete, OnError);
					});
				}

				this.RegisterEventListener = function(onStart, onReconfigure, onStop, onBufferRelease) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onStart') && arguments[0].hasOwnProperty('onReconfigure') && arguments[0].hasOwnProperty('onStop') && arguments[0].hasOwnProperty('onBufferRelease')){
							this.VidyoVirtualVideoSourceStartCallback = arguments[0].onStart;
							this.VidyoVirtualVideoSourceReconfigureCallback = arguments[0].onReconfigure;
							this.VidyoVirtualVideoSourceStopCallback = arguments[0].onStop;
							this.VidyoVirtualVideoSourceExternalMediaBufferReleaseCallback = arguments[0].onBufferRelease;
							var params = vcUtilsParam({s: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onStart', 'onReconfigure', 'onStop', 'onBufferRelease'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "function")){
						this.VidyoVirtualVideoSourceStartCallback = onStart;
						this.VidyoVirtualVideoSourceReconfigureCallback = onReconfigure;
						this.VidyoVirtualVideoSourceStopCallback = onStop;
						this.VidyoVirtualVideoSourceExternalMediaBufferReleaseCallback = onBufferRelease;
						var params = vcUtilsParam({s: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVirtualVideoSourceRegisterEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RemoveFromLocalRenderer = function(renderer) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('renderer')){
							var params = vcUtilsParam({s: this.objId, renderer: (arguments[0].renderer ? arguments[0].renderer.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['renderer'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({s: this.objId, renderer: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVirtualVideoSourceRemoveFromLocalRenderer?" + params, OnComplete, OnError);
					});
				}

				this.RemoveFromRemoteRenderer = function(remoteRenderer) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('remoteRenderer')){
							var params = vcUtilsParam({s: this.objId, remoteRenderer: (arguments[0].remoteRenderer ? arguments[0].remoteRenderer.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['remoteRenderer'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({s: this.objId, remoteRenderer: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVirtualVideoSourceRemoveFromRemoteRenderer?" + params, OnComplete, OnError);
					});
				}

				this.SendFrameWithExternalData = function(format, buffer, size, width, height) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('format') && arguments[0].hasOwnProperty('buffer') && arguments[0].hasOwnProperty('size') && arguments[0].hasOwnProperty('width') && arguments[0].hasOwnProperty('height')){
							var params = vcUtilsParam({s: this.objId, format: arguments[0].format, buffer: arguments[0].buffer, size: arguments[0].size, width: arguments[0].width, height: arguments[0].height});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['format', 'buffer', 'size', 'width', 'height'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number")){
						var params = vcUtilsParam({s: this.objId, format: arguments[0], buffer: arguments[1], size: arguments[1], width: arguments[2], height: arguments[3]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVirtualVideoSourceSendFrameWithExternalData?" + params, OnComplete, OnError);
					});
				}

				this.SetBoundsConstraints = function(maxFrameInterval, minFrameInterval, maxWidth, minWidth, maxHeight, minHeight) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('maxFrameInterval') && arguments[0].hasOwnProperty('minFrameInterval') && arguments[0].hasOwnProperty('maxWidth') && arguments[0].hasOwnProperty('minWidth') && arguments[0].hasOwnProperty('maxHeight') && arguments[0].hasOwnProperty('minHeight')){
							var params = vcUtilsParam({s: this.objId, maxFrameInterval: arguments[0].maxFrameInterval, minFrameInterval: arguments[0].minFrameInterval, maxWidth: arguments[0].maxWidth, minWidth: arguments[0].minWidth, maxHeight: arguments[0].maxHeight, minHeight: arguments[0].minHeight});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['maxFrameInterval', 'minFrameInterval', 'maxWidth', 'minWidth', 'maxHeight', 'minHeight'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 6 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number") && (typeof(arguments[5]) === "number")){
						var params = vcUtilsParam({s: this.objId, maxFrameInterval: arguments[0], minFrameInterval: arguments[1], maxWidth: arguments[2], minWidth: arguments[3], maxHeight: arguments[4], minHeight: arguments[5]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVirtualVideoSourceSetBoundsConstraints?" + params, OnComplete, OnError);
					});
				}

				this.SetDiscreteConstraints = function(maxFrameInterval, minFrameInterval, width, height) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('maxFrameInterval') && arguments[0].hasOwnProperty('minFrameInterval') && arguments[0].hasOwnProperty('width') && arguments[0].hasOwnProperty('height')){
							var params = vcUtilsParam({s: this.objId, maxFrameInterval: arguments[0].maxFrameInterval, minFrameInterval: arguments[0].minFrameInterval, width: arguments[0].width, height: arguments[0].height});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['maxFrameInterval', 'minFrameInterval', 'width', 'height'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number")){
						var params = vcUtilsParam({s: this.objId, maxFrameInterval: arguments[0], minFrameInterval: arguments[1], width: arguments[2], height: arguments[3]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVirtualVideoSourceSetDiscreteConstraints?" + params, OnComplete, OnError);
					});
				}

				this.SetLowLatencyProfile = function(profile) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('profile')){
							var params = vcUtilsParam({s: this.objId, profile: arguments[0].profile});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['profile'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({s: this.objId, profile: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVirtualVideoSourceSetLowLatencyProfile?" + params, OnComplete, OnError);
					});
				}

				this.SetMinFrameInterval = function(frameInterval) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('frameInterval')){
							var params = vcUtilsParam({s: this.objId, frameInterval: arguments[0].frameInterval});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['frameInterval'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({s: this.objId, frameInterval: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVirtualVideoSourceSetMinFrameInterval?" + params, OnComplete, OnError);
					});
				}

				this.SetPreviewLabel = function(previewLabel) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('previewLabel')){
							var params = vcUtilsParam({s: this.objId, previewLabel: arguments[0].previewLabel});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['previewLabel'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({s: this.objId, previewLabel: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVirtualVideoSourceSetPreviewLabel?" + params, OnComplete, OnError);
					});
				}

				this.SetStreamParametersInLocalRenderer = function(localRenderer, width, height, frameInterval) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localRenderer') && arguments[0].hasOwnProperty('width') && arguments[0].hasOwnProperty('height') && arguments[0].hasOwnProperty('frameInterval')){
							var params = vcUtilsParam({s: this.objId, localRenderer: (arguments[0].localRenderer ? arguments[0].localRenderer.objId : 0), width: arguments[0].width, height: arguments[0].height, frameInterval: arguments[0].frameInterval});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localRenderer', 'width', 'height', 'frameInterval'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number")){
						var params = vcUtilsParam({s: this.objId, localRenderer: (arguments[0] ? arguments[0].objId : 0), width: arguments[1], height: arguments[2], frameInterval: arguments[3]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoVirtualVideoSourceSetStreamParametersInLocalRenderer?" + params, OnComplete, OnError);
					});
				}

				return this;
			}

			this.CreateVidyoApplication = function(endpoint) {
				var args = [].slice.apply(arguments);
				if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
					if(arguments[0].hasOwnProperty('endpoint')){
						var params = vcUtilsParam({application: this.objId, endpoint: (arguments[0].endpoint ? arguments[0].endpoint.objId : 0)});
					} else {
						return Promise.reject(new MissingArgumentException('Missing Parameters', ['endpoint'], Object.keys(arguments[0])).error);
					}
				} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
					var params = vcUtilsParam({application: this.objId, endpoint: (arguments[0] ? arguments[0].objId : 0)});
				} else {
					return Promise.reject(new Error('Invalid Parameters'));
				}

				return new Promise(function(resolve, reject){
					function OnComplete(response) {
						var vidyoApplication = new contextObj.VidyoApplication(response.data.VidyoApplication);	// copy construct
						objects[vidyoApplication.objId] = vidyoApplication;
						resolve(vidyoApplication);
					}
					function OnError(response) {
						reject(Error(response));
					}
					GetRequest("VidyoApplicationConstruct?" + params, OnComplete, OnError);
				});
			}
			this.VidyoApplication = function(endpoint) {
				if(arguments.length === 1 && arguments[0].objId && arguments[0].objType && arguments[0].objType === "VidyoApplication"){
					vcUtilsExtend(this, arguments[0]);	//	copy construct
				} else {
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('endpoint')){
							var params = vcUtilsParam({application: this.objId, endpoint: (arguments[0].endpoint ? arguments[0].endpoint.objId : 0)});
						} else {
							throw new MissingArgumentException('Missing Parameters', ['endpoint'], Object.keys(arguments[0])).error;
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({application: this.objId, endpoint: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						throw new Error('Invalid Parameters');
					}
					var response = GetRequest("VidyoApplicationConstruct?" + params);
					if(response == null)
						throw new Error('No Response from VidyoClient');
					vcUtilsExtend(this, response.VidyoApplication);
					objects[this.objId] = this;

				}

				this.Destruct = function() {
					GetRequest("VidyoApplicationDestruct?" + vcUtilsParam({ obj: this.objId }), function(){}, function(){});
					delete objects[this.objId];
				}

				this.RegisterUpdaterEventListener = function(onDownloadCompleted, onDownloadFailed) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onDownloadCompleted') && arguments[0].hasOwnProperty('onDownloadFailed')){
							this.VidyoApplicationDownloadCompletedCallback = arguments[0].onDownloadCompleted;
							this.VidyoApplicationDownloadFailedCallback = arguments[0].onDownloadFailed;
							var params = vcUtilsParam({app: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onDownloadCompleted', 'onDownloadFailed'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function")){
						this.VidyoApplicationDownloadCompletedCallback = onDownloadCompleted;
						this.VidyoApplicationDownloadFailedCallback = onDownloadFailed;
						var params = vcUtilsParam({app: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoApplicationRegisterUpdaterEventListener?" + params, OnComplete, OnError);
					});
				}

				this.SetWebProxyCredentials = function(webProxyUserName, webProxyPassword) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('webProxyUserName') && arguments[0].hasOwnProperty('webProxyPassword')){
							var params = vcUtilsParam({app: this.objId, webProxyUserName: arguments[0].webProxyUserName, webProxyPassword: arguments[0].webProxyPassword});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['webProxyUserName', 'webProxyPassword'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string")){
						var params = vcUtilsParam({app: this.objId, webProxyUserName: arguments[0], webProxyPassword: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoApplicationSetWebProxyCredentials?" + params, OnComplete, OnError);
					});
				}

				this.StartUpdateService = function(currentVersion, workingDirectory, server, caFilePath, webProxyUsername, webProxyPassword) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('currentVersion') && arguments[0].hasOwnProperty('workingDirectory') && arguments[0].hasOwnProperty('server') && arguments[0].hasOwnProperty('caFilePath') && arguments[0].hasOwnProperty('webProxyUsername') && arguments[0].hasOwnProperty('webProxyPassword')){
							var params = vcUtilsParam({app: this.objId, currentVersion: arguments[0].currentVersion, workingDirectory: arguments[0].workingDirectory, server: arguments[0].server, caFilePath: arguments[0].caFilePath, webProxyUsername: arguments[0].webProxyUsername, webProxyPassword: arguments[0].webProxyPassword});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['currentVersion', 'workingDirectory', 'server', 'caFilePath', 'webProxyUsername', 'webProxyPassword'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 6 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "string") && (typeof(arguments[3]) === "string") && (typeof(arguments[4]) === "string") && (typeof(arguments[5]) === "string")){
						var params = vcUtilsParam({app: this.objId, currentVersion: arguments[0], workingDirectory: arguments[1], server: arguments[2], caFilePath: arguments[3], webProxyUsername: arguments[4], webProxyPassword: arguments[5]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoApplicationStartUpdateService?" + params, OnComplete, OnError);
					});
				}

				this.StopUpdateService = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({app: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({app: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoApplicationStopUpdateService?" + params, OnComplete, OnError);
					});
				}

				return this;
			}

			this.VidyoCall = function(){

				this.Destruct = function() {
					GetRequest("VidyoCallDestruct?" + vcUtilsParam({ obj: this.objId }), function(){}, function(){});
					delete objects[this.objId];
				}

				this.Accept = function(onInitiated, onEnded) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onInitiated') && arguments[0].hasOwnProperty('onEnded')){
							this.VidyoCallOnInitiated = arguments[0].onInitiated;
							this.VidyoCallOnEnded = arguments[0].onEnded;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onInitiated', 'onEnded'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function")){
						this.VidyoCallOnInitiated = onInitiated;
						this.VidyoCallOnEnded = onEnded;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoCallAccept?" + params, OnComplete, OnError);
					});
				}

				this.GetId = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoCallGetId?" + params, OnComplete, OnError);
					});
				}

				this.GetSubject = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoCallGetSubject?" + params, OnComplete, OnError);
					});
				}

				this.GetUser = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoCallGetUser?" + params, OnComplete, OnError);
					});
				}

				this.HangUp = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoCallHangUp?" + params, OnComplete, OnError);
					});
				}

				this.Initiate = function(onInitiated, onEnded) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onInitiated') && arguments[0].hasOwnProperty('onEnded')){
							this.VidyoCallOnInitiated = arguments[0].onInitiated;
							this.VidyoCallOnEnded = arguments[0].onEnded;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onInitiated', 'onEnded'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function")){
						this.VidyoCallOnInitiated = onInitiated;
						this.VidyoCallOnEnded = onEnded;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoCallInitiate?" + params, OnComplete, OnError);
					});
				}

				this.RegisterMessageEventListener = function(onMessageReceived, onMessageAcknowledged, onMessageRead, onMessageTypingIndication) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onMessageReceived') && arguments[0].hasOwnProperty('onMessageAcknowledged') && arguments[0].hasOwnProperty('onMessageRead') && arguments[0].hasOwnProperty('onMessageTypingIndication')){
							this.VidyoCallOnMessageReceived = arguments[0].onMessageReceived;
							this.VidyoCallOnMessageAcknowledged = arguments[0].onMessageAcknowledged;
							this.VidyoCallOnMessageRead = arguments[0].onMessageRead;
							this.VidyoCallOnMessageTypingIndication = arguments[0].onMessageTypingIndication;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onMessageReceived', 'onMessageAcknowledged', 'onMessageRead', 'onMessageTypingIndication'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "function")){
						this.VidyoCallOnMessageReceived = onMessageReceived;
						this.VidyoCallOnMessageAcknowledged = onMessageAcknowledged;
						this.VidyoCallOnMessageRead = onMessageRead;
						this.VidyoCallOnMessageTypingIndication = onMessageTypingIndication;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoCallRegisterMessageEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterSubjectEventListener = function(onSetSubject) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onSetSubject')){
							this.VidyoCallOnSetSubject = arguments[0].onSetSubject;
							var params = vcUtilsParam({c: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onSetSubject'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoCallOnSetSubject = onSetSubject;
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoCallRegisterSubjectEventListener?" + params, OnComplete, OnError);
					});
				}

				this.Reject = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({c: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({c: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoCallReject?" + params, OnComplete, OnError);
					});
				}

				this.SendMessage = function(message) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('message')){
							var params = vcUtilsParam({c: this.objId, message: arguments[0].message});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['message'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({c: this.objId, message: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoCallSendMessage?" + params, OnComplete, OnError);
					});
				}

				this.SetSubject = function(subject) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('subject')){
							var params = vcUtilsParam({c: this.objId, subject: arguments[0].subject});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['subject'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({c: this.objId, subject: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoCallSetSubject?" + params, OnComplete, OnError);
					});
				}

				return this;
			}

			this.CreateVidyoEndpoint = function(viewId, viewStyle, remoteParticipants, consoleLogFilter, logFileFilter, logFileName) {
				var args = [].slice.apply(arguments);
				if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
					if(arguments[0].hasOwnProperty('viewId') && arguments[0].hasOwnProperty('viewStyle') && arguments[0].hasOwnProperty('remoteParticipants') && arguments[0].hasOwnProperty('consoleLogFilter') && arguments[0].hasOwnProperty('logFileFilter') && arguments[0].hasOwnProperty('logFileName')){
						arguments[0].viewId = UpdateViewOnDOM({uiEvent:"create", viewId:arguments[0].viewId, viewStyle:arguments[0].viewStyle, remoteParticipants:arguments[0].remoteParticipants, consoleLogFilter:arguments[0].consoleLogFilter, logFileFilter:arguments[0].logFileFilter, logFileName:arguments[0].logFileName});
						var params = vcUtilsParam({e: this.objId, viewId: arguments[0].viewId, viewStyle: arguments[0].viewStyle, remoteParticipants: arguments[0].remoteParticipants, consoleLogFilter: arguments[0].consoleLogFilter, logFileFilter: arguments[0].logFileFilter, logFileName: arguments[0].logFileName});
					} else {
						return Promise.reject(new MissingArgumentException('Missing Parameters', ['viewId', 'viewStyle', 'remoteParticipants', 'consoleLogFilter', 'logFileFilter', 'logFileName'], Object.keys(arguments[0])).error);
					}
				} else if (arguments.length === 6 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "string") && (typeof(arguments[4]) === "string") && (typeof(arguments[5]) === "string")){
					arguments[0] = UpdateViewOnDOM({uiEvent:"create", viewId:viewId, viewStyle:viewStyle, remoteParticipants:remoteParticipants, consoleLogFilter:consoleLogFilter, logFileFilter:logFileFilter, logFileName:logFileName});
					var params = vcUtilsParam({e: this.objId, viewId: arguments[0], viewStyle: arguments[1], remoteParticipants: arguments[2], consoleLogFilter: arguments[3], logFileFilter: arguments[4], logFileName: arguments[5]});
				} else {
					return Promise.reject(new Error('Invalid Parameters'));
				}

				return new Promise(function(resolve, reject){
					function OnComplete(response) {
						var vidyoEndpoint = new contextObj.VidyoEndpoint(response.data.VidyoEndpoint);	// copy construct
						objects[vidyoEndpoint.objId] = vidyoEndpoint;
						resolve(vidyoEndpoint);
					}
					function OnError(response) {
						reject(Error(response));
					}
					GetRequest("VidyoEndpointConstruct?" + params, OnComplete, OnError);
				});
			}
			this.VidyoEndpoint = function(viewId, viewStyle, remoteParticipants, consoleLogFilter, logFileFilter, logFileName) {
				if(arguments.length === 1 && arguments[0].objId && arguments[0].objType && arguments[0].objType === "VidyoEndpoint"){
					vcUtilsExtend(this, arguments[0]);	//	copy construct
				} else {
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('viewId') && arguments[0].hasOwnProperty('viewStyle') && arguments[0].hasOwnProperty('remoteParticipants') && arguments[0].hasOwnProperty('consoleLogFilter') && arguments[0].hasOwnProperty('logFileFilter') && arguments[0].hasOwnProperty('logFileName')){
							arguments[0].viewId = UpdateViewOnDOM({uiEvent:"constructor", viewId:arguments[0].viewId, viewStyle:arguments[0].viewStyle, remoteParticipants:arguments[0].remoteParticipants, consoleLogFilter:arguments[0].consoleLogFilter, logFileFilter:arguments[0].logFileFilter, logFileName:arguments[0].logFileName});
							var params = vcUtilsParam({e: this.objId, viewId: arguments[0].viewId, viewStyle: arguments[0].viewStyle, remoteParticipants: arguments[0].remoteParticipants, consoleLogFilter: arguments[0].consoleLogFilter, logFileFilter: arguments[0].logFileFilter, logFileName: arguments[0].logFileName});
						} else {
							throw new MissingArgumentException('Missing Parameters', ['viewId', 'viewStyle', 'remoteParticipants', 'consoleLogFilter', 'logFileFilter', 'logFileName'], Object.keys(arguments[0])).error;
						}
					} else if (arguments.length === 6 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "string") && (typeof(arguments[4]) === "string") && (typeof(arguments[5]) === "string")){
						arguments[0] = UpdateViewOnDOM({uiEvent:"constructor", viewId:viewId, viewStyle:viewStyle, remoteParticipants:remoteParticipants, consoleLogFilter:consoleLogFilter, logFileFilter:logFileFilter, logFileName:logFileName});
						var params = vcUtilsParam({e: this.objId, viewId: arguments[0], viewStyle: arguments[1], remoteParticipants: arguments[2], consoleLogFilter: arguments[3], logFileFilter: arguments[4], logFileName: arguments[5]});
					} else {
						throw new Error('Invalid Parameters');
					}
					var response = GetRequest("VidyoEndpointConstruct?" + params);
					if(response == null)
						throw new Error('No Response from VidyoClient');
					vcUtilsExtend(this, response.VidyoEndpoint);
					objects[this.objId] = this;

				}

				this.Destruct = function() {
					GetRequest("VidyoEndpointDestruct?" + vcUtilsParam({ obj: this.objId }), function(){}, function(){});
					delete objects[this.objId];
				}

				this.AddAudioDeviceToWhitelist = function(deviceName) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('deviceName')){
							var params = vcUtilsParam({e: this.objId, deviceName: arguments[0].deviceName});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['deviceName'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({e: this.objId, deviceName: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointAddAudioDeviceToWhitelist?" + params, OnComplete, OnError);
					});
				}

				this.AddMessageClass = function(messageClass) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('messageClass')){
							var params = vcUtilsParam({e: this.objId, messageClass: arguments[0].messageClass});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['messageClass'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({e: this.objId, messageClass: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointAddMessageClass?" + params, OnComplete, OnError);
					});
				}

				this.AppLog = function(logLevel, logMsg) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('logLevel') && arguments[0].hasOwnProperty('logMsg')){
							var params = vcUtilsParam({e: this.objId, logLevel: arguments[0].logLevel, logMsg: arguments[0].logMsg});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['logLevel', 'logMsg'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string")){
						var params = vcUtilsParam({e: this.objId, logLevel: arguments[0], logMsg: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointAppLog?" + params, OnComplete, OnError);
					});
				}

				this.AssignViewToCompositeRenderer = function(viewId, viewStyle, remoteParticipants) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('viewId') && arguments[0].hasOwnProperty('viewStyle') && arguments[0].hasOwnProperty('remoteParticipants')){
							arguments[0].viewId = UpdateViewOnDOM({uiEvent:"AssignViewToCompositeRenderer", viewId:arguments[0].viewId, viewStyle:arguments[0].viewStyle, remoteParticipants:arguments[0].remoteParticipants});
							var params = vcUtilsParam({e: this.objId, viewId: arguments[0].viewId, viewStyle: arguments[0].viewStyle, remoteParticipants: arguments[0].remoteParticipants});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['viewId', 'viewStyle', 'remoteParticipants'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "number")){
						arguments[0] = UpdateViewOnDOM({uiEvent:"AssignViewToCompositeRenderer", viewId:viewId, viewStyle:viewStyle, remoteParticipants:remoteParticipants});
						var params = vcUtilsParam({e: this.objId, viewId: arguments[0], viewStyle: arguments[1], remoteParticipants: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointAssignViewToCompositeRenderer?" + params, OnComplete, OnError);
					});
				}

				this.AssignViewToLocalCamera = function(viewId, localCamera, displayCropped, allowZoom) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('viewId') && arguments[0].hasOwnProperty('localCamera') && arguments[0].hasOwnProperty('displayCropped') && arguments[0].hasOwnProperty('allowZoom')){
							arguments[0].viewId = UpdateViewOnDOM({uiEvent:"AssignViewToLocalCamera", viewId:arguments[0].viewId, localCamera:arguments[0].localCamera, displayCropped:arguments[0].displayCropped, allowZoom:arguments[0].allowZoom});
							var params = vcUtilsParam({e: this.objId, viewId: arguments[0].viewId, localCamera: (arguments[0].localCamera ? arguments[0].localCamera.objId : 0), displayCropped: arguments[0].displayCropped, allowZoom: arguments[0].allowZoom});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['viewId', 'localCamera', 'displayCropped', 'allowZoom'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "object") && (typeof(arguments[2]) === "boolean") && (typeof(arguments[3]) === "boolean")){
						arguments[0] = UpdateViewOnDOM({uiEvent:"AssignViewToLocalCamera", viewId:viewId, localCamera:localCamera, displayCropped:displayCropped, allowZoom:allowZoom});
						var params = vcUtilsParam({e: this.objId, viewId: arguments[0], localCamera: (arguments[1] ? arguments[1].objId : 0), displayCropped: arguments[2], allowZoom: arguments[3]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointAssignViewToLocalCamera?" + params, OnComplete, OnError);
					});
				}

				this.AssignViewToLocalMonitor = function(viewId, localMonitor, displayCropped, allowZoom) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('viewId') && arguments[0].hasOwnProperty('localMonitor') && arguments[0].hasOwnProperty('displayCropped') && arguments[0].hasOwnProperty('allowZoom')){
							arguments[0].viewId = UpdateViewOnDOM({uiEvent:"AssignViewToLocalMonitor", viewId:arguments[0].viewId, localMonitor:arguments[0].localMonitor, displayCropped:arguments[0].displayCropped, allowZoom:arguments[0].allowZoom});
							var params = vcUtilsParam({e: this.objId, viewId: arguments[0].viewId, localMonitor: (arguments[0].localMonitor ? arguments[0].localMonitor.objId : 0), displayCropped: arguments[0].displayCropped, allowZoom: arguments[0].allowZoom});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['viewId', 'localMonitor', 'displayCropped', 'allowZoom'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "object") && (typeof(arguments[2]) === "boolean") && (typeof(arguments[3]) === "boolean")){
						arguments[0] = UpdateViewOnDOM({uiEvent:"AssignViewToLocalMonitor", viewId:viewId, localMonitor:localMonitor, displayCropped:displayCropped, allowZoom:allowZoom});
						var params = vcUtilsParam({e: this.objId, viewId: arguments[0], localMonitor: (arguments[1] ? arguments[1].objId : 0), displayCropped: arguments[2], allowZoom: arguments[3]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							if(localMonitor&& response.data.localMonitor)
								vcUtilsExtend(localMonitor, response.data.localMonitor);
							resolve(response.data);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointAssignViewToLocalMonitor?" + params, OnComplete, OnError);
					});
				}

				this.AssignViewToLocalWindowShare = function(viewId, localWindowShare, displayCropped, allowZoom) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('viewId') && arguments[0].hasOwnProperty('localWindowShare') && arguments[0].hasOwnProperty('displayCropped') && arguments[0].hasOwnProperty('allowZoom')){
							arguments[0].viewId = UpdateViewOnDOM({uiEvent:"AssignViewToLocalWindowShare", viewId:arguments[0].viewId, localWindowShare:arguments[0].localWindowShare, displayCropped:arguments[0].displayCropped, allowZoom:arguments[0].allowZoom});
							var params = vcUtilsParam({e: this.objId, viewId: arguments[0].viewId, localWindowShare: (arguments[0].localWindowShare ? arguments[0].localWindowShare.objId : 0), displayCropped: arguments[0].displayCropped, allowZoom: arguments[0].allowZoom});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['viewId', 'localWindowShare', 'displayCropped', 'allowZoom'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "object") && (typeof(arguments[2]) === "boolean") && (typeof(arguments[3]) === "boolean")){
						arguments[0] = UpdateViewOnDOM({uiEvent:"AssignViewToLocalWindowShare", viewId:viewId, localWindowShare:localWindowShare, displayCropped:displayCropped, allowZoom:allowZoom});
						var params = vcUtilsParam({e: this.objId, viewId: arguments[0], localWindowShare: (arguments[1] ? arguments[1].objId : 0), displayCropped: arguments[2], allowZoom: arguments[3]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							if(localWindowShare&& response.data.localWindowShare)
								vcUtilsExtend(localWindowShare, response.data.localWindowShare);
							resolve(response.data);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointAssignViewToLocalWindowShare?" + params, OnComplete, OnError);
					});
				}

				this.AssignViewToRemoteCamera = function(viewId, remoteCamera, displayCropped, allowZoom) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('viewId') && arguments[0].hasOwnProperty('remoteCamera') && arguments[0].hasOwnProperty('displayCropped') && arguments[0].hasOwnProperty('allowZoom')){
							arguments[0].viewId = UpdateViewOnDOM({uiEvent:"AssignViewToRemoteCamera", viewId:arguments[0].viewId, remoteCamera:arguments[0].remoteCamera, displayCropped:arguments[0].displayCropped, allowZoom:arguments[0].allowZoom});
							var params = vcUtilsParam({e: this.objId, viewId: arguments[0].viewId, remoteCamera: (arguments[0].remoteCamera ? arguments[0].remoteCamera.objId : 0), displayCropped: arguments[0].displayCropped, allowZoom: arguments[0].allowZoom});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['viewId', 'remoteCamera', 'displayCropped', 'allowZoom'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "object") && (typeof(arguments[2]) === "boolean") && (typeof(arguments[3]) === "boolean")){
						arguments[0] = UpdateViewOnDOM({uiEvent:"AssignViewToRemoteCamera", viewId:viewId, remoteCamera:remoteCamera, displayCropped:displayCropped, allowZoom:allowZoom});
						var params = vcUtilsParam({e: this.objId, viewId: arguments[0], remoteCamera: (arguments[1] ? arguments[1].objId : 0), displayCropped: arguments[2], allowZoom: arguments[3]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointAssignViewToRemoteCamera?" + params, OnComplete, OnError);
					});
				}

				this.AssignViewToRemoteWindowShare = function(viewId, remoteWindowShare, displayCropped, allowZoom) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('viewId') && arguments[0].hasOwnProperty('remoteWindowShare') && arguments[0].hasOwnProperty('displayCropped') && arguments[0].hasOwnProperty('allowZoom')){
							arguments[0].viewId = UpdateViewOnDOM({uiEvent:"AssignViewToRemoteWindowShare", viewId:arguments[0].viewId, remoteWindowShare:arguments[0].remoteWindowShare, displayCropped:arguments[0].displayCropped, allowZoom:arguments[0].allowZoom});
							var params = vcUtilsParam({e: this.objId, viewId: arguments[0].viewId, remoteWindowShare: (arguments[0].remoteWindowShare ? arguments[0].remoteWindowShare.objId : 0), displayCropped: arguments[0].displayCropped, allowZoom: arguments[0].allowZoom});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['viewId', 'remoteWindowShare', 'displayCropped', 'allowZoom'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "object") && (typeof(arguments[2]) === "boolean") && (typeof(arguments[3]) === "boolean")){
						arguments[0] = UpdateViewOnDOM({uiEvent:"AssignViewToRemoteWindowShare", viewId:viewId, remoteWindowShare:remoteWindowShare, displayCropped:displayCropped, allowZoom:allowZoom});
						var params = vcUtilsParam({e: this.objId, viewId: arguments[0], remoteWindowShare: (arguments[1] ? arguments[1].objId : 0), displayCropped: arguments[2], allowZoom: arguments[3]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointAssignViewToRemoteWindowShare?" + params, OnComplete, OnError);
					});
				}

				this.AssignViewToVirtualVideoSource = function(viewId, virtualVideoSource, displayCropped, allowZoom) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('viewId') && arguments[0].hasOwnProperty('virtualVideoSource') && arguments[0].hasOwnProperty('displayCropped') && arguments[0].hasOwnProperty('allowZoom')){
							arguments[0].viewId = UpdateViewOnDOM({uiEvent:"AssignViewToVirtualVideoSource", viewId:arguments[0].viewId, virtualVideoSource:arguments[0].virtualVideoSource, displayCropped:arguments[0].displayCropped, allowZoom:arguments[0].allowZoom});
							var params = vcUtilsParam({e: this.objId, viewId: arguments[0].viewId, virtualVideoSource: (arguments[0].virtualVideoSource ? arguments[0].virtualVideoSource.objId : 0), displayCropped: arguments[0].displayCropped, allowZoom: arguments[0].allowZoom});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['viewId', 'virtualVideoSource', 'displayCropped', 'allowZoom'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "object") && (typeof(arguments[2]) === "boolean") && (typeof(arguments[3]) === "boolean")){
						arguments[0] = UpdateViewOnDOM({uiEvent:"AssignViewToVirtualVideoSource", viewId:viewId, virtualVideoSource:virtualVideoSource, displayCropped:displayCropped, allowZoom:allowZoom});
						var params = vcUtilsParam({e: this.objId, viewId: arguments[0], virtualVideoSource: (arguments[1] ? arguments[1].objId : 0), displayCropped: arguments[2], allowZoom: arguments[3]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointAssignViewToVirtualVideoSource?" + params, OnComplete, OnError);
					});
				}

				this.CompressLogs = function(compressedFileName, onComplete) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('compressedFileName') && arguments[0].hasOwnProperty('onComplete')){
							this.VidyoEndpointOnLogCompressionComplete = arguments[0].onComplete;
							var params = vcUtilsParam({e: this.objId, compressedFileName: arguments[0].compressedFileName});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['compressedFileName', 'onComplete'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "function")){
						this.VidyoEndpointOnLogCompressionComplete = onComplete;
						var params = vcUtilsParam({e: this.objId, compressedFileName: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointCompressLogs?" + params, OnComplete, OnError);
					});
				}

				this.CreateRenderer = function(monitor, width, height) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('monitor') && arguments[0].hasOwnProperty('width') && arguments[0].hasOwnProperty('height')){
							var params = vcUtilsParam({e: this.objId, monitor: (arguments[0].monitor ? arguments[0].monitor.objId : 0), width: arguments[0].width, height: arguments[0].height});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['monitor', 'width', 'height'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number")){
						var params = vcUtilsParam({e: this.objId, monitor: (arguments[0] ? arguments[0].objId : 0), width: arguments[1], height: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointCreateRenderer?" + params, OnComplete, OnError);
					});
				}

				this.CreateRendererFromViewId = function(viewId, x, y, width, height) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('viewId') && arguments[0].hasOwnProperty('x') && arguments[0].hasOwnProperty('y') && arguments[0].hasOwnProperty('width') && arguments[0].hasOwnProperty('height')){
							arguments[0].viewId = UpdateViewOnDOM({uiEvent:"CreateRendererFromViewId", viewId:arguments[0].viewId, x:arguments[0].x, y:arguments[0].y, width:arguments[0].width, height:arguments[0].height});
							var params = vcUtilsParam({e: this.objId, viewId: arguments[0].viewId, x: arguments[0].x, y: arguments[0].y, width: arguments[0].width, height: arguments[0].height});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['viewId', 'x', 'y', 'width', 'height'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 5 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number")){
						arguments[0] = UpdateViewOnDOM({uiEvent:"CreateRendererFromViewId", viewId:viewId, x:x, y:y, width:width, height:height});
						var params = vcUtilsParam({e: this.objId, viewId: arguments[0], x: arguments[1], y: arguments[2], width: arguments[3], height: arguments[4]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointCreateRendererFromViewId?" + params, OnComplete, OnError);
					});
				}

				this.CreateRendererMultiScreen = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointCreateRendererMultiScreen?" + params, OnComplete, OnError);
					});
				}

				this.CreateVirtualAudioSource = function(name, id, configuration) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('name') && arguments[0].hasOwnProperty('id') && arguments[0].hasOwnProperty('configuration')){
							var params = vcUtilsParam({e: this.objId, name: arguments[0].name, id: arguments[0].id, configuration: arguments[0].configuration});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['name', 'id', 'configuration'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "string")){
						var params = vcUtilsParam({e: this.objId, name: arguments[0], id: arguments[1], configuration: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointCreateVirtualAudioSource?" + params, OnComplete, OnError);
					});
				}

				this.CreateVirtualVideoSource = function(type, id, name) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('type') && arguments[0].hasOwnProperty('id') && arguments[0].hasOwnProperty('name')){
							var params = vcUtilsParam({e: this.objId, type: arguments[0].type, id: arguments[0].id, name: arguments[0].name});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['type', 'id', 'name'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "string")){
						var params = vcUtilsParam({e: this.objId, type: arguments[0], id: arguments[1], name: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointCreateVirtualVideoSource?" + params, OnComplete, OnError);
					});
				}

				this.CycleCamera = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointCycleCamera?" + params, OnComplete, OnError);
					});
				}

				this.CycleMicrophone = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointCycleMicrophone?" + params, OnComplete, OnError);
					});
				}

				this.CycleSpeaker = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointCycleSpeaker?" + params, OnComplete, OnError);
					});
				}

				this.DestroyVirtualAudioSource = function(virtualAudioSource) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('virtualAudioSource')){
							var params = vcUtilsParam({e: this.objId, virtualAudioSource: (arguments[0].virtualAudioSource ? arguments[0].virtualAudioSource.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['virtualAudioSource'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({e: this.objId, virtualAudioSource: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointDestroyVirtualAudioSource?" + params, OnComplete, OnError);
					});
				}

				this.DestroyVirtualVideoSource = function(virtualVideoSource) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('virtualVideoSource')){
							var params = vcUtilsParam({e: this.objId, virtualVideoSource: (arguments[0].virtualVideoSource ? arguments[0].virtualVideoSource.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['virtualVideoSource'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({e: this.objId, virtualVideoSource: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							if(virtualVideoSource&& response.data.virtualVideoSource)
								vcUtilsExtend(virtualVideoSource, response.data.virtualVideoSource);
							resolve(response.data);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointDestroyVirtualVideoSource?" + params, OnComplete, OnError);
					});
				}

				this.Disable = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointDisable?" + params, OnComplete, OnError);
					});
				}

				this.DisableDebug = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointDisableDebug?" + params, OnComplete, OnError);
					});
				}

				this.EnableDebug = function(port, logFilter) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('port') && arguments[0].hasOwnProperty('logFilter')){
							var params = vcUtilsParam({e: this.objId, port: arguments[0].port, logFilter: arguments[0].logFilter});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['port', 'logFilter'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "string")){
						var params = vcUtilsParam({e: this.objId, port: arguments[0], logFilter: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointEnableDebug?" + params, OnComplete, OnError);
					});
				}

				this.EnableFileLogger = function(logFileName, logFileFilter) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('logFileName') && arguments[0].hasOwnProperty('logFileFilter')){
							var params = vcUtilsParam({e: this.objId, logFileName: arguments[0].logFileName, logFileFilter: arguments[0].logFileFilter});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['logFileName', 'logFileFilter'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string")){
						var params = vcUtilsParam({e: this.objId, logFileName: arguments[0], logFileFilter: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointEnableFileLogger?" + params, OnComplete, OnError);
					});
				}

				this.GetActiveNetworkInterface = function(onGetActiveNetworkInterfaceCallback) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onGetActiveNetworkInterfaceCallback')){
							this.VidyoEndpointOnGetActiveNetworkInterface = arguments[0].onGetActiveNetworkInterfaceCallback;
							var params = vcUtilsParam({e: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onGetActiveNetworkInterfaceCallback'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoEndpointOnGetActiveNetworkInterface = onGetActiveNetworkInterfaceCallback;
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointGetActiveNetworkInterface?" + params, OnComplete, OnError);
					});
				}

				this.GetApplicationTag = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointGetApplicationTag?" + params, OnComplete, OnError);
					});
				}

				this.GetAudioBitrateMultiplier = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointGetAudioBitrateMultiplier?" + params, OnComplete, OnError);
					});
				}

				this.GetAudioMode = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointGetAudioMode?" + params, OnComplete, OnError);
					});
				}

				this.GetAudioPacketInterval = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointGetAudioPacketInterval?" + params, OnComplete, OnError);
					});
				}

				this.GetAudioPacketLossPercentage = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointGetAudioPacketLossPercentage?" + params, OnComplete, OnError);
					});
				}

				this.GetAutoReconnect = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointGetAutoReconnect?" + params, OnComplete, OnError);
					});
				}

				this.GetAutoReconnectAttemptBackOff = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointGetAutoReconnectAttemptBackOff?" + params, OnComplete, OnError);
					});
				}

				this.GetAutoReconnectMaxAttempts = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointGetAutoReconnectMaxAttempts?" + params, OnComplete, OnError);
					});
				}

				this.GetAutoReconnectSetting = function(onGetAutoReconnectSettingCallback) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onGetAutoReconnectSettingCallback')){
							this.VidyoEndpointOnGetAutoReconnectSetting = arguments[0].onGetAutoReconnectSettingCallback;
							var params = vcUtilsParam({e: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onGetAutoReconnectSettingCallback'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoEndpointOnGetAutoReconnectSetting = onGetAutoReconnectSettingCallback;
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointGetAutoReconnectSetting?" + params, OnComplete, OnError);
					});
				}

				this.GetCameraBackgroundEffect = function(onGetEffectInfo) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onGetEffectInfo')){
							this.VidyoEndpointOnGetCameraBackgroundEffectInfo = arguments[0].onGetEffectInfo;
							var params = vcUtilsParam({e: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onGetEffectInfo'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoEndpointOnGetCameraBackgroundEffectInfo = onGetEffectInfo;
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointGetCameraBackgroundEffect?" + params, OnComplete, OnError);
					});
				}

				this.GetConferenceNumber = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointGetConferenceNumber?" + params, OnComplete, OnError);
					});
				}

				this.GetCpuTradeOffProfile = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointGetCpuTradeOffProfile?" + params, OnComplete, OnError);
					});
				}

				this.GetDisableVideoOnLowBandwidth = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointGetDisableVideoOnLowBandwidth?" + params, OnComplete, OnError);
					});
				}

				this.GetDisableVideoOnLowBandwidthAudioStreams = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointGetDisableVideoOnLowBandwidthAudioStreams?" + params, OnComplete, OnError);
					});
				}

				this.GetDisableVideoOnLowBandwidthRecoveryTime = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointGetDisableVideoOnLowBandwidthRecoveryTime?" + params, OnComplete, OnError);
					});
				}

				this.GetDisableVideoOnLowBandwidthResponseTime = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointGetDisableVideoOnLowBandwidthResponseTime?" + params, OnComplete, OnError);
					});
				}

				this.GetDisableVideoOnLowBandwidthSampleTime = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointGetDisableVideoOnLowBandwidthSampleTime?" + params, OnComplete, OnError);
					});
				}

				this.GetDisableVideoOnLowBandwidthThreshold = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointGetDisableVideoOnLowBandwidthThreshold?" + params, OnComplete, OnError);
					});
				}

				this.GetFileLoggerCategoryList = function(categories) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('categories')){
							var params = vcUtilsParam({e: this.objId, categories: JSON.stringify({"categories": arguments[0].categories})});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['categories'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({e: this.objId, categories: JSON.stringify({"categories": arguments[0]})});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							if(categories&& response.data.categories)
								vcUtilsExtend(categories, response.data.categories);
							resolve(response.data);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointGetFileLoggerCategoryList?" + params, OnComplete, OnError);
					});
				}

				this.GetFileLoggerCategoryListAsync = function(onComplete) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onComplete')){
							this.VidyoEndpointOnGetLoggerCategoryListComplete = arguments[0].onComplete;
							var params = vcUtilsParam({e: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onComplete'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoEndpointOnGetLoggerCategoryListComplete = onComplete;
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointGetFileLoggerCategoryListAsync?" + params, OnComplete, OnError);
					});
				}

				this.GetGoogleAnalyticsEventTable = function(onGetAnalyticsEventTableCallback) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onGetAnalyticsEventTableCallback')){
							this.VidyoEndpointOnGetAnalyticsEventTable = arguments[0].onGetAnalyticsEventTableCallback;
							var params = vcUtilsParam({e: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onGetAnalyticsEventTableCallback'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoEndpointOnGetAnalyticsEventTable = onGetAnalyticsEventTableCallback;
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointGetGoogleAnalyticsEventTable?" + params, OnComplete, OnError);
					});
				}

				this.GetGoogleAnalyticsServiceId = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointGetGoogleAnalyticsServiceId?" + params, OnComplete, OnError);
					});
				}

				this.GetId = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointGetId?" + params, OnComplete, OnError);
					});
				}

				this.GetInsightsServiceUrl = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointGetInsightsServiceUrl?" + params, OnComplete, OnError);
					});
				}

				this.GetMaxReceiveBitRate = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointGetMaxReceiveBitRate?" + params, OnComplete, OnError);
					});
				}

				this.GetMaxSendBitRate = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointGetMaxSendBitRate?" + params, OnComplete, OnError);
					});
				}

				this.GetMicrophoneMaxBoostLevel = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointGetMicrophoneMaxBoostLevel?" + params, OnComplete, OnError);
					});
				}

				this.GetMinMicrophoneVolume = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointGetMinMicrophoneVolume?" + params, OnComplete, OnError);
					});
				}

				this.GetOptions = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointGetOptions?" + params, OnComplete, OnError);
					});
				}

				this.GetPreferredAudioCodec = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointGetPreferredAudioCodec?" + params, OnComplete, OnError);
					});
				}

				this.GetProductInfo = function(productInfo, supportedFeature) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('productInfo') && arguments[0].hasOwnProperty('supportedFeature')){
							var params = vcUtilsParam({e: this.objId, productInfo: JSON.stringify({"productInfo": arguments[0].productInfo}), supportedFeature: JSON.stringify({"supportedFeature": arguments[0].supportedFeature})});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['productInfo', 'supportedFeature'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "object")){
						var params = vcUtilsParam({e: this.objId, productInfo: JSON.stringify({"productInfo": arguments[0]}), supportedFeature: JSON.stringify({"supportedFeature": arguments[1]})});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							if(productInfo&& response.data.productInfo)
								vcUtilsExtend(productInfo, response.data.productInfo);
							if(supportedFeature&& response.data.supportedFeature)
								vcUtilsExtend(supportedFeature, response.data.supportedFeature);
							resolve(response.data);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointGetProductInfo?" + params, OnComplete, OnError);
					});
				}

				this.GetProductInfoAsync = function(onComplete) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onComplete')){
							this.VidyoEndpointOnGetProductInfoComplete = arguments[0].onComplete;
							var params = vcUtilsParam({e: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onComplete'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoEndpointOnGetProductInfoComplete = onComplete;
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointGetProductInfoAsync?" + params, OnComplete, OnError);
					});
				}

				this.GetRendererOptionsForViewId = function(viewId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('viewId')){
							arguments[0].viewId = UpdateViewOnDOM({uiEvent:"GetRendererOptionsForViewId", viewId:arguments[0].viewId});
							var params = vcUtilsParam({e: this.objId, viewId: arguments[0].viewId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['viewId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						arguments[0] = UpdateViewOnDOM({uiEvent:"GetRendererOptionsForViewId", viewId:viewId});
						var params = vcUtilsParam({e: this.objId, viewId: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointGetRendererOptionsForViewId?" + params, OnComplete, OnError);
					});
				}

				this.GetStaticShareSvcState = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointGetStaticShareSvcState?" + params, OnComplete, OnError);
					});
				}

				this.GetStatisticRate = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointGetStatisticRate?" + params, OnComplete, OnError);
					});
				}

				this.GetStats = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointGetStats?" + params, OnComplete, OnError);
					});
				}

				this.GetStatsJson = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointGetStatsJson?" + params, OnComplete, OnError);
					});
				}

				this.GetWhitelistedAudioDevices = function(onGetCallback) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onGetCallback')){
							this.VidyoEndpointOnGetWhitelistedAudioDevices = arguments[0].onGetCallback;
							var params = vcUtilsParam({e: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onGetCallback'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoEndpointOnGetWhitelistedAudioDevices = onGetCallback;
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointGetWhitelistedAudioDevices?" + params, OnComplete, OnError);
					});
				}

				this.GoogleAnalyticsControlEventAction = function(eventCategory, eventAction, enable) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('eventCategory') && arguments[0].hasOwnProperty('eventAction') && arguments[0].hasOwnProperty('enable')){
							var params = vcUtilsParam({e: this.objId, eventCategory: arguments[0].eventCategory, eventAction: arguments[0].eventAction, enable: arguments[0].enable});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['eventCategory', 'eventAction', 'enable'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "boolean")){
						var params = vcUtilsParam({e: this.objId, eventCategory: arguments[0], eventAction: arguments[1], enable: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointGoogleAnalyticsControlEventAction?" + params, OnComplete, OnError);
					});
				}

				this.HideView = function(viewId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('viewId')){
							arguments[0].viewId = UpdateViewOnDOM({uiEvent:"HideView", viewId:arguments[0].viewId});
							var params = vcUtilsParam({e: this.objId, viewId: arguments[0].viewId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['viewId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						arguments[0] = UpdateViewOnDOM({uiEvent:"HideView", viewId:viewId});
						var params = vcUtilsParam({e: this.objId, viewId: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointHideView?" + params, OnComplete, OnError);
					});
				}

				this.InsightsNotifyApplicationEvent = function(eventName, parameters) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('eventName') && arguments[0].hasOwnProperty('parameters')){
							var params = vcUtilsParam({e: this.objId, eventName: arguments[0].eventName, parameters: JSON.stringify({"parameters": arguments[0].parameters})});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['eventName', 'parameters'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "object")){
						var params = vcUtilsParam({e: this.objId, eventName: arguments[0], parameters: JSON.stringify({"parameters": arguments[1]})});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointInsightsNotifyApplicationEvent?" + params, OnComplete, OnError);
					});
				}

				this.IsDebugEnabled = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointIsDebugEnabled?" + params, OnComplete, OnError);
					});
				}

				this.IsGoogleAnalyticsServiceEnabled = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointIsGoogleAnalyticsServiceEnabled?" + params, OnComplete, OnError);
					});
				}

				this.IsInsightsServiceEnabled = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointIsInsightsServiceEnabled?" + params, OnComplete, OnError);
					});
				}

				this.LocalCameraSelectAdvanced = function(localCamera) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localCamera')){
							var params = vcUtilsParam({e: this.objId, localCamera: (arguments[0].localCamera ? arguments[0].localCamera.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localCamera'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({e: this.objId, localCamera: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointLocalCameraSelectAdvanced?" + params, OnComplete, OnError);
					});
				}

				this.LocalCameraUnselectAdvanced = function(localCamera) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localCamera')){
							var params = vcUtilsParam({e: this.objId, localCamera: (arguments[0].localCamera ? arguments[0].localCamera.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localCamera'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({e: this.objId, localCamera: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointLocalCameraUnselectAdvanced?" + params, OnComplete, OnError);
					});
				}

				this.LocalMicrophoneSelectAdvanced = function(localMicrophone, previewedPreCall) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localMicrophone') && arguments[0].hasOwnProperty('previewedPreCall')){
							var params = vcUtilsParam({e: this.objId, localMicrophone: (arguments[0].localMicrophone ? arguments[0].localMicrophone.objId : 0), previewedPreCall: arguments[0].previewedPreCall});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localMicrophone', 'previewedPreCall'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "boolean")){
						var params = vcUtilsParam({e: this.objId, localMicrophone: (arguments[0] ? arguments[0].objId : 0), previewedPreCall: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointLocalMicrophoneSelectAdvanced?" + params, OnComplete, OnError);
					});
				}

				this.LocalMicrophoneUnselectAdvanced = function(localMicrophone) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localMicrophone')){
							var params = vcUtilsParam({e: this.objId, localMicrophone: (arguments[0].localMicrophone ? arguments[0].localMicrophone.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localMicrophone'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({e: this.objId, localMicrophone: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointLocalMicrophoneUnselectAdvanced?" + params, OnComplete, OnError);
					});
				}

				this.LocalMonitorSelectAdvanced = function(localMonitor) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localMonitor')){
							var params = vcUtilsParam({e: this.objId, localMonitor: (arguments[0].localMonitor ? arguments[0].localMonitor.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localMonitor'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({e: this.objId, localMonitor: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointLocalMonitorSelectAdvanced?" + params, OnComplete, OnError);
					});
				}

				this.LocalMonitorUnselectAdvanced = function(localMonitor) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localMonitor')){
							var params = vcUtilsParam({e: this.objId, localMonitor: (arguments[0].localMonitor ? arguments[0].localMonitor.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localMonitor'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({e: this.objId, localMonitor: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointLocalMonitorUnselectAdvanced?" + params, OnComplete, OnError);
					});
				}

				this.LocalRendererSelectAdvanced = function(localRenderer) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localRenderer')){
							var params = vcUtilsParam({e: this.objId, localRenderer: (arguments[0].localRenderer ? arguments[0].localRenderer.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localRenderer'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({e: this.objId, localRenderer: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointLocalRendererSelectAdvanced?" + params, OnComplete, OnError);
					});
				}

				this.LocalRendererUnselectAdvanced = function(localRenderer) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localRenderer')){
							var params = vcUtilsParam({e: this.objId, localRenderer: (arguments[0].localRenderer ? arguments[0].localRenderer.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localRenderer'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({e: this.objId, localRenderer: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointLocalRendererUnselectAdvanced?" + params, OnComplete, OnError);
					});
				}

				this.LocalSpeakerSelectAdvanced = function(localSpeaker) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localSpeaker')){
							var params = vcUtilsParam({e: this.objId, localSpeaker: (arguments[0].localSpeaker ? arguments[0].localSpeaker.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localSpeaker'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({e: this.objId, localSpeaker: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointLocalSpeakerSelectAdvanced?" + params, OnComplete, OnError);
					});
				}

				this.LocalSpeakerUnselectAdvanced = function(localSpeaker) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localSpeaker')){
							var params = vcUtilsParam({e: this.objId, localSpeaker: (arguments[0].localSpeaker ? arguments[0].localSpeaker.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localSpeaker'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({e: this.objId, localSpeaker: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointLocalSpeakerUnselectAdvanced?" + params, OnComplete, OnError);
					});
				}

				this.LocalWindowShareSelectAdvanced = function(localWindowShare) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localWindowShare')){
							var params = vcUtilsParam({e: this.objId, localWindowShare: (arguments[0].localWindowShare ? arguments[0].localWindowShare.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localWindowShare'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({e: this.objId, localWindowShare: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointLocalWindowShareSelectAdvanced?" + params, OnComplete, OnError);
					});
				}

				this.LocalWindowShareUnselectAdvanced = function(localWindowShare) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localWindowShare')){
							var params = vcUtilsParam({e: this.objId, localWindowShare: (arguments[0].localWindowShare ? arguments[0].localWindowShare.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localWindowShare'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({e: this.objId, localWindowShare: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointLocalWindowShareUnselectAdvanced?" + params, OnComplete, OnError);
					});
				}

				this.RegisterCameraEffectErrorListener = function(onError) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onError')){
							this.VidyoEndpointOnCameraEffectError = arguments[0].onError;
							var params = vcUtilsParam({e: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onError'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoEndpointOnCameraEffectError = onError;
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointRegisterCameraEffectErrorListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterDisableVideoOnLowBwEventListener = function(onStarted, onEnded) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onStarted') && arguments[0].hasOwnProperty('onEnded')){
							this.VidyoEndpointOnDisableVideoOnLowBwStarted = arguments[0].onStarted;
							this.VidyoEndpointOnDisableVideoOnLowBwEnded = arguments[0].onEnded;
							var params = vcUtilsParam({e: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onStarted', 'onEnded'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function")){
						this.VidyoEndpointOnDisableVideoOnLowBwStarted = onStarted;
						this.VidyoEndpointOnDisableVideoOnLowBwEnded = onEnded;
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointRegisterDisableVideoOnLowBwEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterErrorEventListener = function(onErrorCallback) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onErrorCallback')){
							this.VidyoEndpointOnError = arguments[0].onErrorCallback;
							var params = vcUtilsParam({e: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onErrorCallback'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoEndpointOnError = onErrorCallback;
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointRegisterErrorEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterLocalCameraEventListener = function(onAdded, onRemoved, onSelected, onStateUpdated) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onAdded') && arguments[0].hasOwnProperty('onRemoved') && arguments[0].hasOwnProperty('onSelected') && arguments[0].hasOwnProperty('onStateUpdated')){
							this.VidyoEndpointOnLocalCameraAdded = arguments[0].onAdded;
							this.VidyoEndpointOnLocalCameraRemoved = arguments[0].onRemoved;
							this.VidyoEndpointOnLocalCameraSelected = arguments[0].onSelected;
							this.VidyoEndpointOnLocalCameraStateUpdated = arguments[0].onStateUpdated;
							var params = vcUtilsParam({e: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onAdded', 'onRemoved', 'onSelected', 'onStateUpdated'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "function")){
						this.VidyoEndpointOnLocalCameraAdded = onAdded;
						this.VidyoEndpointOnLocalCameraRemoved = onRemoved;
						this.VidyoEndpointOnLocalCameraSelected = onSelected;
						this.VidyoEndpointOnLocalCameraStateUpdated = onStateUpdated;
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointRegisterLocalCameraEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterLocalCameraFrameListener = function(localCamera, onFrame, width, height, frameInterval) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localCamera') && arguments[0].hasOwnProperty('onFrame') && arguments[0].hasOwnProperty('width') && arguments[0].hasOwnProperty('height') && arguments[0].hasOwnProperty('frameInterval')){
							this.VidyoEndpointOnLocalCameraFrame = arguments[0].onFrame;
							var params = vcUtilsParam({e: this.objId, localCamera: (arguments[0].localCamera ? arguments[0].localCamera.objId : 0), width: arguments[0].width, height: arguments[0].height, frameInterval: arguments[0].frameInterval});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localCamera', 'onFrame', 'width', 'height', 'frameInterval'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 5 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number")){
						this.VidyoEndpointOnLocalCameraFrame = onFrame;
						var params = vcUtilsParam({e: this.objId, localCamera: (arguments[0] ? arguments[0].objId : 0), width: arguments[2], height: arguments[3], frameInterval: arguments[4]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointRegisterLocalCameraFrameListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterLocalMicrophoneEnergyListener = function(onEnergy) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onEnergy')){
							this.VidyoEndpointOnLocalMicrophoneEnergy = arguments[0].onEnergy;
							var params = vcUtilsParam({e: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onEnergy'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoEndpointOnLocalMicrophoneEnergy = onEnergy;
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointRegisterLocalMicrophoneEnergyListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterLocalMicrophoneEventListener = function(onAdded, onRemoved, onSelected, onStateUpdated) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onAdded') && arguments[0].hasOwnProperty('onRemoved') && arguments[0].hasOwnProperty('onSelected') && arguments[0].hasOwnProperty('onStateUpdated')){
							this.VidyoEndpointOnLocalMicrophoneAdded = arguments[0].onAdded;
							this.VidyoEndpointOnLocalMicrophoneRemoved = arguments[0].onRemoved;
							this.VidyoEndpointOnLocalMicrophoneSelected = arguments[0].onSelected;
							this.VidyoEndpointOnLocalMicrophoneStateUpdated = arguments[0].onStateUpdated;
							var params = vcUtilsParam({e: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onAdded', 'onRemoved', 'onSelected', 'onStateUpdated'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "function")){
						this.VidyoEndpointOnLocalMicrophoneAdded = onAdded;
						this.VidyoEndpointOnLocalMicrophoneRemoved = onRemoved;
						this.VidyoEndpointOnLocalMicrophoneSelected = onSelected;
						this.VidyoEndpointOnLocalMicrophoneStateUpdated = onStateUpdated;
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointRegisterLocalMicrophoneEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterLocalMicrophoneFrameListener = function(localMicrophone, onFrame) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localMicrophone') && arguments[0].hasOwnProperty('onFrame')){
							this.VidyoEndpointOnLocalMicrophoneFrame = arguments[0].onFrame;
							var params = vcUtilsParam({e: this.objId, localMicrophone: (arguments[0].localMicrophone ? arguments[0].localMicrophone.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localMicrophone', 'onFrame'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "function")){
						this.VidyoEndpointOnLocalMicrophoneFrame = onFrame;
						var params = vcUtilsParam({e: this.objId, localMicrophone: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointRegisterLocalMicrophoneFrameListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterLocalMonitorEventListener = function(onAdded, onRemoved, onSelected, onStateUpdated) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onAdded') && arguments[0].hasOwnProperty('onRemoved') && arguments[0].hasOwnProperty('onSelected') && arguments[0].hasOwnProperty('onStateUpdated')){
							this.VidyoEndpointOnLocalMonitorAdded = arguments[0].onAdded;
							this.VidyoEndpointOnLocalMonitorRemoved = arguments[0].onRemoved;
							this.VidyoEndpointOnLocalMonitorSelected = arguments[0].onSelected;
							this.VidyoEndpointOnLocalMonitorStateUpdated = arguments[0].onStateUpdated;
							var params = vcUtilsParam({e: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onAdded', 'onRemoved', 'onSelected', 'onStateUpdated'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "function")){
						this.VidyoEndpointOnLocalMonitorAdded = onAdded;
						this.VidyoEndpointOnLocalMonitorRemoved = onRemoved;
						this.VidyoEndpointOnLocalMonitorSelected = onSelected;
						this.VidyoEndpointOnLocalMonitorStateUpdated = onStateUpdated;
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointRegisterLocalMonitorEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterLocalMonitorFrameListener = function(localMonitor, onFrame, width, height, frameInterval) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localMonitor') && arguments[0].hasOwnProperty('onFrame') && arguments[0].hasOwnProperty('width') && arguments[0].hasOwnProperty('height') && arguments[0].hasOwnProperty('frameInterval')){
							this.VidyoEndpointOnLocalMonitorFrame = arguments[0].onFrame;
							var params = vcUtilsParam({e: this.objId, localMonitor: (arguments[0].localMonitor ? arguments[0].localMonitor.objId : 0), width: arguments[0].width, height: arguments[0].height, frameInterval: arguments[0].frameInterval});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localMonitor', 'onFrame', 'width', 'height', 'frameInterval'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 5 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number")){
						this.VidyoEndpointOnLocalMonitorFrame = onFrame;
						var params = vcUtilsParam({e: this.objId, localMonitor: (arguments[0] ? arguments[0].objId : 0), width: arguments[2], height: arguments[3], frameInterval: arguments[4]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointRegisterLocalMonitorFrameListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterLocalRendererEventListener = function(onAdded, onRemoved, onSelected, onStateUpdated) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onAdded') && arguments[0].hasOwnProperty('onRemoved') && arguments[0].hasOwnProperty('onSelected') && arguments[0].hasOwnProperty('onStateUpdated')){
							this.VidyoEndpointOnLocalRendererAdded = arguments[0].onAdded;
							this.VidyoEndpointOnLocalRendererRemoved = arguments[0].onRemoved;
							this.VidyoEndpointOnLocalRendererSelected = arguments[0].onSelected;
							this.VidyoEndpointOnLocalRendererStateUpdated = arguments[0].onStateUpdated;
							var params = vcUtilsParam({e: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onAdded', 'onRemoved', 'onSelected', 'onStateUpdated'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "function")){
						this.VidyoEndpointOnLocalRendererAdded = onAdded;
						this.VidyoEndpointOnLocalRendererRemoved = onRemoved;
						this.VidyoEndpointOnLocalRendererSelected = onSelected;
						this.VidyoEndpointOnLocalRendererStateUpdated = onStateUpdated;
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointRegisterLocalRendererEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterLocalSpeakerEventListener = function(onAdded, onRemoved, onSelected, onStateUpdated) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onAdded') && arguments[0].hasOwnProperty('onRemoved') && arguments[0].hasOwnProperty('onSelected') && arguments[0].hasOwnProperty('onStateUpdated')){
							this.VidyoEndpointOnLocalSpeakerAdded = arguments[0].onAdded;
							this.VidyoEndpointOnLocalSpeakerRemoved = arguments[0].onRemoved;
							this.VidyoEndpointOnLocalSpeakerSelected = arguments[0].onSelected;
							this.VidyoEndpointOnLocalSpeakerStateUpdated = arguments[0].onStateUpdated;
							var params = vcUtilsParam({e: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onAdded', 'onRemoved', 'onSelected', 'onStateUpdated'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "function")){
						this.VidyoEndpointOnLocalSpeakerAdded = onAdded;
						this.VidyoEndpointOnLocalSpeakerRemoved = onRemoved;
						this.VidyoEndpointOnLocalSpeakerSelected = onSelected;
						this.VidyoEndpointOnLocalSpeakerStateUpdated = onStateUpdated;
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointRegisterLocalSpeakerEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterLocalWindowShareEventListener = function(onAdded, onRemoved, onSelected, onStateUpdated) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onAdded') && arguments[0].hasOwnProperty('onRemoved') && arguments[0].hasOwnProperty('onSelected') && arguments[0].hasOwnProperty('onStateUpdated')){
							this.VidyoEndpointOnLocalWindowShareAdded = arguments[0].onAdded;
							this.VidyoEndpointOnLocalWindowShareRemoved = arguments[0].onRemoved;
							this.VidyoEndpointOnLocalWindowShareSelected = arguments[0].onSelected;
							this.VidyoEndpointOnLocalWindowShareStateUpdated = arguments[0].onStateUpdated;
							var params = vcUtilsParam({e: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onAdded', 'onRemoved', 'onSelected', 'onStateUpdated'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "function")){
						this.VidyoEndpointOnLocalWindowShareAdded = onAdded;
						this.VidyoEndpointOnLocalWindowShareRemoved = onRemoved;
						this.VidyoEndpointOnLocalWindowShareSelected = onSelected;
						this.VidyoEndpointOnLocalWindowShareStateUpdated = onStateUpdated;
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointRegisterLocalWindowShareEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterLocalWindowShareFrameListener = function(localWindowShare, onFrame, width, height, frameInterval) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localWindowShare') && arguments[0].hasOwnProperty('onFrame') && arguments[0].hasOwnProperty('width') && arguments[0].hasOwnProperty('height') && arguments[0].hasOwnProperty('frameInterval')){
							this.VidyoEndpointOnLocalWindowShareFrame = arguments[0].onFrame;
							var params = vcUtilsParam({e: this.objId, localWindowShare: (arguments[0].localWindowShare ? arguments[0].localWindowShare.objId : 0), width: arguments[0].width, height: arguments[0].height, frameInterval: arguments[0].frameInterval});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localWindowShare', 'onFrame', 'width', 'height', 'frameInterval'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 5 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number")){
						this.VidyoEndpointOnLocalWindowShareFrame = onFrame;
						var params = vcUtilsParam({e: this.objId, localWindowShare: (arguments[0] ? arguments[0].objId : 0), width: arguments[2], height: arguments[3], frameInterval: arguments[4]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointRegisterLocalWindowShareFrameListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterLogEventListener = function(onLog, filter) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onLog') && arguments[0].hasOwnProperty('filter')){
							this.VidyoEndpointOnLog = arguments[0].onLog;
							var params = vcUtilsParam({e: this.objId, filter: arguments[0].filter});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onLog', 'filter'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "string")){
						this.VidyoEndpointOnLog = onLog;
						var params = vcUtilsParam({e: this.objId, filter: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointRegisterLogEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterNetworkInterfaceEventListener = function(onAdded, onRemoved, onSelected, onStateUpdated) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onAdded') && arguments[0].hasOwnProperty('onRemoved') && arguments[0].hasOwnProperty('onSelected') && arguments[0].hasOwnProperty('onStateUpdated')){
							this.VidyoEndpointOnNetworkInterfaceAdded = arguments[0].onAdded;
							this.VidyoEndpointOnNetworkInterfaceRemoved = arguments[0].onRemoved;
							this.VidyoEndpointOnNetworkInterfaceSelected = arguments[0].onSelected;
							this.VidyoEndpointOnNetworkInterfaceStateUpdated = arguments[0].onStateUpdated;
							var params = vcUtilsParam({e: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onAdded', 'onRemoved', 'onSelected', 'onStateUpdated'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "function")){
						this.VidyoEndpointOnNetworkInterfaceAdded = onAdded;
						this.VidyoEndpointOnNetworkInterfaceRemoved = onRemoved;
						this.VidyoEndpointOnNetworkInterfaceSelected = onSelected;
						this.VidyoEndpointOnNetworkInterfaceStateUpdated = onStateUpdated;
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointRegisterNetworkInterfaceEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterPlugin = function(plugin) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('plugin')){
							var params = vcUtilsParam({e: this.objId, plugin: arguments[0].plugin});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['plugin'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({e: this.objId, plugin: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointRegisterPlugin?" + params, OnComplete, OnError);
					});
				}

				this.RegisterReconnectEventListener = function(onReconnecting, onReconnected, onConferenceLost) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onReconnecting') && arguments[0].hasOwnProperty('onReconnected') && arguments[0].hasOwnProperty('onConferenceLost')){
							this.VidyoEndpointOnReconnecting = arguments[0].onReconnecting;
							this.VidyoEndpointOnReconnected = arguments[0].onReconnected;
							this.VidyoEndpointOnConferenceLost = arguments[0].onConferenceLost;
							var params = vcUtilsParam({e: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onReconnecting', 'onReconnected', 'onConferenceLost'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function")){
						this.VidyoEndpointOnReconnecting = onReconnecting;
						this.VidyoEndpointOnReconnected = onReconnected;
						this.VidyoEndpointOnConferenceLost = onConferenceLost;
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointRegisterReconnectEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterRemoteCameraEventListener = function(onAdded, onRemoved, onStateUpdated) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onAdded') && arguments[0].hasOwnProperty('onRemoved') && arguments[0].hasOwnProperty('onStateUpdated')){
							this.VidyoEndpointOnRemoteCameraAdded = arguments[0].onAdded;
							this.VidyoEndpointOnRemoteCameraRemoved = arguments[0].onRemoved;
							this.VidyoEndpointOnRemoteCameraStateUpdated = arguments[0].onStateUpdated;
							var params = vcUtilsParam({e: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onAdded', 'onRemoved', 'onStateUpdated'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function")){
						this.VidyoEndpointOnRemoteCameraAdded = onAdded;
						this.VidyoEndpointOnRemoteCameraRemoved = onRemoved;
						this.VidyoEndpointOnRemoteCameraStateUpdated = onStateUpdated;
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointRegisterRemoteCameraEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterRemoteCameraFrameListener = function(remoteCamera, onFrame, width, height, frameInterval) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('remoteCamera') && arguments[0].hasOwnProperty('onFrame') && arguments[0].hasOwnProperty('width') && arguments[0].hasOwnProperty('height') && arguments[0].hasOwnProperty('frameInterval')){
							this.VidyoEndpointOnRemoteCameraFrame = arguments[0].onFrame;
							var params = vcUtilsParam({e: this.objId, remoteCamera: (arguments[0].remoteCamera ? arguments[0].remoteCamera.objId : 0), width: arguments[0].width, height: arguments[0].height, frameInterval: arguments[0].frameInterval});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['remoteCamera', 'onFrame', 'width', 'height', 'frameInterval'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 5 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number")){
						this.VidyoEndpointOnRemoteCameraFrame = onFrame;
						var params = vcUtilsParam({e: this.objId, remoteCamera: (arguments[0] ? arguments[0].objId : 0), width: arguments[2], height: arguments[3], frameInterval: arguments[4]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointRegisterRemoteCameraFrameListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterRemoteMicrophoneEnergyListener = function(onEnergy) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onEnergy')){
							this.VidyoEndpointOnRemoteMicrophoneEnergy = arguments[0].onEnergy;
							var params = vcUtilsParam({e: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onEnergy'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoEndpointOnRemoteMicrophoneEnergy = onEnergy;
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointRegisterRemoteMicrophoneEnergyListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterRemoteMicrophoneEventListener = function(onAdded, onRemoved, onStateUpdated) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onAdded') && arguments[0].hasOwnProperty('onRemoved') && arguments[0].hasOwnProperty('onStateUpdated')){
							this.VidyoEndpointOnRemoteMicrophoneAdded = arguments[0].onAdded;
							this.VidyoEndpointOnRemoteMicrophoneRemoved = arguments[0].onRemoved;
							this.VidyoEndpointOnRemoteMicrophoneStateUpdated = arguments[0].onStateUpdated;
							var params = vcUtilsParam({e: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onAdded', 'onRemoved', 'onStateUpdated'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function")){
						this.VidyoEndpointOnRemoteMicrophoneAdded = onAdded;
						this.VidyoEndpointOnRemoteMicrophoneRemoved = onRemoved;
						this.VidyoEndpointOnRemoteMicrophoneStateUpdated = onStateUpdated;
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointRegisterRemoteMicrophoneEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterRemoteMicrophoneFrameListener = function(remoteMicrophone, onFrame) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('remoteMicrophone') && arguments[0].hasOwnProperty('onFrame')){
							this.VidyoEndpointOnRemoteMicrophoneFrame = arguments[0].onFrame;
							var params = vcUtilsParam({e: this.objId, remoteMicrophone: (arguments[0].remoteMicrophone ? arguments[0].remoteMicrophone.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['remoteMicrophone', 'onFrame'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "function")){
						this.VidyoEndpointOnRemoteMicrophoneFrame = onFrame;
						var params = vcUtilsParam({e: this.objId, remoteMicrophone: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointRegisterRemoteMicrophoneFrameListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterRemoteRendererEventListener = function(onAdded, onRemoved, onStateUpdated) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onAdded') && arguments[0].hasOwnProperty('onRemoved') && arguments[0].hasOwnProperty('onStateUpdated')){
							this.VidyoEndpointOnRemoteRendererAdded = arguments[0].onAdded;
							this.VidyoEndpointOnRemoteRendererRemoved = arguments[0].onRemoved;
							this.VidyoEndpointOnRemoteRendererStateUpdated = arguments[0].onStateUpdated;
							var params = vcUtilsParam({e: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onAdded', 'onRemoved', 'onStateUpdated'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function")){
						this.VidyoEndpointOnRemoteRendererAdded = onAdded;
						this.VidyoEndpointOnRemoteRendererRemoved = onRemoved;
						this.VidyoEndpointOnRemoteRendererStateUpdated = onStateUpdated;
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointRegisterRemoteRendererEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterRemoteSpeakerEventListener = function(onAdded, onRemoved, onStateUpdated) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onAdded') && arguments[0].hasOwnProperty('onRemoved') && arguments[0].hasOwnProperty('onStateUpdated')){
							this.VidyoEndpointOnRemoteSpeakerAdded = arguments[0].onAdded;
							this.VidyoEndpointOnRemoteSpeakerRemoved = arguments[0].onRemoved;
							this.VidyoEndpointOnRemoteSpeakerStateUpdated = arguments[0].onStateUpdated;
							var params = vcUtilsParam({e: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onAdded', 'onRemoved', 'onStateUpdated'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function")){
						this.VidyoEndpointOnRemoteSpeakerAdded = onAdded;
						this.VidyoEndpointOnRemoteSpeakerRemoved = onRemoved;
						this.VidyoEndpointOnRemoteSpeakerStateUpdated = onStateUpdated;
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointRegisterRemoteSpeakerEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterRemoteWindowShareEventListener = function(onAdded, onRemoved, onStateUpdated) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onAdded') && arguments[0].hasOwnProperty('onRemoved') && arguments[0].hasOwnProperty('onStateUpdated')){
							this.VidyoEndpointOnRemoteWindowShareAdded = arguments[0].onAdded;
							this.VidyoEndpointOnRemoteWindowShareRemoved = arguments[0].onRemoved;
							this.VidyoEndpointOnRemoteWindowShareStateUpdated = arguments[0].onStateUpdated;
							var params = vcUtilsParam({e: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onAdded', 'onRemoved', 'onStateUpdated'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function")){
						this.VidyoEndpointOnRemoteWindowShareAdded = onAdded;
						this.VidyoEndpointOnRemoteWindowShareRemoved = onRemoved;
						this.VidyoEndpointOnRemoteWindowShareStateUpdated = onStateUpdated;
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointRegisterRemoteWindowShareEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterRemoteWindowShareFrameListener = function(remoteWindowShare, onFrame, width, height, frameInterval) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('remoteWindowShare') && arguments[0].hasOwnProperty('onFrame') && arguments[0].hasOwnProperty('width') && arguments[0].hasOwnProperty('height') && arguments[0].hasOwnProperty('frameInterval')){
							this.VidyoEndpointOnRemoteWindowShareFrame = arguments[0].onFrame;
							var params = vcUtilsParam({e: this.objId, remoteWindowShare: (arguments[0].remoteWindowShare ? arguments[0].remoteWindowShare.objId : 0), width: arguments[0].width, height: arguments[0].height, frameInterval: arguments[0].frameInterval});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['remoteWindowShare', 'onFrame', 'width', 'height', 'frameInterval'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 5 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number")){
						this.VidyoEndpointOnRemoteWindowShareFrame = onFrame;
						var params = vcUtilsParam({e: this.objId, remoteWindowShare: (arguments[0] ? arguments[0].objId : 0), width: arguments[2], height: arguments[3], frameInterval: arguments[4]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointRegisterRemoteWindowShareFrameListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterVirtualAudioSourceEventListener = function(onAdded, onRemoved, onStateUpdated, onSelected, onExternalMediaBufferReleased) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onAdded') && arguments[0].hasOwnProperty('onRemoved') && arguments[0].hasOwnProperty('onStateUpdated') && arguments[0].hasOwnProperty('onSelected') && arguments[0].hasOwnProperty('onExternalMediaBufferReleased')){
							this.VidyoEndpointOnVirtualAudioSourceAdded = arguments[0].onAdded;
							this.VidyoEndpointOnVirtualAudioSourceRemoved = arguments[0].onRemoved;
							this.VidyoEndpointOnVirtualAudioSourceStateUpdated = arguments[0].onStateUpdated;
							this.VidyoEndpointOnVirtualAudioSourceSelected = arguments[0].onSelected;
							this.VidyoEndpointOnVirtualAudioSourceExternalMediaBufferReleased = arguments[0].onExternalMediaBufferReleased;
							var params = vcUtilsParam({e: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onAdded', 'onRemoved', 'onStateUpdated', 'onSelected', 'onExternalMediaBufferReleased'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 5 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "function") && (typeof(arguments[4]) === "function")){
						this.VidyoEndpointOnVirtualAudioSourceAdded = onAdded;
						this.VidyoEndpointOnVirtualAudioSourceRemoved = onRemoved;
						this.VidyoEndpointOnVirtualAudioSourceStateUpdated = onStateUpdated;
						this.VidyoEndpointOnVirtualAudioSourceSelected = onSelected;
						this.VidyoEndpointOnVirtualAudioSourceExternalMediaBufferReleased = onExternalMediaBufferReleased;
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointRegisterVirtualAudioSourceEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterVirtualVideoSourceEventListener = function(onAdded, onRemoved, onStateUpdated, onExternalMediaBufferReleased) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onAdded') && arguments[0].hasOwnProperty('onRemoved') && arguments[0].hasOwnProperty('onStateUpdated') && arguments[0].hasOwnProperty('onExternalMediaBufferReleased')){
							this.VidyoEndpointOnVirtualVideoSourceAdded = arguments[0].onAdded;
							this.VidyoEndpointOnVirtualVideoSourceRemoved = arguments[0].onRemoved;
							this.VidyoEndpointOnVirtualVideoSourceStateUpdated = arguments[0].onStateUpdated;
							this.VidyoEndpointOnVirtualVideoSourceExternalMediaBufferReleased = arguments[0].onExternalMediaBufferReleased;
							var params = vcUtilsParam({e: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onAdded', 'onRemoved', 'onStateUpdated', 'onExternalMediaBufferReleased'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "function")){
						this.VidyoEndpointOnVirtualVideoSourceAdded = onAdded;
						this.VidyoEndpointOnVirtualVideoSourceRemoved = onRemoved;
						this.VidyoEndpointOnVirtualVideoSourceStateUpdated = onStateUpdated;
						this.VidyoEndpointOnVirtualVideoSourceExternalMediaBufferReleased = onExternalMediaBufferReleased;
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointRegisterVirtualVideoSourceEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RemoveAudioDeviceFromWhitelist = function(deviceName) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('deviceName')){
							var params = vcUtilsParam({e: this.objId, deviceName: arguments[0].deviceName});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['deviceName'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({e: this.objId, deviceName: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointRemoveAudioDeviceFromWhitelist?" + params, OnComplete, OnError);
					});
				}

				this.RemoveRenderer = function(localRenderer) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localRenderer')){
							var params = vcUtilsParam({e: this.objId, localRenderer: (arguments[0].localRenderer ? arguments[0].localRenderer.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localRenderer'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({e: this.objId, localRenderer: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointRemoveRenderer?" + params, OnComplete, OnError);
					});
				}

				this.RequestToResumeVideo = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointRequestToResumeVideo?" + params, OnComplete, OnError);
					});
				}

				this.RequestToSpeak = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointRequestToSpeak?" + params, OnComplete, OnError);
					});
				}

				this.RequestVideoForRemoteCamera = function(remoteCamera, width, height, frameInterval, onFirstFrameReceived) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('remoteCamera') && arguments[0].hasOwnProperty('width') && arguments[0].hasOwnProperty('height') && arguments[0].hasOwnProperty('frameInterval') && arguments[0].hasOwnProperty('onFirstFrameReceived')){
							this.VidyoEndpointOnRemoteCameraFirstFrameReceived = arguments[0].onFirstFrameReceived;
							var params = vcUtilsParam({e: this.objId, remoteCamera: (arguments[0].remoteCamera ? arguments[0].remoteCamera.objId : 0), width: arguments[0].width, height: arguments[0].height, frameInterval: arguments[0].frameInterval});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['remoteCamera', 'width', 'height', 'frameInterval', 'onFirstFrameReceived'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 5 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "function")){
						this.VidyoEndpointOnRemoteCameraFirstFrameReceived = onFirstFrameReceived;
						var params = vcUtilsParam({e: this.objId, remoteCamera: (arguments[0] ? arguments[0].objId : 0), width: arguments[1], height: arguments[2], frameInterval: arguments[3]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointRequestVideoForRemoteCamera?" + params, OnComplete, OnError);
					});
				}

				this.RequestVideoForRemoteWindowShare = function(remoteWindowShare, width, height, frameInterval, onFirstFrameReceived) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('remoteWindowShare') && arguments[0].hasOwnProperty('width') && arguments[0].hasOwnProperty('height') && arguments[0].hasOwnProperty('frameInterval') && arguments[0].hasOwnProperty('onFirstFrameReceived')){
							this.VidyoEndpointOnRemoteWindowShareFirstFrameReceived = arguments[0].onFirstFrameReceived;
							var params = vcUtilsParam({e: this.objId, remoteWindowShare: (arguments[0].remoteWindowShare ? arguments[0].remoteWindowShare.objId : 0), width: arguments[0].width, height: arguments[0].height, frameInterval: arguments[0].frameInterval});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['remoteWindowShare', 'width', 'height', 'frameInterval', 'onFirstFrameReceived'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 5 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "function")){
						this.VidyoEndpointOnRemoteWindowShareFirstFrameReceived = onFirstFrameReceived;
						var params = vcUtilsParam({e: this.objId, remoteWindowShare: (arguments[0] ? arguments[0].objId : 0), width: arguments[1], height: arguments[2], frameInterval: arguments[3]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointRequestVideoForRemoteWindowShare?" + params, OnComplete, OnError);
					});
				}

				this.SelectAudioContentShare = function(localMicrophone) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localMicrophone')){
							var params = vcUtilsParam({e: this.objId, localMicrophone: (arguments[0].localMicrophone ? arguments[0].localMicrophone.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localMicrophone'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({e: this.objId, localMicrophone: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSelectAudioContentShare?" + params, OnComplete, OnError);
					});
				}

				this.SelectDefaultCamera = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSelectDefaultCamera?" + params, OnComplete, OnError);
					});
				}

				this.SelectDefaultMicrophone = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSelectDefaultMicrophone?" + params, OnComplete, OnError);
					});
				}

				this.SelectDefaultNetworkInterfaceForMedia = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSelectDefaultNetworkInterfaceForMedia?" + params, OnComplete, OnError);
					});
				}

				this.SelectDefaultNetworkInterfaceForSignaling = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSelectDefaultNetworkInterfaceForSignaling?" + params, OnComplete, OnError);
					});
				}

				this.SelectDefaultSpeaker = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSelectDefaultSpeaker?" + params, OnComplete, OnError);
					});
				}

				this.SelectLocalCamera = function(localCamera) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localCamera')){
							var params = vcUtilsParam({e: this.objId, localCamera: (arguments[0].localCamera ? arguments[0].localCamera.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localCamera'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({e: this.objId, localCamera: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSelectLocalCamera?" + params, OnComplete, OnError);
					});
				}

				this.SelectLocalMicrophone = function(localMicrophone) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localMicrophone')){
							var params = vcUtilsParam({e: this.objId, localMicrophone: (arguments[0].localMicrophone ? arguments[0].localMicrophone.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localMicrophone'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({e: this.objId, localMicrophone: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSelectLocalMicrophone?" + params, OnComplete, OnError);
					});
				}

				this.SelectLocalMonitor = function(localMonitor) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localMonitor')){
							var params = vcUtilsParam({e: this.objId, localMonitor: (arguments[0].localMonitor ? arguments[0].localMonitor.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localMonitor'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({e: this.objId, localMonitor: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSelectLocalMonitor?" + params, OnComplete, OnError);
					});
				}

				this.SelectLocalMonitorAdvanced = function(localMonitor, options) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localMonitor') && arguments[0].hasOwnProperty('options')){
							var params = vcUtilsParam({e: this.objId, localMonitor: (arguments[0].localMonitor ? arguments[0].localMonitor.objId : 0), options: JSON.stringify(arguments[0].options)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localMonitor', 'options'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "object")){
						var params = vcUtilsParam({e: this.objId, localMonitor: (arguments[0] ? arguments[0].objId : 0), options: JSON.stringify(arguments[1])});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							if(options&& response.data.options)
								vcUtilsExtend(options, response.data.options);
							resolve(response.data);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSelectLocalMonitorAdvanced?" + params, OnComplete, OnError);
					});
				}

				this.SelectLocalSpeaker = function(localSpeaker) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localSpeaker')){
							var params = vcUtilsParam({e: this.objId, localSpeaker: (arguments[0].localSpeaker ? arguments[0].localSpeaker.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localSpeaker'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({e: this.objId, localSpeaker: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSelectLocalSpeaker?" + params, OnComplete, OnError);
					});
				}

				this.SelectLocalWindowShare = function(localWindowShare) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localWindowShare')){
							var params = vcUtilsParam({e: this.objId, localWindowShare: (arguments[0].localWindowShare ? arguments[0].localWindowShare.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localWindowShare'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({e: this.objId, localWindowShare: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSelectLocalWindowShare?" + params, OnComplete, OnError);
					});
				}

				this.SelectLocalWindowShareAdvanced = function(localWindowShare, options) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localWindowShare') && arguments[0].hasOwnProperty('options')){
							var params = vcUtilsParam({e: this.objId, localWindowShare: (arguments[0].localWindowShare ? arguments[0].localWindowShare.objId : 0), options: JSON.stringify(arguments[0].options)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localWindowShare', 'options'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "object")){
						var params = vcUtilsParam({e: this.objId, localWindowShare: (arguments[0] ? arguments[0].objId : 0), options: JSON.stringify(arguments[1])});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							if(options&& response.data.options)
								vcUtilsExtend(options, response.data.options);
							resolve(response.data);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSelectLocalWindowShareAdvanced?" + params, OnComplete, OnError);
					});
				}

				this.SelectNetworkInterfaceForMedia = function(networkInterface) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('networkInterface')){
							var params = vcUtilsParam({e: this.objId, networkInterface: (arguments[0].networkInterface ? arguments[0].networkInterface.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['networkInterface'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({e: this.objId, networkInterface: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSelectNetworkInterfaceForMedia?" + params, OnComplete, OnError);
					});
				}

				this.SelectNetworkInterfaceForSignaling = function(networkInterface) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('networkInterface')){
							var params = vcUtilsParam({e: this.objId, networkInterface: (arguments[0].networkInterface ? arguments[0].networkInterface.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['networkInterface'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({e: this.objId, networkInterface: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSelectNetworkInterfaceForSignaling?" + params, OnComplete, OnError);
					});
				}

				this.SelectVideoContentShare = function(localCamera) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localCamera')){
							var params = vcUtilsParam({e: this.objId, localCamera: (arguments[0].localCamera ? arguments[0].localCamera.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localCamera'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({e: this.objId, localCamera: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSelectVideoContentShare?" + params, OnComplete, OnError);
					});
				}

				this.SelectVirtualAudioContentShare = function(virtualAudioSource) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('virtualAudioSource')){
							var params = vcUtilsParam({e: this.objId, virtualAudioSource: (arguments[0].virtualAudioSource ? arguments[0].virtualAudioSource.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['virtualAudioSource'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({e: this.objId, virtualAudioSource: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSelectVirtualAudioContentShare?" + params, OnComplete, OnError);
					});
				}

				this.SelectVirtualCamera = function(virtualCamera) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('virtualCamera')){
							var params = vcUtilsParam({e: this.objId, virtualCamera: (arguments[0].virtualCamera ? arguments[0].virtualCamera.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['virtualCamera'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({e: this.objId, virtualCamera: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							if(virtualCamera&& response.data.virtualCamera)
								vcUtilsExtend(virtualCamera, response.data.virtualCamera);
							resolve(response.data);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSelectVirtualCamera?" + params, OnComplete, OnError);
					});
				}

				this.SelectVirtualMicrophone = function(virtualAudioSource) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('virtualAudioSource')){
							var params = vcUtilsParam({e: this.objId, virtualAudioSource: (arguments[0].virtualAudioSource ? arguments[0].virtualAudioSource.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['virtualAudioSource'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({e: this.objId, virtualAudioSource: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSelectVirtualMicrophone?" + params, OnComplete, OnError);
					});
				}

				this.SelectVirtualSourceWindowShare = function(virtualWindowShare) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('virtualWindowShare')){
							var params = vcUtilsParam({e: this.objId, virtualWindowShare: (arguments[0].virtualWindowShare ? arguments[0].virtualWindowShare.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['virtualWindowShare'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({e: this.objId, virtualWindowShare: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							if(virtualWindowShare&& response.data.virtualWindowShare)
								vcUtilsExtend(virtualWindowShare, response.data.virtualWindowShare);
							resolve(response.data);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSelectVirtualSourceWindowShare?" + params, OnComplete, OnError);
					});
				}

				this.SendVirtualAudioSourceFrame = function(virtualAudioSource, audioFrame) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('virtualAudioSource') && arguments[0].hasOwnProperty('audioFrame')){
							var params = vcUtilsParam({e: this.objId, virtualAudioSource: (arguments[0].virtualAudioSource ? arguments[0].virtualAudioSource.objId : 0), audioFrame: (arguments[0].audioFrame ? arguments[0].audioFrame.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['virtualAudioSource', 'audioFrame'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "object")){
						var params = vcUtilsParam({e: this.objId, virtualAudioSource: (arguments[0] ? arguments[0].objId : 0), audioFrame: (arguments[1] ? arguments[1].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							if(virtualAudioSource&& response.data.virtualAudioSource)
								vcUtilsExtend(virtualAudioSource, response.data.virtualAudioSource);
							if(audioFrame&& response.data.audioFrame)
								vcUtilsExtend(audioFrame, response.data.audioFrame);
							resolve(response.data);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSendVirtualAudioSourceFrame?" + params, OnComplete, OnError);
					});
				}

				this.SendVirtualAudioSourceFrameWithExternalData = function(virtualAudioSource, buffer, nbSamples, elapsedTime) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('virtualAudioSource') && arguments[0].hasOwnProperty('buffer') && arguments[0].hasOwnProperty('nbSamples') && arguments[0].hasOwnProperty('elapsedTime')){
							var params = vcUtilsParam({e: this.objId, virtualAudioSource: (arguments[0].virtualAudioSource ? arguments[0].virtualAudioSource.objId : 0), buffer: arguments[0].buffer, nbSamples: arguments[0].nbSamples, elapsedTime: arguments[0].elapsedTime});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['virtualAudioSource', 'buffer', 'nbSamples', 'elapsedTime'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number")){
						var params = vcUtilsParam({e: this.objId, virtualAudioSource: (arguments[0] ? arguments[0].objId : 0), buffer: arguments[1], nbSamples: arguments[1], elapsedTime: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							if(virtualAudioSource&& response.data.virtualAudioSource)
								vcUtilsExtend(virtualAudioSource, response.data.virtualAudioSource);
							resolve(response.data);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSendVirtualAudioSourceFrameWithExternalData?" + params, OnComplete, OnError);
					});
				}

				this.SetAdvancedOptions = function(options) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('options')){
							var params = vcUtilsParam({e: this.objId, options: arguments[0].options});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['options'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({e: this.objId, options: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetAdvancedOptions?" + params, OnComplete, OnError);
					});
				}

				this.SetApplicationTag = function(applicationTag) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('applicationTag')){
							var params = vcUtilsParam({e: this.objId, applicationTag: arguments[0].applicationTag});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['applicationTag'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({e: this.objId, applicationTag: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetApplicationTag?" + params, OnComplete, OnError);
					});
				}

				this.SetAudioBitrateMultiplier = function(bitrateMultiplier) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('bitrateMultiplier')){
							var params = vcUtilsParam({e: this.objId, bitrateMultiplier: arguments[0].bitrateMultiplier});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['bitrateMultiplier'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({e: this.objId, bitrateMultiplier: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetAudioBitrateMultiplier?" + params, OnComplete, OnError);
					});
				}

				this.SetAudioMode = function(audioMode) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('audioMode')){
							var params = vcUtilsParam({e: this.objId, audioMode: arguments[0].audioMode});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['audioMode'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({e: this.objId, audioMode: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetAudioMode?" + params, OnComplete, OnError);
					});
				}

				this.SetAudioPacketInterval = function(packetInterval) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('packetInterval')){
							var params = vcUtilsParam({e: this.objId, packetInterval: arguments[0].packetInterval});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['packetInterval'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({e: this.objId, packetInterval: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetAudioPacketInterval?" + params, OnComplete, OnError);
					});
				}

				this.SetAudioPacketLossPercentage = function(lossPercentage) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('lossPercentage')){
							var params = vcUtilsParam({e: this.objId, lossPercentage: arguments[0].lossPercentage});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['lossPercentage'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({e: this.objId, lossPercentage: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetAudioPacketLossPercentage?" + params, OnComplete, OnError);
					});
				}

				this.SetAutoReconnect = function(enable) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('enable')){
							var params = vcUtilsParam({e: this.objId, enable: arguments[0].enable});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['enable'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({e: this.objId, enable: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetAutoReconnect?" + params, OnComplete, OnError);
					});
				}

				this.SetAutoReconnectAttemptBackOff = function(backOff) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('backOff')){
							var params = vcUtilsParam({e: this.objId, backOff: arguments[0].backOff});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['backOff'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({e: this.objId, backOff: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetAutoReconnectAttemptBackOff?" + params, OnComplete, OnError);
					});
				}

				this.SetAutoReconnectMaxAttempts = function(maxAttempts) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('maxAttempts')){
							var params = vcUtilsParam({e: this.objId, maxAttempts: arguments[0].maxAttempts});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['maxAttempts'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({e: this.objId, maxAttempts: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetAutoReconnectMaxAttempts?" + params, OnComplete, OnError);
					});
				}

				this.SetBlurIntensity = function(intensity) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('intensity')){
							var params = vcUtilsParam({e: this.objId, intensity: arguments[0].intensity});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['intensity'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({e: this.objId, intensity: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetBlurIntensity?" + params, OnComplete, OnError);
					});
				}

				this.SetCameraBackgroundEffect = function(effectInfo) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('effectInfo')){
							var params = vcUtilsParam({e: this.objId, effectInfo: JSON.stringify(arguments[0].effectInfo)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['effectInfo'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({e: this.objId, effectInfo: JSON.stringify(arguments[0])});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetCameraBackgroundEffect?" + params, OnComplete, OnError);
					});
				}

				this.SetCameraNudgeConfiguration = function(cameraNudgeConfig) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('cameraNudgeConfig')){
							var params = vcUtilsParam({e: this.objId, cameraNudgeConfig: arguments[0].cameraNudgeConfig});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['cameraNudgeConfig'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({e: this.objId, cameraNudgeConfig: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetCameraNudgeConfiguration?" + params, OnComplete, OnError);
					});
				}

				this.SetCameraPrivacy = function(privacy) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('privacy')){
							var params = vcUtilsParam({e: this.objId, privacy: arguments[0].privacy});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['privacy'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({e: this.objId, privacy: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetCameraPrivacy?" + params, OnComplete, OnError);
					});
				}

				this.SetConferenceNumber = function(conferenceNumber) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('conferenceNumber')){
							var params = vcUtilsParam({e: this.objId, conferenceNumber: arguments[0].conferenceNumber});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['conferenceNumber'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({e: this.objId, conferenceNumber: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetConferenceNumber?" + params, OnComplete, OnError);
					});
				}

				this.SetConsoleLoggerFilter = function(consoleLogFilter) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('consoleLogFilter')){
							var params = vcUtilsParam({e: this.objId, consoleLogFilter: arguments[0].consoleLogFilter});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['consoleLogFilter'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({e: this.objId, consoleLogFilter: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetConsoleLoggerFilter?" + params, OnComplete, OnError);
					});
				}

				this.SetConsoleLoggerLevelAndCategory = function(levelName, categoryName, on) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('levelName') && arguments[0].hasOwnProperty('categoryName') && arguments[0].hasOwnProperty('on')){
							var params = vcUtilsParam({e: this.objId, levelName: arguments[0].levelName, categoryName: arguments[0].categoryName, on: arguments[0].on});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['levelName', 'categoryName', 'on'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "boolean")){
						var params = vcUtilsParam({e: this.objId, levelName: arguments[0], categoryName: arguments[1], on: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetConsoleLoggerLevelAndCategory?" + params, OnComplete, OnError);
					});
				}

				this.SetConsoleLoggerUTC = function(utc) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('utc')){
							var params = vcUtilsParam({e: this.objId, utc: arguments[0].utc});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['utc'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({e: this.objId, utc: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetConsoleLoggerUTC?" + params, OnComplete, OnError);
					});
				}

				this.SetCpuTradeOffProfile = function(profile) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('profile')){
							var params = vcUtilsParam({e: this.objId, profile: arguments[0].profile});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['profile'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({e: this.objId, profile: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetCpuTradeOffProfile?" + params, OnComplete, OnError);
					});
				}

				this.SetDebugFilter = function(debugLogFilter) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('debugLogFilter')){
							var params = vcUtilsParam({e: this.objId, debugLogFilter: arguments[0].debugLogFilter});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['debugLogFilter'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({e: this.objId, debugLogFilter: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetDebugFilter?" + params, OnComplete, OnError);
					});
				}

				this.SetDisableVideoOnLowBandwidth = function(enable) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('enable')){
							var params = vcUtilsParam({e: this.objId, enable: arguments[0].enable});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['enable'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({e: this.objId, enable: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetDisableVideoOnLowBandwidth?" + params, OnComplete, OnError);
					});
				}

				this.SetDisableVideoOnLowBandwidthAudioStreams = function(audioStreams) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('audioStreams')){
							var params = vcUtilsParam({e: this.objId, audioStreams: arguments[0].audioStreams});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['audioStreams'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({e: this.objId, audioStreams: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetDisableVideoOnLowBandwidthAudioStreams?" + params, OnComplete, OnError);
					});
				}

				this.SetDisableVideoOnLowBandwidthRecoveryTime = function(recoveryTime) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('recoveryTime')){
							var params = vcUtilsParam({e: this.objId, recoveryTime: arguments[0].recoveryTime});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['recoveryTime'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({e: this.objId, recoveryTime: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetDisableVideoOnLowBandwidthRecoveryTime?" + params, OnComplete, OnError);
					});
				}

				this.SetDisableVideoOnLowBandwidthResponseTime = function(responseTime) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('responseTime')){
							var params = vcUtilsParam({e: this.objId, responseTime: arguments[0].responseTime});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['responseTime'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({e: this.objId, responseTime: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetDisableVideoOnLowBandwidthResponseTime?" + params, OnComplete, OnError);
					});
				}

				this.SetDisableVideoOnLowBandwidthSampleTime = function(sampleTime) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('sampleTime')){
							var params = vcUtilsParam({e: this.objId, sampleTime: arguments[0].sampleTime});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['sampleTime'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({e: this.objId, sampleTime: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetDisableVideoOnLowBandwidthSampleTime?" + params, OnComplete, OnError);
					});
				}

				this.SetDisableVideoOnLowBandwidthThreshold = function(kbps) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('kbps')){
							var params = vcUtilsParam({e: this.objId, kbps: arguments[0].kbps});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['kbps'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({e: this.objId, kbps: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetDisableVideoOnLowBandwidthThreshold?" + params, OnComplete, OnError);
					});
				}

				this.SetFileLoggerFilter = function(logFileFilter) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('logFileFilter')){
							var params = vcUtilsParam({e: this.objId, logFileFilter: arguments[0].logFileFilter});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['logFileFilter'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({e: this.objId, logFileFilter: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetFileLoggerFilter?" + params, OnComplete, OnError);
					});
				}

				this.SetFileLoggerLevelAndCategory = function(levelName, categoryName, on) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('levelName') && arguments[0].hasOwnProperty('categoryName') && arguments[0].hasOwnProperty('on')){
							var params = vcUtilsParam({e: this.objId, levelName: arguments[0].levelName, categoryName: arguments[0].categoryName, on: arguments[0].on});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['levelName', 'categoryName', 'on'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "boolean")){
						var params = vcUtilsParam({e: this.objId, levelName: arguments[0], categoryName: arguments[1], on: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetFileLoggerLevelAndCategory?" + params, OnComplete, OnError);
					});
				}

				this.SetFileLoggerRotationParameters = function(maxSize, wrapPeriod, wrapCount) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('maxSize') && arguments[0].hasOwnProperty('wrapPeriod') && arguments[0].hasOwnProperty('wrapCount')){
							var params = vcUtilsParam({e: this.objId, maxSize: arguments[0].maxSize, wrapPeriod: arguments[0].wrapPeriod, wrapCount: arguments[0].wrapCount});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['maxSize', 'wrapPeriod', 'wrapCount'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number")){
						var params = vcUtilsParam({e: this.objId, maxSize: arguments[0], wrapPeriod: arguments[1], wrapCount: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetFileLoggerRotationParameters?" + params, OnComplete, OnError);
					});
				}

				this.SetFileLoggerUTC = function(utc) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('utc')){
							var params = vcUtilsParam({e: this.objId, utc: arguments[0].utc});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['utc'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({e: this.objId, utc: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetFileLoggerUTC?" + params, OnComplete, OnError);
					});
				}

				this.SetFontFileName = function(fontFileName) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('fontFileName')){
							var params = vcUtilsParam({e: this.objId, fontFileName: arguments[0].fontFileName});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['fontFileName'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({e: this.objId, fontFileName: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetFontFileName?" + params, OnComplete, OnError);
					});
				}

				this.SetLicenseKey = function(licenseKey) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('licenseKey')){
							var params = vcUtilsParam({e: this.objId, licenseKey: arguments[0].licenseKey});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['licenseKey'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({e: this.objId, licenseKey: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetLicenseKey?" + params, OnComplete, OnError);
					});
				}

				this.SetLocation = function(latitude, longitude) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('latitude') && arguments[0].hasOwnProperty('longitude')){
							var params = vcUtilsParam({e: this.objId, latitude: arguments[0].latitude, longitude: arguments[0].longitude});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['latitude', 'longitude'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number")){
						var params = vcUtilsParam({e: this.objId, latitude: arguments[0], longitude: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetLocation?" + params, OnComplete, OnError);
					});
				}

				this.SetLogFilePath = function(filename) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('filename')){
							var params = vcUtilsParam({e: this.objId, filename: arguments[0].filename});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['filename'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({e: this.objId, filename: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetLogFilePath?" + params, OnComplete, OnError);
					});
				}

				this.SetMaxReceiveBitRate = function(bitRate) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('bitRate')){
							var params = vcUtilsParam({e: this.objId, bitRate: arguments[0].bitRate});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['bitRate'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({e: this.objId, bitRate: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetMaxReceiveBitRate?" + params, OnComplete, OnError);
					});
				}

				this.SetMaxSendBitRate = function(bitRate) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('bitRate')){
							var params = vcUtilsParam({e: this.objId, bitRate: arguments[0].bitRate});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['bitRate'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({e: this.objId, bitRate: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetMaxSendBitRate?" + params, OnComplete, OnError);
					});
				}

				this.SetMicrophoneMaxBoostLevel = function(boostLevel) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('boostLevel')){
							var params = vcUtilsParam({e: this.objId, boostLevel: arguments[0].boostLevel});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['boostLevel'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({e: this.objId, boostLevel: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetMicrophoneMaxBoostLevel?" + params, OnComplete, OnError);
					});
				}

				this.SetMicrophonePrivacy = function(privacy) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('privacy')){
							var params = vcUtilsParam({e: this.objId, privacy: arguments[0].privacy});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['privacy'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({e: this.objId, privacy: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetMicrophonePrivacy?" + params, OnComplete, OnError);
					});
				}

				this.SetMinMicrophoneVolume = function(volumePercent) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('volumePercent')){
							var params = vcUtilsParam({e: this.objId, volumePercent: arguments[0].volumePercent});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['volumePercent'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({e: this.objId, volumePercent: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetMinMicrophoneVolume?" + params, OnComplete, OnError);
					});
				}

				this.SetMode = function(mode) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('mode')){
							var params = vcUtilsParam({e: this.objId, mode: arguments[0].mode});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['mode'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({e: this.objId, mode: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetMode?" + params, OnComplete, OnError);
					});
				}

				this.SetOptions = function(options) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('options')){
							var params = vcUtilsParam({e: this.objId, options: arguments[0].options});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['options'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({e: this.objId, options: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetOptions?" + params, OnComplete, OnError);
					});
				}

				this.SetPool = function(name) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('name')){
							var params = vcUtilsParam({e: this.objId, name: arguments[0].name});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['name'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({e: this.objId, name: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetPool?" + params, OnComplete, OnError);
					});
				}

				this.SetPreview = function(preview) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('preview')){
							var params = vcUtilsParam({e: this.objId, preview: arguments[0].preview});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['preview'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({e: this.objId, preview: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetPreview?" + params, OnComplete, OnError);
					});
				}

				this.SetProductInfo = function(productInfo, supportedFeature) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('productInfo') && arguments[0].hasOwnProperty('supportedFeature')){
							var params = vcUtilsParam({e: this.objId, productInfo: JSON.stringify({"productInfo": arguments[0].productInfo}), supportedFeature: JSON.stringify({"supportedFeature": arguments[0].supportedFeature})});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['productInfo', 'supportedFeature'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "object")){
						var params = vcUtilsParam({e: this.objId, productInfo: JSON.stringify({"productInfo": arguments[0]}), supportedFeature: JSON.stringify({"supportedFeature": arguments[1]})});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetProductInfo?" + params, OnComplete, OnError);
					});
				}

				this.SetReceiveRawMessage = function(receiveRawMessage) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('receiveRawMessage')){
							var params = vcUtilsParam({e: this.objId, receiveRawMessage: arguments[0].receiveRawMessage});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['receiveRawMessage'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({e: this.objId, receiveRawMessage: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetReceiveRawMessage?" + params, OnComplete, OnError);
					});
				}

				this.SetRendererOptionsForViewId = function(viewId, options) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('viewId') && arguments[0].hasOwnProperty('options')){
							arguments[0].viewId = UpdateViewOnDOM({uiEvent:"SetRendererOptionsForViewId", viewId:arguments[0].viewId, options:arguments[0].options});
							var params = vcUtilsParam({e: this.objId, viewId: arguments[0].viewId, options: arguments[0].options});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['viewId', 'options'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string")){
						arguments[0] = UpdateViewOnDOM({uiEvent:"SetRendererOptionsForViewId", viewId:viewId, options:options});
						var params = vcUtilsParam({e: this.objId, viewId: arguments[0], options: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetRendererOptionsForViewId?" + params, OnComplete, OnError);
					});
				}

				this.SetSpeakerPrivacy = function(privacy) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('privacy')){
							var params = vcUtilsParam({e: this.objId, privacy: arguments[0].privacy});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['privacy'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({e: this.objId, privacy: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetSpeakerPrivacy?" + params, OnComplete, OnError);
					});
				}

				this.SetStaticShareSvcState = function(enable) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('enable')){
							var params = vcUtilsParam({e: this.objId, enable: arguments[0].enable});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['enable'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({e: this.objId, enable: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetStaticShareSvcState?" + params, OnComplete, OnError);
					});
				}

				this.SetStatisticRate = function(statRate) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('statRate')){
							var params = vcUtilsParam({e: this.objId, statRate: arguments[0].statRate});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['statRate'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({e: this.objId, statRate: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetStatisticRate?" + params, OnComplete, OnError);
					});
				}

				this.SetTURNAddressCredentials = function(turnAddress, port, username, password, baseTransport) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('turnAddress') && arguments[0].hasOwnProperty('port') && arguments[0].hasOwnProperty('username') && arguments[0].hasOwnProperty('password') && arguments[0].hasOwnProperty('baseTransport')){
							var params = vcUtilsParam({e: this.objId, turnAddress: arguments[0].turnAddress, port: arguments[0].port, username: arguments[0].username, password: arguments[0].password, baseTransport: arguments[0].baseTransport});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['turnAddress', 'port', 'username', 'password', 'baseTransport'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 5 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "string") && (typeof(arguments[3]) === "string") && (typeof(arguments[4]) === "string")){
						var params = vcUtilsParam({e: this.objId, turnAddress: arguments[0], port: arguments[1], username: arguments[2], password: arguments[3], baseTransport: arguments[4]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetTURNAddressCredentials?" + params, OnComplete, OnError);
					});
				}

				this.SetTURNServerCertificateRequired = function(required) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('required')){
							var params = vcUtilsParam({e: this.objId, required: arguments[0].required});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['required'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({e: this.objId, required: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetTURNServerCertificateRequired?" + params, OnComplete, OnError);
					});
				}

				this.SetViewAnimationSpeed = function(viewId, speedPercentage) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('viewId') && arguments[0].hasOwnProperty('speedPercentage')){
							arguments[0].viewId = UpdateViewOnDOM({uiEvent:"SetViewAnimationSpeed", viewId:arguments[0].viewId, speedPercentage:arguments[0].speedPercentage});
							var params = vcUtilsParam({e: this.objId, viewId: arguments[0].viewId, speedPercentage: arguments[0].speedPercentage});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['viewId', 'speedPercentage'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "number")){
						arguments[0] = UpdateViewOnDOM({uiEvent:"SetViewAnimationSpeed", viewId:viewId, speedPercentage:speedPercentage});
						var params = vcUtilsParam({e: this.objId, viewId: arguments[0], speedPercentage: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetViewAnimationSpeed?" + params, OnComplete, OnError);
					});
				}

				this.SetViewBackgroundColor = function(viewId, red, green, blue) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('viewId') && arguments[0].hasOwnProperty('red') && arguments[0].hasOwnProperty('green') && arguments[0].hasOwnProperty('blue')){
							arguments[0].viewId = UpdateViewOnDOM({uiEvent:"SetViewBackgroundColor", viewId:arguments[0].viewId, red:arguments[0].red, green:arguments[0].green, blue:arguments[0].blue});
							var params = vcUtilsParam({e: this.objId, viewId: arguments[0].viewId, red: arguments[0].red, green: arguments[0].green, blue: arguments[0].blue});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['viewId', 'red', 'green', 'blue'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number")){
						arguments[0] = UpdateViewOnDOM({uiEvent:"SetViewBackgroundColor", viewId:viewId, red:red, green:green, blue:blue});
						var params = vcUtilsParam({e: this.objId, viewId: arguments[0], red: arguments[1], green: arguments[2], blue: arguments[3]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetViewBackgroundColor?" + params, OnComplete, OnError);
					});
				}

				this.SetVirtualBackgroundPicture = function(pathToPicture) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('pathToPicture')){
							var params = vcUtilsParam({e: this.objId, pathToPicture: arguments[0].pathToPicture});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['pathToPicture'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({e: this.objId, pathToPicture: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSetVirtualBackgroundPicture?" + params, OnComplete, OnError);
					});
				}

				this.ShowAudioMeters = function(viewId, showMeters) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('viewId') && arguments[0].hasOwnProperty('showMeters')){
							arguments[0].viewId = UpdateViewOnDOM({uiEvent:"ShowAudioMeters", viewId:arguments[0].viewId, showMeters:arguments[0].showMeters});
							var params = vcUtilsParam({e: this.objId, viewId: arguments[0].viewId, showMeters: arguments[0].showMeters});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['viewId', 'showMeters'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "boolean")){
						arguments[0] = UpdateViewOnDOM({uiEvent:"ShowAudioMeters", viewId:viewId, showMeters:showMeters});
						var params = vcUtilsParam({e: this.objId, viewId: arguments[0], showMeters: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointShowAudioMeters?" + params, OnComplete, OnError);
					});
				}

				this.ShowPreview = function(preview) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('preview')){
							var params = vcUtilsParam({e: this.objId, preview: arguments[0].preview});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['preview'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({e: this.objId, preview: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointShowPreview?" + params, OnComplete, OnError);
					});
				}

				this.ShowViewAt = function(viewId, x, y, width, height) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('viewId') && arguments[0].hasOwnProperty('x') && arguments[0].hasOwnProperty('y') && arguments[0].hasOwnProperty('width') && arguments[0].hasOwnProperty('height')){
							arguments[0].viewId = UpdateViewOnDOM({uiEvent:"ShowViewAt", viewId:arguments[0].viewId, x:arguments[0].x, y:arguments[0].y, width:arguments[0].width, height:arguments[0].height});
							var params = vcUtilsParam({e: this.objId, viewId: arguments[0].viewId, x: arguments[0].x, y: arguments[0].y, width: arguments[0].width, height: arguments[0].height});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['viewId', 'x', 'y', 'width', 'height'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 5 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number")){
						arguments[0] = UpdateViewOnDOM({uiEvent:"ShowViewAt", viewId:viewId, x:x, y:y, width:width, height:height});
						var params = vcUtilsParam({e: this.objId, viewId: arguments[0], x: arguments[1], y: arguments[2], width: arguments[3], height: arguments[4]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointShowViewAt?" + params, OnComplete, OnError);
					});
				}

				this.ShowViewAtPoints = function(viewId, x, y, width, height) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('viewId') && arguments[0].hasOwnProperty('x') && arguments[0].hasOwnProperty('y') && arguments[0].hasOwnProperty('width') && arguments[0].hasOwnProperty('height')){
							arguments[0].viewId = UpdateViewOnDOM({uiEvent:"ShowViewAtPoints", viewId:arguments[0].viewId, x:arguments[0].x, y:arguments[0].y, width:arguments[0].width, height:arguments[0].height});
							var params = vcUtilsParam({e: this.objId, viewId: arguments[0].viewId, x: arguments[0].x, y: arguments[0].y, width: arguments[0].width, height: arguments[0].height});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['viewId', 'x', 'y', 'width', 'height'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 5 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number")){
						arguments[0] = UpdateViewOnDOM({uiEvent:"ShowViewAtPoints", viewId:viewId, x:x, y:y, width:width, height:height});
						var params = vcUtilsParam({e: this.objId, viewId: arguments[0], x: arguments[1], y: arguments[2], width: arguments[3], height: arguments[4]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointShowViewAtPoints?" + params, OnComplete, OnError);
					});
				}

				this.ShowViewLabel = function(viewId, showLabel) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('viewId') && arguments[0].hasOwnProperty('showLabel')){
							arguments[0].viewId = UpdateViewOnDOM({uiEvent:"ShowViewLabel", viewId:arguments[0].viewId, showLabel:arguments[0].showLabel});
							var params = vcUtilsParam({e: this.objId, viewId: arguments[0].viewId, showLabel: arguments[0].showLabel});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['viewId', 'showLabel'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "boolean")){
						arguments[0] = UpdateViewOnDOM({uiEvent:"ShowViewLabel", viewId:viewId, showLabel:showLabel});
						var params = vcUtilsParam({e: this.objId, viewId: arguments[0], showLabel: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointShowViewLabel?" + params, OnComplete, OnError);
					});
				}

				this.ShowWindowSharePreview = function(preview) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('preview')){
							var params = vcUtilsParam({e: this.objId, preview: arguments[0].preview});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['preview'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({e: this.objId, preview: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointShowWindowSharePreview?" + params, OnComplete, OnError);
					});
				}

				this.StartGoogleAnalyticsService = function(trackingId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('trackingId')){
							var params = vcUtilsParam({e: this.objId, trackingId: arguments[0].trackingId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['trackingId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({e: this.objId, trackingId: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointStartGoogleAnalyticsService?" + params, OnComplete, OnError);
					});
				}

				this.StartInsightsService = function(serverUrl) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('serverUrl')){
							var params = vcUtilsParam({e: this.objId, serverUrl: arguments[0].serverUrl});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['serverUrl'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({e: this.objId, serverUrl: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointStartInsightsService?" + params, OnComplete, OnError);
					});
				}

				this.StartLocalCameraDetection = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointStartLocalCameraDetection?" + params, OnComplete, OnError);
					});
				}

				this.StartLocalMicrophoneDetection = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointStartLocalMicrophoneDetection?" + params, OnComplete, OnError);
					});
				}

				this.StartLocalMonitorDetection = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointStartLocalMonitorDetection?" + params, OnComplete, OnError);
					});
				}

				this.StartLocalSpeakerDetection = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointStartLocalSpeakerDetection?" + params, OnComplete, OnError);
					});
				}

				this.StartLocalWindowShareDetection = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointStartLocalWindowShareDetection?" + params, OnComplete, OnError);
					});
				}

				this.StartLocationDetection = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointStartLocationDetection?" + params, OnComplete, OnError);
					});
				}

				this.StartNextLogFile = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointStartNextLogFile?" + params, OnComplete, OnError);
					});
				}

				this.StopGoogleAnalyticsService = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointStopGoogleAnalyticsService?" + params, OnComplete, OnError);
					});
				}

				this.StopInsightsService = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointStopInsightsService?" + params, OnComplete, OnError);
					});
				}

				this.StopLocalCameraDetection = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointStopLocalCameraDetection?" + params, OnComplete, OnError);
					});
				}

				this.StopLocalMicrophoneDetection = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointStopLocalMicrophoneDetection?" + params, OnComplete, OnError);
					});
				}

				this.StopLocalMonitorDetection = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointStopLocalMonitorDetection?" + params, OnComplete, OnError);
					});
				}

				this.StopLocalSpeakerDetection = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointStopLocalSpeakerDetection?" + params, OnComplete, OnError);
					});
				}

				this.StopLocalWindowShareDetection = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointStopLocalWindowShareDetection?" + params, OnComplete, OnError);
					});
				}

				this.StopLocationDetection = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointStopLocationDetection?" + params, OnComplete, OnError);
					});
				}

				this.SwapStreamsBetweenViews = function(firstView, secondView) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('firstView') && arguments[0].hasOwnProperty('secondView')){
							// arguments[0].firstViewarguments[0].secondView = UpdateViewOnDOM({uiEvent:"SwapStreamsBetweenViews", firstView:arguments[0].firstView, secondView:arguments[0].secondView});
							var params = vcUtilsParam({e: this.objId, firstView: arguments[0].firstView, secondView: arguments[0].secondView});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['firstView', 'secondView'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string")){
						// arguments[0]arguments[1] = UpdateViewOnDOM({uiEvent:"SwapStreamsBetweenViews", firstView:firstView, secondView:secondView});
						var params = vcUtilsParam({e: this.objId, firstView: arguments[0], secondView: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointSwapStreamsBetweenViews?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterCameraEffectErrorListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointUnregisterCameraEffectErrorListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterDisableVideoOnLowBwEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointUnregisterDisableVideoOnLowBwEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterErrorEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointUnregisterErrorEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterLocalCameraEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointUnregisterLocalCameraEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterLocalCameraFrameListener = function(localCamera) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localCamera')){
							var params = vcUtilsParam({e: this.objId, localCamera: (arguments[0].localCamera ? arguments[0].localCamera.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localCamera'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({e: this.objId, localCamera: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointUnregisterLocalCameraFrameListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterLocalMicrophoneEnergyListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointUnregisterLocalMicrophoneEnergyListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterLocalMicrophoneEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointUnregisterLocalMicrophoneEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterLocalMicrophoneFrameListener = function(localMicrophone) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localMicrophone')){
							var params = vcUtilsParam({e: this.objId, localMicrophone: (arguments[0].localMicrophone ? arguments[0].localMicrophone.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localMicrophone'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({e: this.objId, localMicrophone: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointUnregisterLocalMicrophoneFrameListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterLocalMonitorEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointUnregisterLocalMonitorEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterLocalMonitorFrameListener = function(localMonitor) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localMonitor')){
							var params = vcUtilsParam({e: this.objId, localMonitor: (arguments[0].localMonitor ? arguments[0].localMonitor.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localMonitor'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({e: this.objId, localMonitor: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointUnregisterLocalMonitorFrameListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterLocalRendererEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointUnregisterLocalRendererEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterLocalSpeakerEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointUnregisterLocalSpeakerEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterLocalWindowShareEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointUnregisterLocalWindowShareEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterLocalWindowShareFrameListener = function(localWindowShare) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localWindowShare')){
							var params = vcUtilsParam({e: this.objId, localWindowShare: (arguments[0].localWindowShare ? arguments[0].localWindowShare.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localWindowShare'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({e: this.objId, localWindowShare: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointUnregisterLocalWindowShareFrameListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterLogEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointUnregisterLogEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterNetworkInterfaceEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointUnregisterNetworkInterfaceEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterPlugin = function(plugin) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('plugin')){
							var params = vcUtilsParam({e: this.objId, plugin: arguments[0].plugin});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['plugin'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({e: this.objId, plugin: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointUnregisterPlugin?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterReconnectEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointUnregisterReconnectEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterRemoteCameraEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointUnregisterRemoteCameraEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterRemoteCameraFrameListener = function(remoteCamera) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('remoteCamera')){
							var params = vcUtilsParam({e: this.objId, remoteCamera: (arguments[0].remoteCamera ? arguments[0].remoteCamera.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['remoteCamera'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({e: this.objId, remoteCamera: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointUnregisterRemoteCameraFrameListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterRemoteMicrophoneEnergyListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointUnregisterRemoteMicrophoneEnergyListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterRemoteMicrophoneEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointUnregisterRemoteMicrophoneEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterRemoteMicrophoneFrameListener = function(remoteMicrophone) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('remoteMicrophone')){
							var params = vcUtilsParam({e: this.objId, remoteMicrophone: (arguments[0].remoteMicrophone ? arguments[0].remoteMicrophone.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['remoteMicrophone'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({e: this.objId, remoteMicrophone: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointUnregisterRemoteMicrophoneFrameListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterRemoteRendererEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointUnregisterRemoteRendererEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterRemoteSpeakerEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointUnregisterRemoteSpeakerEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterRemoteWindowShareEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointUnregisterRemoteWindowShareEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterRemoteWindowShareFrameListener = function(remoteWindowShare) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('remoteWindowShare')){
							var params = vcUtilsParam({e: this.objId, remoteWindowShare: (arguments[0].remoteWindowShare ? arguments[0].remoteWindowShare.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['remoteWindowShare'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({e: this.objId, remoteWindowShare: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointUnregisterRemoteWindowShareFrameListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterVirtualAudioSourceEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointUnregisterVirtualAudioSourceEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterVirtualVideoSourceEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({e: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({e: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointUnregisterVirtualVideoSourceEventListener?" + params, OnComplete, OnError);
					});
				}

				this.ValidateLicenseKey = function(licenseKey, userName) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('licenseKey') && arguments[0].hasOwnProperty('userName')){
							var params = vcUtilsParam({e: this.objId, licenseKey: arguments[0].licenseKey, userName: arguments[0].userName});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['licenseKey', 'userName'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string")){
						var params = vcUtilsParam({e: this.objId, licenseKey: arguments[0], userName: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointValidateLicenseKey?" + params, OnComplete, OnError);
					});
				}

				this.VirtualCameraSelectAdvanced = function(virtualCamera) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('virtualCamera')){
							var params = vcUtilsParam({e: this.objId, virtualCamera: (arguments[0].virtualCamera ? arguments[0].virtualCamera.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['virtualCamera'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({e: this.objId, virtualCamera: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointVirtualCameraSelectAdvanced?" + params, OnComplete, OnError);
					});
				}

				this.VirtualSourceWindowShareSelectAdvanced = function(virtualWindowShare) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('virtualWindowShare')){
							var params = vcUtilsParam({e: this.objId, virtualWindowShare: (arguments[0].virtualWindowShare ? arguments[0].virtualWindowShare.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['virtualWindowShare'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({e: this.objId, virtualWindowShare: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointVirtualSourceWindowShareSelectAdvanced?" + params, OnComplete, OnError);
					});
				}

				this.VirtualVideoSourceUnselectAdvanced = function(virtualVideoSource) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('virtualVideoSource')){
							var params = vcUtilsParam({e: this.objId, virtualVideoSource: (arguments[0].virtualVideoSource ? arguments[0].virtualVideoSource.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['virtualVideoSource'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({e: this.objId, virtualVideoSource: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoEndpointVirtualVideoSourceUnselectAdvanced?" + params, OnComplete, OnError);
					});
				}

				return this;
			}

			this.VidyoConsoleLogger = function(){

				this.GetBase = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({logger: arguments[0].logger});
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({logger: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoConsoleLoggerGetBase?" + params, OnComplete, OnError);
					});
				}

				return this;
			}

			this.VidyoParticipant = function(){

				this.Destruct = function() {
					GetRequest("VidyoParticipantDestruct?" + vcUtilsParam({ obj: this.objId }), function(){}, function(){});
					delete objects[this.objId];
				}

				this.GetApplicationType = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({p: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({p: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoParticipantGetApplicationType?" + params, OnComplete, OnError);
					});
				}

				this.GetClearanceType = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({p: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({p: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoParticipantGetClearanceType?" + params, OnComplete, OnError);
					});
				}

				this.GetContact = function(contact) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('contact')){
							var params = vcUtilsParam({p: this.objId, contact: JSON.stringify(arguments[0].contact)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['contact'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({p: this.objId, contact: JSON.stringify(arguments[0])});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							if(contact&& response.data.contact)
								vcUtilsExtend(contact, response.data.contact);
							resolve(response.data);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoParticipantGetContact?" + params, OnComplete, OnError);
					});
				}

				this.GetContactAsync = function(onComplete) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onComplete')){
							this.VidyoParticipantOnGetContactComplete = arguments[0].onComplete;
							var params = vcUtilsParam({p: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onComplete'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoParticipantOnGetContactComplete = onComplete;
						var params = vcUtilsParam({p: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoParticipantGetContactAsync?" + params, OnComplete, OnError);
					});
				}

				this.GetId = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({p: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({p: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoParticipantGetId?" + params, OnComplete, OnError);
					});
				}

				this.GetName = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({p: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({p: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoParticipantGetName?" + params, OnComplete, OnError);
					});
				}

				this.GetTrust = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({p: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({p: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoParticipantGetTrust?" + params, OnComplete, OnError);
					});
				}

				this.GetUserId = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({p: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({p: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoParticipantGetUserId?" + params, OnComplete, OnError);
					});
				}

				this.IsHidden = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({p: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({p: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoParticipantIsHidden?" + params, OnComplete, OnError);
					});
				}

				this.IsLocal = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({p: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({p: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoParticipantIsLocal?" + params, OnComplete, OnError);
					});
				}

				this.IsRecording = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({p: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({p: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoParticipantIsRecording?" + params, OnComplete, OnError);
					});
				}

				this.IsSelectable = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({p: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({p: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoParticipantIsSelectable?" + params, OnComplete, OnError);
					});
				}

				return this;
			}

			this.VidyoRoom = function(){

				this.Destruct = function() {
					GetRequest("VidyoRoomDestruct?" + vcUtilsParam({ obj: this.objId }), function(){}, function(){});
					delete objects[this.objId];
				}

				this.AcceptIncoming = function(onIncomingEntered, onIncomingExited) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onIncomingEntered') && arguments[0].hasOwnProperty('onIncomingExited')){
							this.VidyoRoomOnIncomingEntered = arguments[0].onIncomingEntered;
							this.VidyoRoomOnIncomingExited = arguments[0].onIncomingExited;
							var params = vcUtilsParam({r: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onIncomingEntered', 'onIncomingExited'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function")){
						this.VidyoRoomOnIncomingEntered = onIncomingEntered;
						this.VidyoRoomOnIncomingExited = onIncomingExited;
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomAcceptIncoming?" + params, OnComplete, OnError);
					});
				}

				this.AcquireMediaRoute = function(onMediaRouteAcquired, onMediaRouteAcquireFailed) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onMediaRouteAcquired') && arguments[0].hasOwnProperty('onMediaRouteAcquireFailed')){
							this.VidyoRoomOnMediaRouteAcquired = arguments[0].onMediaRouteAcquired;
							this.VidyoRoomOnMediaRouteAcquireFailed = arguments[0].onMediaRouteAcquireFailed;
							var params = vcUtilsParam({r: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onMediaRouteAcquired', 'onMediaRouteAcquireFailed'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function")){
						this.VidyoRoomOnMediaRouteAcquired = onMediaRouteAcquired;
						this.VidyoRoomOnMediaRouteAcquireFailed = onMediaRouteAcquireFailed;
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomAcquireMediaRoute?" + params, OnComplete, OnError);
					});
				}

				this.AddLocalCamera = function(localCamera, removeOthers) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localCamera') && arguments[0].hasOwnProperty('removeOthers')){
							var params = vcUtilsParam({r: this.objId, localCamera: (arguments[0].localCamera ? arguments[0].localCamera.objId : 0), removeOthers: arguments[0].removeOthers});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localCamera', 'removeOthers'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "boolean")){
						var params = vcUtilsParam({r: this.objId, localCamera: (arguments[0] ? arguments[0].objId : 0), removeOthers: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomAddLocalCamera?" + params, OnComplete, OnError);
					});
				}

				this.AddLocalMicrophone = function(localMicrophone, removeOthers, isAES) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localMicrophone') && arguments[0].hasOwnProperty('removeOthers') && arguments[0].hasOwnProperty('isAES')){
							var params = vcUtilsParam({r: this.objId, localMicrophone: (arguments[0].localMicrophone ? arguments[0].localMicrophone.objId : 0), removeOthers: arguments[0].removeOthers, isAES: arguments[0].isAES});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localMicrophone', 'removeOthers', 'isAES'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "boolean") && (typeof(arguments[2]) === "boolean")){
						var params = vcUtilsParam({r: this.objId, localMicrophone: (arguments[0] ? arguments[0].objId : 0), removeOthers: arguments[1], isAES: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomAddLocalMicrophone?" + params, OnComplete, OnError);
					});
				}

				this.AddLocalMonitor = function(localMonitor, removeOthers) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localMonitor') && arguments[0].hasOwnProperty('removeOthers')){
							var params = vcUtilsParam({r: this.objId, localMonitor: (arguments[0].localMonitor ? arguments[0].localMonitor.objId : 0), removeOthers: arguments[0].removeOthers});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localMonitor', 'removeOthers'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "boolean")){
						var params = vcUtilsParam({r: this.objId, localMonitor: (arguments[0] ? arguments[0].objId : 0), removeOthers: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomAddLocalMonitor?" + params, OnComplete, OnError);
					});
				}

				this.AddLocalRenderer = function(localRenderer, removeOthers) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localRenderer') && arguments[0].hasOwnProperty('removeOthers')){
							var params = vcUtilsParam({r: this.objId, localRenderer: (arguments[0].localRenderer ? arguments[0].localRenderer.objId : 0), removeOthers: arguments[0].removeOthers});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localRenderer', 'removeOthers'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "boolean")){
						var params = vcUtilsParam({r: this.objId, localRenderer: (arguments[0] ? arguments[0].objId : 0), removeOthers: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomAddLocalRenderer?" + params, OnComplete, OnError);
					});
				}

				this.AddLocalSpeaker = function(localSpeaker, removeOthers, isAES) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localSpeaker') && arguments[0].hasOwnProperty('removeOthers') && arguments[0].hasOwnProperty('isAES')){
							var params = vcUtilsParam({r: this.objId, localSpeaker: (arguments[0].localSpeaker ? arguments[0].localSpeaker.objId : 0), removeOthers: arguments[0].removeOthers, isAES: arguments[0].isAES});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localSpeaker', 'removeOthers', 'isAES'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "boolean") && (typeof(arguments[2]) === "boolean")){
						var params = vcUtilsParam({r: this.objId, localSpeaker: (arguments[0] ? arguments[0].objId : 0), removeOthers: arguments[1], isAES: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomAddLocalSpeaker?" + params, OnComplete, OnError);
					});
				}

				this.AddLocalWindowShare = function(localWindowShare, removeOthers) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localWindowShare') && arguments[0].hasOwnProperty('removeOthers')){
							var params = vcUtilsParam({r: this.objId, localWindowShare: (arguments[0].localWindowShare ? arguments[0].localWindowShare.objId : 0), removeOthers: arguments[0].removeOthers});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localWindowShare', 'removeOthers'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "boolean")){
						var params = vcUtilsParam({r: this.objId, localWindowShare: (arguments[0] ? arguments[0].objId : 0), removeOthers: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomAddLocalWindowShare?" + params, OnComplete, OnError);
					});
				}

				this.AddVirtualAudioSource = function(virtualAudioSource, removeOthers) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('virtualAudioSource') && arguments[0].hasOwnProperty('removeOthers')){
							var params = vcUtilsParam({r: this.objId, virtualAudioSource: (arguments[0].virtualAudioSource ? arguments[0].virtualAudioSource.objId : 0), removeOthers: arguments[0].removeOthers});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['virtualAudioSource', 'removeOthers'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "boolean")){
						var params = vcUtilsParam({r: this.objId, virtualAudioSource: (arguments[0] ? arguments[0].objId : 0), removeOthers: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomAddVirtualAudioSource?" + params, OnComplete, OnError);
					});
				}

				this.AddVirtualVideoSource = function(virtualVideoSource, removeOthers) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('virtualVideoSource') && arguments[0].hasOwnProperty('removeOthers')){
							var params = vcUtilsParam({r: this.objId, virtualVideoSource: (arguments[0].virtualVideoSource ? arguments[0].virtualVideoSource.objId : 0), removeOthers: arguments[0].removeOthers});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['virtualVideoSource', 'removeOthers'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "boolean")){
						var params = vcUtilsParam({r: this.objId, virtualVideoSource: (arguments[0] ? arguments[0].objId : 0), removeOthers: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomAddVirtualVideoSource?" + params, OnComplete, OnError);
					});
				}

				this.ApproveRaisedHand = function(participant, requestId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('participant') && arguments[0].hasOwnProperty('requestId')){
							var params = vcUtilsParam({r: this.objId, participant: (arguments[0].participant ? arguments[0].participant.objId : 0), requestId: arguments[0].requestId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['participant', 'requestId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "string")){
						var params = vcUtilsParam({r: this.objId, participant: (arguments[0] ? arguments[0].objId : 0), requestId: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomApproveRaisedHand?" + params, OnComplete, OnError);
					});
				}

				this.BootAllParticipants = function(reason, requestId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('reason') && arguments[0].hasOwnProperty('requestId')){
							var params = vcUtilsParam({r: this.objId, reason: arguments[0].reason, requestId: arguments[0].requestId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['reason', 'requestId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string")){
						var params = vcUtilsParam({r: this.objId, reason: arguments[0], requestId: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomBootAllParticipants?" + params, OnComplete, OnError);
					});
				}

				this.BootParticipant = function(userId, reason, requestId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('userId') && arguments[0].hasOwnProperty('reason') && arguments[0].hasOwnProperty('requestId')){
							var params = vcUtilsParam({r: this.objId, userId: arguments[0].userId, reason: arguments[0].reason, requestId: arguments[0].requestId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['userId', 'reason', 'requestId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "string")){
						var params = vcUtilsParam({r: this.objId, userId: arguments[0], reason: arguments[1], requestId: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomBootParticipant?" + params, OnComplete, OnError);
					});
				}

				this.CancelInvite = function(inviteeId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('inviteeId')){
							var params = vcUtilsParam({r: this.objId, inviteeId: arguments[0].inviteeId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['inviteeId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({r: this.objId, inviteeId: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomCancelInvite?" + params, OnComplete, OnError);
					});
				}

				this.CreateParticipantProfile = function(p, userId, microphone, camera, windowShare, chat) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('p') && arguments[0].hasOwnProperty('userId') && arguments[0].hasOwnProperty('microphone') && arguments[0].hasOwnProperty('camera') && arguments[0].hasOwnProperty('windowShare') && arguments[0].hasOwnProperty('chat')){
							var params = vcUtilsParam({r: this.objId, p: JSON.stringify(arguments[0].p), userId: arguments[0].userId, microphone: arguments[0].microphone, camera: arguments[0].camera, windowShare: arguments[0].windowShare, chat: arguments[0].chat});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['p', 'userId', 'microphone', 'camera', 'windowShare', 'chat'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 6 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "string") && (typeof(arguments[3]) === "string") && (typeof(arguments[4]) === "string") && (typeof(arguments[5]) === "string")){
						var params = vcUtilsParam({r: this.objId, p: JSON.stringify(arguments[0]), userId: arguments[1], microphone: arguments[2], camera: arguments[3], windowShare: arguments[4], chat: arguments[5]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							if(p&& response.data.p)
								vcUtilsExtend(p, response.data.p);
							resolve(response.data);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomCreateParticipantProfile?" + params, OnComplete, OnError);
					});
				}

				this.Delete = function(onDeleteResult) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onDeleteResult')){
							this.VidyoRoomOnDeleteResult = arguments[0].onDeleteResult;
							var params = vcUtilsParam({r: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onDeleteResult'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoRoomOnDeleteResult = onDeleteResult;
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomDelete?" + params, OnComplete, OnError);
					});
				}

				this.DestroyParticipantProfile = function(p) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('p')){
							var params = vcUtilsParam({r: this.objId, p: JSON.stringify(arguments[0].p)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['p'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({r: this.objId, p: JSON.stringify(arguments[0])});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							if(p&& response.data.p)
								vcUtilsExtend(p, response.data.p);
							resolve(response.data);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomDestroyParticipantProfile?" + params, OnComplete, OnError);
					});
				}

				this.DisableMedia = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({r: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomDisableMedia?" + params, OnComplete, OnError);
					});
				}

				this.DismissAllRaisedHands = function(requestId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('requestId')){
							var params = vcUtilsParam({r: this.objId, requestId: arguments[0].requestId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['requestId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({r: this.objId, requestId: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomDismissAllRaisedHands?" + params, OnComplete, OnError);
					});
				}

				this.DismissRaisedHand = function(participants, requestId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('participants') && arguments[0].hasOwnProperty('requestId')){
							var params = vcUtilsParam({r: this.objId, participants: JSON.stringify({"participants": arguments[0].participants}), requestId: arguments[0].requestId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['participants', 'requestId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "string")){
						var params = vcUtilsParam({r: this.objId, participants: JSON.stringify({"participants": arguments[0]}), requestId: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomDismissRaisedHand?" + params, OnComplete, OnError);
					});
				}

				this.EnableMedia = function(onMediaEnabled, onMediaFailed, onMediaDisabled) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onMediaEnabled') && arguments[0].hasOwnProperty('onMediaFailed') && arguments[0].hasOwnProperty('onMediaDisabled')){
							this.VidyoRoomOnMediaEnabled = arguments[0].onMediaEnabled;
							this.VidyoRoomOnMediaFailed = arguments[0].onMediaFailed;
							this.VidyoRoomOnMediaDisabled = arguments[0].onMediaDisabled;
							var params = vcUtilsParam({r: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onMediaEnabled', 'onMediaFailed', 'onMediaDisabled'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function")){
						this.VidyoRoomOnMediaEnabled = onMediaEnabled;
						this.VidyoRoomOnMediaFailed = onMediaFailed;
						this.VidyoRoomOnMediaDisabled = onMediaDisabled;
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomEnableMedia?" + params, OnComplete, OnError);
					});
				}

				this.Enter = function(password, onEntered, onExited) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('password') && arguments[0].hasOwnProperty('onEntered') && arguments[0].hasOwnProperty('onExited')){
							this.VidyoRoomOnEntered = arguments[0].onEntered;
							this.VidyoRoomOnExited = arguments[0].onExited;
							var params = vcUtilsParam({r: this.objId, password: arguments[0].password});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['password', 'onEntered', 'onExited'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function")){
						this.VidyoRoomOnEntered = onEntered;
						this.VidyoRoomOnExited = onExited;
						var params = vcUtilsParam({r: this.objId, password: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomEnter?" + params, OnComplete, OnError);
					});
				}

				this.GetHistory = function(numMessages, onGetHistoryResults) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('numMessages') && arguments[0].hasOwnProperty('onGetHistoryResults')){
							this.VidyoRoomOnGetHistoryResults = arguments[0].onGetHistoryResults;
							var params = vcUtilsParam({r: this.objId, numMessages: arguments[0].numMessages});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['numMessages', 'onGetHistoryResults'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "function")){
						this.VidyoRoomOnGetHistoryResults = onGetHistoryResults;
						var params = vcUtilsParam({r: this.objId, numMessages: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomGetHistory?" + params, OnComplete, OnError);
					});
				}

				this.GetHistoryById = function(messageId, numMessagesBefore, numMessagesAfter, onGetHistoryResults) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('messageId') && arguments[0].hasOwnProperty('numMessagesBefore') && arguments[0].hasOwnProperty('numMessagesAfter') && arguments[0].hasOwnProperty('onGetHistoryResults')){
							this.VidyoRoomOnGetHistoryResults = arguments[0].onGetHistoryResults;
							var params = vcUtilsParam({r: this.objId, messageId: arguments[0].messageId, numMessagesBefore: arguments[0].numMessagesBefore, numMessagesAfter: arguments[0].numMessagesAfter});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['messageId', 'numMessagesBefore', 'numMessagesAfter', 'onGetHistoryResults'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "function")){
						this.VidyoRoomOnGetHistoryResults = onGetHistoryResults;
						var params = vcUtilsParam({r: this.objId, messageId: arguments[0], numMessagesBefore: arguments[1], numMessagesAfter: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomGetHistoryById?" + params, OnComplete, OnError);
					});
				}

				this.GetHistoryByTime = function(time, numMessagesBefore, numMessagesAfter, onGetHistoryResults) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('time') && arguments[0].hasOwnProperty('numMessagesBefore') && arguments[0].hasOwnProperty('numMessagesAfter') && arguments[0].hasOwnProperty('onGetHistoryResults')){
							this.VidyoRoomOnGetHistoryResults = arguments[0].onGetHistoryResults;
							var params = vcUtilsParam({r: this.objId, time: arguments[0].time, numMessagesBefore: arguments[0].numMessagesBefore, numMessagesAfter: arguments[0].numMessagesAfter});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['time', 'numMessagesBefore', 'numMessagesAfter', 'onGetHistoryResults'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "function")){
						this.VidyoRoomOnGetHistoryResults = onGetHistoryResults;
						var params = vcUtilsParam({r: this.objId, time: arguments[0], numMessagesBefore: arguments[1], numMessagesAfter: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomGetHistoryByTime?" + params, OnComplete, OnError);
					});
				}

				this.GetId = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({r: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomGetId?" + params, OnComplete, OnError);
					});
				}

				this.GetRoomProperties = function(onGetRoomPropertiesResult) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onGetRoomPropertiesResult')){
							this.VidyoRoomOnGetRoomPropertiesResult = arguments[0].onGetRoomPropertiesResult;
							var params = vcUtilsParam({r: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onGetRoomPropertiesResult'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoRoomOnGetRoomPropertiesResult = onGetRoomPropertiesResult;
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomGetRoomProperties?" + params, OnComplete, OnError);
					});
				}

				this.GetSelectedLocalCameras = function(onComplete) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onComplete')){
							this.VidyoRoomOnGetSelectedLocalCamerasComplete = arguments[0].onComplete;
							var params = vcUtilsParam({r: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onComplete'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoRoomOnGetSelectedLocalCamerasComplete = onComplete;
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomGetSelectedLocalCameras?" + params, OnComplete, OnError);
					});
				}

				this.GetSelectedLocalMicrophones = function(onComplete) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onComplete')){
							this.VidyoRoomOnGetSelectedLocalMicrophonesComplete = arguments[0].onComplete;
							var params = vcUtilsParam({r: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onComplete'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoRoomOnGetSelectedLocalMicrophonesComplete = onComplete;
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomGetSelectedLocalMicrophones?" + params, OnComplete, OnError);
					});
				}

				this.GetSelectedLocalMonitors = function(monitors) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('monitors')){
							this.VidyoRoomOnGetSelectedLocalMonitorsComplete = arguments[0].monitors;
							var params = vcUtilsParam({r: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['monitors'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoRoomOnGetSelectedLocalMonitorsComplete = monitors;
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomGetSelectedLocalMonitors?" + params, OnComplete, OnError);
					});
				}

				this.GetSelectedLocalRenderers = function(onComplete) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onComplete')){
							this.VidyoRoomOnGetSelectedLocalRenderersComplete = arguments[0].onComplete;
							var params = vcUtilsParam({r: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onComplete'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoRoomOnGetSelectedLocalRenderersComplete = onComplete;
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomGetSelectedLocalRenderers?" + params, OnComplete, OnError);
					});
				}

				this.GetSelectedLocalSpeakers = function(onComplete) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onComplete')){
							this.VidyoRoomOnGetSelectedLocalSpeakersComplete = arguments[0].onComplete;
							var params = vcUtilsParam({r: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onComplete'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoRoomOnGetSelectedLocalSpeakersComplete = onComplete;
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomGetSelectedLocalSpeakers?" + params, OnComplete, OnError);
					});
				}

				this.GetSelectedLocalWindowShares = function(onComplete) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onComplete')){
							this.VidyoRoomOnGetSelectedLocalWindowSharesComplete = arguments[0].onComplete;
							var params = vcUtilsParam({r: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onComplete'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoRoomOnGetSelectedLocalWindowSharesComplete = onComplete;
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomGetSelectedLocalWindowShares?" + params, OnComplete, OnError);
					});
				}

				this.GetShowThrottle = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({room: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({room: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomGetShowThrottle?" + params, OnComplete, OnError);
					});
				}

				this.GetShowThrottleTimerInterval = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({room: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({room: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomGetShowThrottleTimerInterval?" + params, OnComplete, OnError);
					});
				}

				this.GetShowThrottleWindowSizeChangeThreshold = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({room: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({room: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomGetShowThrottleWindowSizeChangeThreshold?" + params, OnComplete, OnError);
					});
				}

				this.GetType = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({r: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomGetType?" + params, OnComplete, OnError);
					});
				}

				this.GetUser = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({r: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomGetUser?" + params, OnComplete, OnError);
					});
				}

				this.HideStatisticsDialog = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({r: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomHideStatisticsDialog?" + params, OnComplete, OnError);
					});
				}

				this.Invite = function(userId, message, onInviteResult) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('userId') && arguments[0].hasOwnProperty('message') && arguments[0].hasOwnProperty('onInviteResult')){
							this.VidyoRoomOnInviteResult = arguments[0].onInviteResult;
							var params = vcUtilsParam({r: this.objId, userId: arguments[0].userId, message: arguments[0].message});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['userId', 'message', 'onInviteResult'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "function")){
						this.VidyoRoomOnInviteResult = onInviteResult;
						var params = vcUtilsParam({r: this.objId, userId: arguments[0], message: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomInvite?" + params, OnComplete, OnError);
					});
				}

				this.InviteAll = function(message, onInviteResult) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('message') && arguments[0].hasOwnProperty('onInviteResult')){
							this.VidyoRoomOnInviteResult = arguments[0].onInviteResult;
							var params = vcUtilsParam({r: this.objId, message: arguments[0].message});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['message', 'onInviteResult'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "function")){
						this.VidyoRoomOnInviteResult = onInviteResult;
						var params = vcUtilsParam({r: this.objId, message: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomInviteAll?" + params, OnComplete, OnError);
					});
				}

				this.InviteN = function(userIds, message, onInviteResult) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('userIds') && arguments[0].hasOwnProperty('message') && arguments[0].hasOwnProperty('onInviteResult')){
							this.VidyoRoomOnInviteResult = arguments[0].onInviteResult;
							var params = vcUtilsParam({r: this.objId, userIds: JSON.stringify({"userIds": arguments[0].userIds}), message: arguments[0].message});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['userIds', 'message', 'onInviteResult'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "function")){
						this.VidyoRoomOnInviteResult = onInviteResult;
						var params = vcUtilsParam({r: this.objId, userIds: JSON.stringify({"userIds": arguments[0]}), message: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomInviteN?" + params, OnComplete, OnError);
					});
				}

				this.Leave = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({r: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomLeave?" + params, OnComplete, OnError);
					});
				}

				this.LockRoom = function(onLockRoomResult) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onLockRoomResult')){
							this.VidyoRoomOnLockRoomResult = arguments[0].onLockRoomResult;
							var params = vcUtilsParam({r: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onLockRoomResult'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoRoomOnLockRoomResult = onLockRoomResult;
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomLockRoom?" + params, OnComplete, OnError);
					});
				}

				this.MessageSearch = function(searchText, index, pageSize, onMessageSearchResults) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('searchText') && arguments[0].hasOwnProperty('index') && arguments[0].hasOwnProperty('pageSize') && arguments[0].hasOwnProperty('onMessageSearchResults')){
							this.VidyoRoomOnMessageSearchResults = arguments[0].onMessageSearchResults;
							var params = vcUtilsParam({r: this.objId, searchText: arguments[0].searchText, index: arguments[0].index, pageSize: arguments[0].pageSize});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['searchText', 'index', 'pageSize', 'onMessageSearchResults'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "function")){
						this.VidyoRoomOnMessageSearchResults = onMessageSearchResults;
						var params = vcUtilsParam({r: this.objId, searchText: arguments[0], index: arguments[1], pageSize: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomMessageSearch?" + params, OnComplete, OnError);
					});
				}

				this.PauseRecording = function(onRecordingServicePauseResultCallback) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onRecordingServicePauseResultCallback')){
							this.VidyoRoomOnRecordingServicePauseResult = arguments[0].onRecordingServicePauseResultCallback;
							var params = vcUtilsParam({r: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onRecordingServicePauseResultCallback'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoRoomOnRecordingServicePauseResult = onRecordingServicePauseResultCallback;
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomPauseRecording?" + params, OnComplete, OnError);
					});
				}

				this.RaiseHand = function(raiseHandResponse, requestId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('raiseHandResponse') && arguments[0].hasOwnProperty('requestId')){
							this.VidyoRoomOnRaiseHandResponse = arguments[0].raiseHandResponse;
							var params = vcUtilsParam({r: this.objId, requestId: arguments[0].requestId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['raiseHandResponse', 'requestId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "string")){
						this.VidyoRoomOnRaiseHandResponse = raiseHandResponse;
						var params = vcUtilsParam({r: this.objId, requestId: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomRaiseHand?" + params, OnComplete, OnError);
					});
				}

				this.RegisterConferenceModeEventListener = function(conferenceModeChanged) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('conferenceModeChanged')){
							this.VidyoRoomOnConferenceModeChanged = arguments[0].conferenceModeChanged;
							var params = vcUtilsParam({r: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['conferenceModeChanged'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoRoomOnConferenceModeChanged = conferenceModeChanged;
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomRegisterConferenceModeEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterConnectionPropertiesEventListener = function(onConnectionPropertiesChanged) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onConnectionPropertiesChanged')){
							this.VidyoRoomOnConnectionPropertiesChanged = arguments[0].onConnectionPropertiesChanged;
							var params = vcUtilsParam({r: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onConnectionPropertiesChanged'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoRoomOnConnectionPropertiesChanged = onConnectionPropertiesChanged;
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomRegisterConnectionPropertiesEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterHostEventListener = function(hostStatus) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('hostStatus')){
							this.VidyoRoomOnConferenceHostStatusChanged = arguments[0].hostStatus;
							var params = vcUtilsParam({r: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['hostStatus'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoRoomOnConferenceHostStatusChanged = hostStatus;
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomRegisterHostEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterInCallEventListener = function(cb) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('cb')){
							this.VidyoRoomOnInCallEvents = arguments[0].cb;
							var params = vcUtilsParam({r: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['cb'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoRoomOnInCallEvents = cb;
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomRegisterInCallEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterLectureModeEventListener = function(presenterChanged, handRaised) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('presenterChanged') && arguments[0].hasOwnProperty('handRaised')){
							this.VidyoRoomOnPresenterChanged = arguments[0].presenterChanged;
							this.VidyoRoomOnHandRaised = arguments[0].handRaised;
							var params = vcUtilsParam({room: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['presenterChanged', 'handRaised'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function")){
						this.VidyoRoomOnPresenterChanged = presenterChanged;
						this.VidyoRoomOnHandRaised = handRaised;
						var params = vcUtilsParam({room: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomRegisterLectureModeEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterMessageEventListener = function(onMessageReceived, onMessageAcknowledged, onMessageRead, onMessageTypingIndication) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onMessageReceived') && arguments[0].hasOwnProperty('onMessageAcknowledged') && arguments[0].hasOwnProperty('onMessageRead') && arguments[0].hasOwnProperty('onMessageTypingIndication')){
							this.VidyoRoomOnMessageReceived = arguments[0].onMessageReceived;
							this.VidyoRoomOnMessageAcknowledged = arguments[0].onMessageAcknowledged;
							this.VidyoRoomOnMessageRead = arguments[0].onMessageRead;
							this.VidyoRoomOnMessageTypingIndication = arguments[0].onMessageTypingIndication;
							var params = vcUtilsParam({r: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onMessageReceived', 'onMessageAcknowledged', 'onMessageRead', 'onMessageTypingIndication'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "function")){
						this.VidyoRoomOnMessageReceived = onMessageReceived;
						this.VidyoRoomOnMessageAcknowledged = onMessageAcknowledged;
						this.VidyoRoomOnMessageRead = onMessageRead;
						this.VidyoRoomOnMessageTypingIndication = onMessageTypingIndication;
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomRegisterMessageEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterModerationCommandEventListener = function(onModerationCommand) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onModerationCommand')){
							this.VidyoRoomOnModerationCommandReceived = arguments[0].onModerationCommand;
							var params = vcUtilsParam({room: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onModerationCommand'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoRoomOnModerationCommandReceived = onModerationCommand;
						var params = vcUtilsParam({room: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomRegisterModerationCommandEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterModerationResultEventListener = function(onModerationResult) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onModerationResult')){
							this.VidyoRoomOnModerationResult = arguments[0].onModerationResult;
							var params = vcUtilsParam({room: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onModerationResult'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoRoomOnModerationResult = onModerationResult;
						var params = vcUtilsParam({room: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomRegisterModerationResultEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterParticipantEventListener = function(onParticipantJoined, onParticipantLeft, onDynamicParticipantChanged, onLoudestParticipantChanged) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onParticipantJoined') && arguments[0].hasOwnProperty('onParticipantLeft') && arguments[0].hasOwnProperty('onDynamicParticipantChanged') && arguments[0].hasOwnProperty('onLoudestParticipantChanged')){
							this.VidyoRoomOnParticipantJoined = arguments[0].onParticipantJoined;
							this.VidyoRoomOnParticipantLeft = arguments[0].onParticipantLeft;
							this.VidyoRoomOnDynamicParticipantChanged = arguments[0].onDynamicParticipantChanged;
							this.VidyoRoomOnLoudestParticipantChanged = arguments[0].onLoudestParticipantChanged;
							var params = vcUtilsParam({r: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onParticipantJoined', 'onParticipantLeft', 'onDynamicParticipantChanged', 'onLoudestParticipantChanged'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "function")){
						this.VidyoRoomOnParticipantJoined = onParticipantJoined;
						this.VidyoRoomOnParticipantLeft = onParticipantLeft;
						this.VidyoRoomOnDynamicParticipantChanged = onDynamicParticipantChanged;
						this.VidyoRoomOnLoudestParticipantChanged = onLoudestParticipantChanged;
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomRegisterParticipantEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterPipEventListener = function(onPipLocationChanged) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onPipLocationChanged')){
							this.VidyoRoomOnPipLocationChanged = arguments[0].onPipLocationChanged;
							var params = vcUtilsParam({r: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onPipLocationChanged'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoRoomOnPipLocationChanged = onPipLocationChanged;
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomRegisterPipEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterRecorderInCallEventListener = function(onRecorderInCallChanged) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onRecorderInCallChanged')){
							this.VidyoRoomRecorderInCall = arguments[0].onRecorderInCallChanged;
							var params = vcUtilsParam({r: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onRecorderInCallChanged'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoRoomRecorderInCall = onRecorderInCallChanged;
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomRegisterRecorderInCallEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterResourceManagerEventListener = function(onAvailableResourcesChanged, onMaxRemoteSourcesChanged) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onAvailableResourcesChanged') && arguments[0].hasOwnProperty('onMaxRemoteSourcesChanged')){
							this.VidyoRoomOnAvailableResourcesChanged = arguments[0].onAvailableResourcesChanged;
							this.VidyoRoomOnMaxRemoteSourcesChanged = arguments[0].onMaxRemoteSourcesChanged;
							var params = vcUtilsParam({r: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onAvailableResourcesChanged', 'onMaxRemoteSourcesChanged'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function")){
						this.VidyoRoomOnAvailableResourcesChanged = onAvailableResourcesChanged;
						this.VidyoRoomOnMaxRemoteSourcesChanged = onMaxRemoteSourcesChanged;
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomRegisterResourceManagerEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterRoomPropertiesEventListener = function(onRoomPropertiesChanged) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onRoomPropertiesChanged')){
							this.VidyoRoomOnRoomPropertiesChanged = arguments[0].onRoomPropertiesChanged;
							var params = vcUtilsParam({r: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onRoomPropertiesChanged'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoRoomOnRoomPropertiesChanged = onRoomPropertiesChanged;
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomRegisterRoomPropertiesEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterSubjectEventListener = function(onSetSubject) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onSetSubject')){
							this.VidyoRoomOnSetSubject = arguments[0].onSetSubject;
							var params = vcUtilsParam({r: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onSetSubject'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoRoomOnSetSubject = onSetSubject;
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomRegisterSubjectEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterUnprocessedAudioEventListener = function(onUnprocessedAudioSupportChanged, onUnprocessedAudioStarted) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onUnprocessedAudioSupportChanged') && arguments[0].hasOwnProperty('onUnprocessedAudioStarted')){
							this.VidyoRoomOnUnprocessedAudioSupportChanged = arguments[0].onUnprocessedAudioSupportChanged;
							this.VidyoRoomOnUnprocessedAudioStarted = arguments[0].onUnprocessedAudioStarted;
							var params = vcUtilsParam({r: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onUnprocessedAudioSupportChanged', 'onUnprocessedAudioStarted'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function")){
						this.VidyoRoomOnUnprocessedAudioSupportChanged = onUnprocessedAudioSupportChanged;
						this.VidyoRoomOnUnprocessedAudioStarted = onUnprocessedAudioStarted;
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomRegisterUnprocessedAudioEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RejectIncoming = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({r: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomRejectIncoming?" + params, OnComplete, OnError);
					});
				}

				this.RemoveLocalCamera = function(localCamera) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localCamera')){
							var params = vcUtilsParam({r: this.objId, localCamera: (arguments[0].localCamera ? arguments[0].localCamera.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localCamera'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({r: this.objId, localCamera: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomRemoveLocalCamera?" + params, OnComplete, OnError);
					});
				}

				this.RemoveLocalMicrophone = function(localMicrophone) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localMicrophone')){
							var params = vcUtilsParam({r: this.objId, localMicrophone: (arguments[0].localMicrophone ? arguments[0].localMicrophone.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localMicrophone'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({r: this.objId, localMicrophone: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomRemoveLocalMicrophone?" + params, OnComplete, OnError);
					});
				}

				this.RemoveLocalMonitor = function(localMonitor) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localMonitor')){
							var params = vcUtilsParam({r: this.objId, localMonitor: (arguments[0].localMonitor ? arguments[0].localMonitor.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localMonitor'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({r: this.objId, localMonitor: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomRemoveLocalMonitor?" + params, OnComplete, OnError);
					});
				}

				this.RemoveLocalRenderer = function(localRenderer) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localRenderer')){
							var params = vcUtilsParam({r: this.objId, localRenderer: (arguments[0].localRenderer ? arguments[0].localRenderer.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localRenderer'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({r: this.objId, localRenderer: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomRemoveLocalRenderer?" + params, OnComplete, OnError);
					});
				}

				this.RemoveLocalSpeaker = function(localSpeaker) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localSpeaker')){
							var params = vcUtilsParam({r: this.objId, localSpeaker: (arguments[0].localSpeaker ? arguments[0].localSpeaker.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localSpeaker'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({r: this.objId, localSpeaker: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomRemoveLocalSpeaker?" + params, OnComplete, OnError);
					});
				}

				this.RemoveLocalWindowShare = function(localWindowShare) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('localWindowShare')){
							var params = vcUtilsParam({r: this.objId, localWindowShare: (arguments[0].localWindowShare ? arguments[0].localWindowShare.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['localWindowShare'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({r: this.objId, localWindowShare: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomRemoveLocalWindowShare?" + params, OnComplete, OnError);
					});
				}

				this.RemovePresenter = function(requestId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('requestId')){
							var params = vcUtilsParam({room: this.objId, requestId: arguments[0].requestId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['requestId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({room: this.objId, requestId: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomRemovePresenter?" + params, OnComplete, OnError);
					});
				}

				this.RemoveRoleChangeAuthorization = function(role, requestId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('role') && arguments[0].hasOwnProperty('requestId')){
							var params = vcUtilsParam({room: this.objId, role: arguments[0].role, requestId: arguments[0].requestId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['role', 'requestId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string")){
						var params = vcUtilsParam({room: this.objId, role: arguments[0], requestId: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomRemoveRoleChangeAuthorization?" + params, OnComplete, OnError);
					});
				}

				this.RemoveRoomPIN = function(onRemoveRoomPINResult) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onRemoveRoomPINResult')){
							this.VidyoRoomOnRemoveRoomPINResult = arguments[0].onRemoveRoomPINResult;
							var params = vcUtilsParam({r: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onRemoveRoomPINResult'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoRoomOnRemoveRoomPINResult = onRemoveRoomPINResult;
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomRemoveRoomPIN?" + params, OnComplete, OnError);
					});
				}

				this.RemoveVirtualAudioSource = function(virtualAudioSource) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('virtualAudioSource')){
							var params = vcUtilsParam({r: this.objId, virtualAudioSource: (arguments[0].virtualAudioSource ? arguments[0].virtualAudioSource.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['virtualAudioSource'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({r: this.objId, virtualAudioSource: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomRemoveVirtualAudioSource?" + params, OnComplete, OnError);
					});
				}

				this.RemoveVirtualVideoSource = function(virtualVideoSource) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('virtualVideoSource')){
							var params = vcUtilsParam({r: this.objId, virtualVideoSource: (arguments[0].virtualVideoSource ? arguments[0].virtualVideoSource.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['virtualVideoSource'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({r: this.objId, virtualVideoSource: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomRemoveVirtualVideoSource?" + params, OnComplete, OnError);
					});
				}

				this.ReportLocalParticipantOnJoined = function(reportLocalParticipant) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('reportLocalParticipant')){
							var params = vcUtilsParam({r: this.objId, reportLocalParticipant: arguments[0].reportLocalParticipant});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['reportLocalParticipant'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({r: this.objId, reportLocalParticipant: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomReportLocalParticipantOnJoined?" + params, OnComplete, OnError);
					});
				}

				this.RequestAudioSilenceForAll = function(requestId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('requestId')){
							var params = vcUtilsParam({room: this.objId, requestId: arguments[0].requestId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['requestId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({room: this.objId, requestId: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomRequestAudioSilenceForAll?" + params, OnComplete, OnError);
					});
				}

				this.RequestAudioSilenceForParticipant = function(userId, requestId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('userId') && arguments[0].hasOwnProperty('requestId')){
							var params = vcUtilsParam({room: this.objId, userId: arguments[0].userId, requestId: arguments[0].requestId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['userId', 'requestId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string")){
						var params = vcUtilsParam({room: this.objId, userId: arguments[0], requestId: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomRequestAudioSilenceForParticipant?" + params, OnComplete, OnError);
					});
				}

				this.RequestRoleChange = function(newRole, auth, onRequestRoleChangeResult, requestId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('newRole') && arguments[0].hasOwnProperty('auth') && arguments[0].hasOwnProperty('onRequestRoleChangeResult') && arguments[0].hasOwnProperty('requestId')){
							this.VidyoRoomOnRequestRoleChangeResult = arguments[0].onRequestRoleChangeResult;
							var params = vcUtilsParam({room: this.objId, newRole: arguments[0].newRole, auth: JSON.stringify(arguments[0].auth), requestId: arguments[0].requestId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['newRole', 'auth', 'onRequestRoleChangeResult', 'requestId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "object") && (typeof(arguments[2]) === "function") && (typeof(arguments[3]) === "string")){
						this.VidyoRoomOnRequestRoleChangeResult = onRequestRoleChangeResult;
						var params = vcUtilsParam({room: this.objId, newRole: arguments[0], auth: JSON.stringify(arguments[1]), requestId: arguments[3]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomRequestRoleChange?" + params, OnComplete, OnError);
					});
				}

				this.RequestVideoSilenceForAll = function(requestId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('requestId')){
							var params = vcUtilsParam({room: this.objId, requestId: arguments[0].requestId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['requestId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({room: this.objId, requestId: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomRequestVideoSilenceForAll?" + params, OnComplete, OnError);
					});
				}

				this.RequestVideoSilenceForParticipant = function(userId, requestId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('userId') && arguments[0].hasOwnProperty('requestId')){
							var params = vcUtilsParam({room: this.objId, userId: arguments[0].userId, requestId: arguments[0].requestId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['userId', 'requestId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string")){
						var params = vcUtilsParam({room: this.objId, userId: arguments[0], requestId: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomRequestVideoSilenceForParticipant?" + params, OnComplete, OnError);
					});
				}

				this.ResizeStatisticsDialog = function(width, height) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('width') && arguments[0].hasOwnProperty('height')){
							var params = vcUtilsParam({r: this.objId, width: arguments[0].width, height: arguments[0].height});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['width', 'height'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number")){
						var params = vcUtilsParam({r: this.objId, width: arguments[0], height: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomResizeStatisticsDialog?" + params, OnComplete, OnError);
					});
				}

				this.ResumeRecording = function(onRecordingServiceResumeResultCallback) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onRecordingServiceResumeResultCallback')){
							this.VidyoRoomOnRecordingServiceResumeResult = arguments[0].onRecordingServiceResumeResultCallback;
							var params = vcUtilsParam({r: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onRecordingServiceResumeResultCallback'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoRoomOnRecordingServiceResumeResult = onRecordingServiceResumeResultCallback;
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomResumeRecording?" + params, OnComplete, OnError);
					});
				}

				this.RevokeAudioForAll = function(revoke, requestId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('revoke') && arguments[0].hasOwnProperty('requestId')){
							var params = vcUtilsParam({room: this.objId, revoke: arguments[0].revoke, requestId: arguments[0].requestId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['revoke', 'requestId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "boolean") && (typeof(arguments[1]) === "string")){
						var params = vcUtilsParam({room: this.objId, revoke: arguments[0], requestId: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomRevokeAudioForAll?" + params, OnComplete, OnError);
					});
				}

				this.RevokeAudioForParticipant = function(userId, revoke, requestId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('userId') && arguments[0].hasOwnProperty('revoke') && arguments[0].hasOwnProperty('requestId')){
							var params = vcUtilsParam({room: this.objId, userId: arguments[0].userId, revoke: arguments[0].revoke, requestId: arguments[0].requestId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['userId', 'revoke', 'requestId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "boolean") && (typeof(arguments[2]) === "string")){
						var params = vcUtilsParam({room: this.objId, userId: arguments[0], revoke: arguments[1], requestId: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomRevokeAudioForParticipant?" + params, OnComplete, OnError);
					});
				}

				this.RevokeVideoForAll = function(revoke, requestId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('revoke') && arguments[0].hasOwnProperty('requestId')){
							var params = vcUtilsParam({room: this.objId, revoke: arguments[0].revoke, requestId: arguments[0].requestId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['revoke', 'requestId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "boolean") && (typeof(arguments[1]) === "string")){
						var params = vcUtilsParam({room: this.objId, revoke: arguments[0], requestId: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomRevokeVideoForAll?" + params, OnComplete, OnError);
					});
				}

				this.RevokeVideoForParticipant = function(userId, revoke, requestId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('userId') && arguments[0].hasOwnProperty('revoke') && arguments[0].hasOwnProperty('requestId')){
							var params = vcUtilsParam({room: this.objId, userId: arguments[0].userId, revoke: arguments[0].revoke, requestId: arguments[0].requestId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['userId', 'revoke', 'requestId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "boolean") && (typeof(arguments[2]) === "string")){
						var params = vcUtilsParam({room: this.objId, userId: arguments[0], revoke: arguments[1], requestId: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomRevokeVideoForParticipant?" + params, OnComplete, OnError);
					});
				}

				this.SendMessage = function(message) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('message')){
							var params = vcUtilsParam({r: this.objId, message: arguments[0].message});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['message'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({r: this.objId, message: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomSendMessage?" + params, OnComplete, OnError);
					});
				}

				this.SendMessageAcknowledged = function(messageId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('messageId')){
							var params = vcUtilsParam({r: this.objId, messageId: arguments[0].messageId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['messageId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({r: this.objId, messageId: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomSendMessageAcknowledged?" + params, OnComplete, OnError);
					});
				}

				this.SendMessageTypingIndication = function(typingIndication) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('typingIndication')){
							var params = vcUtilsParam({r: this.objId, typingIndication: arguments[0].typingIndication});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['typingIndication'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({r: this.objId, typingIndication: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomSendMessageTypingIndication?" + params, OnComplete, OnError);
					});
				}

				this.SendPrivateMessage = function(participant, message) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('participant') && arguments[0].hasOwnProperty('message')){
							var params = vcUtilsParam({r: this.objId, participant: (arguments[0].participant ? arguments[0].participant.objId : 0), message: arguments[0].message});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['participant', 'message'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "string")){
						var params = vcUtilsParam({r: this.objId, participant: (arguments[0] ? arguments[0].objId : 0), message: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomSendPrivateMessage?" + params, OnComplete, OnError);
					});
				}

				this.SetDefaultProfile = function(profile, onSetRoomPropertyResult) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('profile') && arguments[0].hasOwnProperty('onSetRoomPropertyResult')){
							this.VidyoRoomOnSetRoomPropertyResult = arguments[0].onSetRoomPropertyResult;
							var params = vcUtilsParam({r: this.objId, profile: JSON.stringify(arguments[0].profile)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['profile', 'onSetRoomPropertyResult'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "function")){
						this.VidyoRoomOnSetRoomPropertyResult = onSetRoomPropertyResult;
						var params = vcUtilsParam({r: this.objId, profile: JSON.stringify(arguments[0])});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomSetDefaultProfile?" + params, OnComplete, OnError);
					});
				}

				this.SetDynamicGenerationPosition = function(generation, x, y, width, height, frameInterval) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('generation') && arguments[0].hasOwnProperty('x') && arguments[0].hasOwnProperty('y') && arguments[0].hasOwnProperty('width') && arguments[0].hasOwnProperty('height') && arguments[0].hasOwnProperty('frameInterval')){
							var params = vcUtilsParam({r: this.objId, generation: arguments[0].generation, x: arguments[0].x, y: arguments[0].y, width: arguments[0].width, height: arguments[0].height, frameInterval: arguments[0].frameInterval});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['generation', 'x', 'y', 'width', 'height', 'frameInterval'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 6 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number") && (typeof(arguments[5]) === "number")){
						var params = vcUtilsParam({r: this.objId, generation: arguments[0], x: arguments[1], y: arguments[2], width: arguments[3], height: arguments[4], frameInterval: arguments[5]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomSetDynamicGenerationPosition?" + params, OnComplete, OnError);
					});
				}

				this.SetDynamicLocalRenderer = function(renderer) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('renderer')){
							var params = vcUtilsParam({r: this.objId, renderer: (arguments[0].renderer ? arguments[0].renderer.objId : 0)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['renderer'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({r: this.objId, renderer: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomSetDynamicLocalRenderer?" + params, OnComplete, OnError);
					});
				}

				this.SetFavorite = function(isFavorite, onSetFavoriteResult) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('isFavorite') && arguments[0].hasOwnProperty('onSetFavoriteResult')){
							this.VidyoRoomOnSetFavoriteResult = arguments[0].onSetFavoriteResult;
							var params = vcUtilsParam({r: this.objId, isFavorite: arguments[0].isFavorite});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['isFavorite', 'onSetFavoriteResult'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "boolean") && (typeof(arguments[1]) === "function")){
						this.VidyoRoomOnSetFavoriteResult = onSetFavoriteResult;
						var params = vcUtilsParam({r: this.objId, isFavorite: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomSetFavorite?" + params, OnComplete, OnError);
					});
				}

				this.SetMaxAudioSources = function(count) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('count')){
							var params = vcUtilsParam({r: this.objId, count: arguments[0].count});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['count'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({r: this.objId, count: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomSetMaxAudioSources?" + params, OnComplete, OnError);
					});
				}

				this.SetMaxReceiveBitRate = function(bitRate) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('bitRate')){
							var params = vcUtilsParam({r: this.objId, bitRate: arguments[0].bitRate});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['bitRate'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({r: this.objId, bitRate: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomSetMaxReceiveBitRate?" + params, OnComplete, OnError);
					});
				}

				this.SetMaxSendBitRate = function(bitRate) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('bitRate')){
							var params = vcUtilsParam({r: this.objId, bitRate: arguments[0].bitRate});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['bitRate'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({r: this.objId, bitRate: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomSetMaxSendBitRate?" + params, OnComplete, OnError);
					});
				}

				this.SetMaxVideoSources = function(count) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('count')){
							var params = vcUtilsParam({r: this.objId, count: arguments[0].count});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['count'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({r: this.objId, count: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomSetMaxVideoSources?" + params, OnComplete, OnError);
					});
				}

				this.SetParticipantProfiles = function(profiles, onSetRoomPropertyResult) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('profiles') && arguments[0].hasOwnProperty('onSetRoomPropertyResult')){
							this.VidyoRoomOnSetRoomPropertyResult = arguments[0].onSetRoomPropertyResult;
							var params = vcUtilsParam({r: this.objId, profiles: JSON.stringify({"profiles": arguments[0].profiles})});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['profiles', 'onSetRoomPropertyResult'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "function")){
						this.VidyoRoomOnSetRoomPropertyResult = onSetRoomPropertyResult;
						var params = vcUtilsParam({r: this.objId, profiles: JSON.stringify({"profiles": arguments[0]})});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomSetParticipantProfiles?" + params, OnComplete, OnError);
					});
				}

				this.SetPresenter = function(participant, requestId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('participant') && arguments[0].hasOwnProperty('requestId')){
							var params = vcUtilsParam({room: this.objId, participant: (arguments[0].participant ? arguments[0].participant.objId : 0), requestId: arguments[0].requestId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['participant', 'requestId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "string")){
						var params = vcUtilsParam({room: this.objId, participant: (arguments[0] ? arguments[0].objId : 0), requestId: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomSetPresenter?" + params, OnComplete, OnError);
					});
				}

				this.SetRoleChangeAuthorization = function(role, auth, requestId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('role') && arguments[0].hasOwnProperty('auth') && arguments[0].hasOwnProperty('requestId')){
							var params = vcUtilsParam({room: this.objId, role: arguments[0].role, auth: JSON.stringify(arguments[0].auth), requestId: arguments[0].requestId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['role', 'auth', 'requestId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "object") && (typeof(arguments[2]) === "string")){
						var params = vcUtilsParam({room: this.objId, role: arguments[0], auth: JSON.stringify(arguments[1]), requestId: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomSetRoleChangeAuthorization?" + params, OnComplete, OnError);
					});
				}

				this.SetRoomPIN = function(roomPIN, onSetRoomPINResult) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('roomPIN') && arguments[0].hasOwnProperty('onSetRoomPINResult')){
							this.VidyoRoomOnSetRoomPINResult = arguments[0].onSetRoomPINResult;
							var params = vcUtilsParam({r: this.objId, roomPIN: arguments[0].roomPIN});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['roomPIN', 'onSetRoomPINResult'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "function")){
						this.VidyoRoomOnSetRoomPINResult = onSetRoomPINResult;
						var params = vcUtilsParam({r: this.objId, roomPIN: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomSetRoomPIN?" + params, OnComplete, OnError);
					});
				}

				this.SetRoomProperties = function(roomProperties, onSetRoomPropertiesResult) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('roomProperties') && arguments[0].hasOwnProperty('onSetRoomPropertiesResult')){
							this.VidyoRoomOnSetRoomPropertiesResult = arguments[0].onSetRoomPropertiesResult;
							var params = vcUtilsParam({r: this.objId, roomProperties: JSON.stringify(arguments[0].roomProperties)});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['roomProperties', 'onSetRoomPropertiesResult'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "function")){
						this.VidyoRoomOnSetRoomPropertiesResult = onSetRoomPropertiesResult;
						var params = vcUtilsParam({r: this.objId, roomProperties: JSON.stringify(arguments[0])});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomSetRoomProperties?" + params, OnComplete, OnError);
					});
				}

				this.SetShowThrottle = function(t) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('t')){
							var params = vcUtilsParam({room: this.objId, t: arguments[0].t});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['t'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({room: this.objId, t: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomSetShowThrottle?" + params, OnComplete, OnError);
					});
				}

				this.SetShowThrottleTimerInterval = function(seconds) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('seconds')){
							var params = vcUtilsParam({room: this.objId, seconds: arguments[0].seconds});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['seconds'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({room: this.objId, seconds: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomSetShowThrottleTimerInterval?" + params, OnComplete, OnError);
					});
				}

				this.SetShowThrottleWindowSizeChangeThreshold = function(percentage) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('percentage')){
							var params = vcUtilsParam({room: this.objId, percentage: arguments[0].percentage});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['percentage'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "number")){
						var params = vcUtilsParam({room: this.objId, percentage: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomSetShowThrottleWindowSizeChangeThreshold?" + params, OnComplete, OnError);
					});
				}

				this.SetSubject = function(subject) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('subject')){
							var params = vcUtilsParam({r: this.objId, subject: arguments[0].subject});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['subject'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({r: this.objId, subject: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomSetSubject?" + params, OnComplete, OnError);
					});
				}

				this.ShowStatisticsDialog = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({r: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomShowStatisticsDialog?" + params, OnComplete, OnError);
					});
				}

				this.StartLectureMode = function(requestId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('requestId')){
							var params = vcUtilsParam({room: this.objId, requestId: arguments[0].requestId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['requestId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({room: this.objId, requestId: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomStartLectureMode?" + params, OnComplete, OnError);
					});
				}

				this.StartRecording = function(recordingProfilePrefix, onRecordingServiceStartCallback) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('recordingProfilePrefix') && arguments[0].hasOwnProperty('onRecordingServiceStartCallback')){
							this.VidyoRoomOnRecordingServiceStartResult = arguments[0].onRecordingServiceStartCallback;
							var params = vcUtilsParam({r: this.objId, recordingProfilePrefix: arguments[0].recordingProfilePrefix});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['recordingProfilePrefix', 'onRecordingServiceStartCallback'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "function")){
						this.VidyoRoomOnRecordingServiceStartResult = onRecordingServiceStartCallback;
						var params = vcUtilsParam({r: this.objId, recordingProfilePrefix: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomStartRecording?" + params, OnComplete, OnError);
					});
				}

				this.StopLectureMode = function(requestId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('requestId')){
							var params = vcUtilsParam({room: this.objId, requestId: arguments[0].requestId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['requestId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({room: this.objId, requestId: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomStopLectureMode?" + params, OnComplete, OnError);
					});
				}

				this.StopRecording = function(onRecordingServiceStopResultCallback) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onRecordingServiceStopResultCallback')){
							this.VidyoRoomOnRecordingServiceStopResult = arguments[0].onRecordingServiceStopResultCallback;
							var params = vcUtilsParam({r: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onRecordingServiceStopResultCallback'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoRoomOnRecordingServiceStopResult = onRecordingServiceStopResultCallback;
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomStopRecording?" + params, OnComplete, OnError);
					});
				}

				this.UnlockRoom = function(onUnlockRoomResult) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onUnlockRoomResult')){
							this.VidyoRoomOnUnlockRoomResult = arguments[0].onUnlockRoomResult;
							var params = vcUtilsParam({r: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onUnlockRoomResult'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoRoomOnUnlockRoomResult = onUnlockRoomResult;
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomUnlockRoom?" + params, OnComplete, OnError);
					});
				}

				this.UnraiseHand = function(requestId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('requestId')){
							var params = vcUtilsParam({r: this.objId, requestId: arguments[0].requestId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['requestId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({r: this.objId, requestId: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomUnraiseHand?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterConferenceModeEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({r: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomUnregisterConferenceModeEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterConnectionPropertiesEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({r: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomUnregisterConnectionPropertiesEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterHostEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({r: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomUnregisterHostEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterInCallEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({r: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomUnregisterInCallEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterLectureModeEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({room: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({room: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomUnregisterLectureModeEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterMessageEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({r: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomUnregisterMessageEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterModerationCommandEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({room: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({room: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomUnregisterModerationCommandEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterModerationResultEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({room: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({room: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomUnregisterModerationResultEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterParticipantEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({r: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomUnregisterParticipantEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterPipEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({r: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomUnregisterPipEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterRecorderInCallEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({r: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomUnregisterRecorderInCallEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterResourceManagerEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({r: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomUnregisterResourceManagerEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterRoomPropertiesEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({r: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomUnregisterRoomPropertiesEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterSubjectEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({r: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomUnregisterSubjectEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterUnprocessedAudioEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({r: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({r: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoRoomUnregisterUnprocessedAudioEventListener?" + params, OnComplete, OnError);
					});
				}

				return this;
			}

			this.CreateVidyoUser = function(endpoint) {
				var args = [].slice.apply(arguments);
				if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
					if(arguments[0].hasOwnProperty('endpoint')){
						var params = vcUtilsParam({user: this.objId, endpoint: (arguments[0].endpoint ? arguments[0].endpoint.objId : 0)});
					} else {
						return Promise.reject(new MissingArgumentException('Missing Parameters', ['endpoint'], Object.keys(arguments[0])).error);
					}
				} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
					var params = vcUtilsParam({user: this.objId, endpoint: (arguments[0] ? arguments[0].objId : 0)});
				} else {
					return Promise.reject(new Error('Invalid Parameters'));
				}

				return new Promise(function(resolve, reject){
					function OnComplete(response) {
						var vidyoUser = new contextObj.VidyoUser(response.data.VidyoUser);	// copy construct
						objects[vidyoUser.objId] = vidyoUser;
						resolve(vidyoUser);
					}
					function OnError(response) {
						reject(Error(response));
					}
					GetRequest("VidyoUserConstruct?" + params, OnComplete, OnError);
				});
			}
			this.VidyoUser = function(endpoint) {
				if(arguments.length === 1 && arguments[0].objId && arguments[0].objType && arguments[0].objType === "VidyoUser"){
					vcUtilsExtend(this, arguments[0]);	//	copy construct
				} else {
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('endpoint')){
							var params = vcUtilsParam({user: this.objId, endpoint: (arguments[0].endpoint ? arguments[0].endpoint.objId : 0)});
						} else {
							throw new MissingArgumentException('Missing Parameters', ['endpoint'], Object.keys(arguments[0])).error;
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({user: this.objId, endpoint: (arguments[0] ? arguments[0].objId : 0)});
					} else {
						throw new Error('Invalid Parameters');
					}
					var response = GetRequest("VidyoUserConstruct?" + params);
					if(response == null)
						throw new Error('No Response from VidyoClient');
					vcUtilsExtend(this, response.VidyoUser);
					objects[this.objId] = this;

				}

				this.Destruct = function() {
					GetRequest("VidyoUserDestruct?" + vcUtilsParam({ obj: this.objId }), function(){}, function(){});
					delete objects[this.objId];
				}

				this.AddRosterContact = function(userId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('userId')){
							var params = vcUtilsParam({u: this.objId, userId: arguments[0].userId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['userId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({u: this.objId, userId: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserAddRosterContact?" + params, OnComplete, OnError);
					});
				}

				this.AdvancedSearchRooms = function(fieldSet, fieldRelations, fieldValues, searchToken, index, pageSize, onRoomSearchResults) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('fieldSet') && arguments[0].hasOwnProperty('fieldRelations') && arguments[0].hasOwnProperty('fieldValues') && arguments[0].hasOwnProperty('searchToken') && arguments[0].hasOwnProperty('index') && arguments[0].hasOwnProperty('pageSize') && arguments[0].hasOwnProperty('onRoomSearchResults')){
							this.VidyoUserOnRoomSearchResults = arguments[0].onRoomSearchResults;
							var params = vcUtilsParam({u: this.objId, fieldSet: JSON.stringify({"fieldSet": arguments[0].fieldSet}), fieldRelations: JSON.stringify({"fieldRelations": arguments[0].fieldRelations}), fieldValues: JSON.stringify({"fieldValues": arguments[0].fieldValues}), searchToken: arguments[0].searchToken, index: arguments[0].index, pageSize: arguments[0].pageSize});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['fieldSet', 'fieldRelations', 'fieldValues', 'searchToken', 'index', 'pageSize', 'onRoomSearchResults'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 7 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "object") && (typeof(arguments[2]) === "object") && (typeof(arguments[3]) === "string") && (typeof(arguments[4]) === "number") && (typeof(arguments[5]) === "number") && (typeof(arguments[6]) === "function")){
						this.VidyoUserOnRoomSearchResults = onRoomSearchResults;
						var params = vcUtilsParam({u: this.objId, fieldSet: JSON.stringify({"fieldSet": arguments[0]}), fieldRelations: JSON.stringify({"fieldRelations": arguments[1]}), fieldValues: JSON.stringify({"fieldValues": arguments[2]}), searchToken: arguments[3], index: arguments[4], pageSize: arguments[5]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserAdvancedSearchRooms?" + params, OnComplete, OnError);
					});
				}

				this.AdvancedSearchUsers = function(fieldSet, fieldValues, searchToken, index, pageSize, onUserSearchResults) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('fieldSet') && arguments[0].hasOwnProperty('fieldValues') && arguments[0].hasOwnProperty('searchToken') && arguments[0].hasOwnProperty('index') && arguments[0].hasOwnProperty('pageSize') && arguments[0].hasOwnProperty('onUserSearchResults')){
							this.VidyoUserOnUserSearchResults = arguments[0].onUserSearchResults;
							var params = vcUtilsParam({u: this.objId, fieldSet: JSON.stringify({"fieldSet": arguments[0].fieldSet}), fieldValues: JSON.stringify({"fieldValues": arguments[0].fieldValues}), searchToken: arguments[0].searchToken, index: arguments[0].index, pageSize: arguments[0].pageSize});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['fieldSet', 'fieldValues', 'searchToken', 'index', 'pageSize', 'onUserSearchResults'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 6 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "object") && (typeof(arguments[2]) === "string") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "number") && (typeof(arguments[5]) === "function")){
						this.VidyoUserOnUserSearchResults = onUserSearchResults;
						var params = vcUtilsParam({u: this.objId, fieldSet: JSON.stringify({"fieldSet": arguments[0]}), fieldValues: JSON.stringify({"fieldValues": arguments[1]}), searchToken: arguments[2], index: arguments[3], pageSize: arguments[4]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserAdvancedSearchUsers?" + params, OnComplete, OnError);
					});
				}

				this.AllowSubscriber = function(userId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('userId')){
							var params = vcUtilsParam({u: this.objId, userId: arguments[0].userId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['userId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({u: this.objId, userId: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserAllowSubscriber?" + params, OnComplete, OnError);
					});
				}

				this.BlockSubscriber = function(userId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('userId')){
							var params = vcUtilsParam({u: this.objId, userId: arguments[0].userId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['userId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({u: this.objId, userId: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserBlockSubscriber?" + params, OnComplete, OnError);
					});
				}

				this.CreateCall = function(userId, createToken, onCallCreated) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('userId') && arguments[0].hasOwnProperty('createToken') && arguments[0].hasOwnProperty('onCallCreated')){
							this.VidyoUserOnCallCreated = arguments[0].onCallCreated;
							var params = vcUtilsParam({u: this.objId, userId: arguments[0].userId, createToken: arguments[0].createToken});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['userId', 'createToken', 'onCallCreated'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "function")){
						this.VidyoUserOnCallCreated = onCallCreated;
						var params = vcUtilsParam({u: this.objId, userId: arguments[0], createToken: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserCreateCall?" + params, OnComplete, OnError);
					});
				}

				this.CreateRoomFromId = function(id, createToken, onRoomCreated) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('id') && arguments[0].hasOwnProperty('createToken') && arguments[0].hasOwnProperty('onRoomCreated')){
							this.VidyoUserOnRoomCreated = arguments[0].onRoomCreated;
							var params = vcUtilsParam({u: this.objId, id: arguments[0].id, createToken: arguments[0].createToken});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['id', 'createToken', 'onRoomCreated'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "function")){
						this.VidyoUserOnRoomCreated = onRoomCreated;
						var params = vcUtilsParam({u: this.objId, id: arguments[0], createToken: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserCreateRoomFromId?" + params, OnComplete, OnError);
					});
				}

				this.CreateRoomFromKey = function(roomKey, createToken, onRoomCreated) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('roomKey') && arguments[0].hasOwnProperty('createToken') && arguments[0].hasOwnProperty('onRoomCreated')){
							this.VidyoUserOnRoomCreated = arguments[0].onRoomCreated;
							var params = vcUtilsParam({u: this.objId, roomKey: arguments[0].roomKey, createToken: arguments[0].createToken});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['roomKey', 'createToken', 'onRoomCreated'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "function")){
						this.VidyoUserOnRoomCreated = onRoomCreated;
						var params = vcUtilsParam({u: this.objId, roomKey: arguments[0], createToken: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserCreateRoomFromKey?" + params, OnComplete, OnError);
					});
				}

				this.CreateRoomWithId = function(id, createToken, onRoomCreated) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('id') && arguments[0].hasOwnProperty('createToken') && arguments[0].hasOwnProperty('onRoomCreated')){
							this.VidyoUserOnRoomCreated = arguments[0].onRoomCreated;
							var params = vcUtilsParam({u: this.objId, id: arguments[0].id, createToken: arguments[0].createToken});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['id', 'createToken', 'onRoomCreated'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "function")){
						this.VidyoUserOnRoomCreated = onRoomCreated;
						var params = vcUtilsParam({u: this.objId, id: arguments[0], createToken: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserCreateRoomWithId?" + params, OnComplete, OnError);
					});
				}

				this.CreateScheduledRoom = function(schedule, createToken, onRoomCreated) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('schedule') && arguments[0].hasOwnProperty('createToken') && arguments[0].hasOwnProperty('onRoomCreated')){
							this.VidyoUserOnRoomCreated = arguments[0].onRoomCreated;
							var params = vcUtilsParam({u: this.objId, schedule: JSON.stringify(arguments[0].schedule), createToken: arguments[0].createToken});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['schedule', 'createToken', 'onRoomCreated'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "function")){
						this.VidyoUserOnRoomCreated = onRoomCreated;
						var params = vcUtilsParam({u: this.objId, schedule: JSON.stringify(arguments[0]), createToken: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserCreateScheduledRoom?" + params, OnComplete, OnError);
					});
				}

				this.CreateTestCallRoom = function(createToken, onRoomCreated) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('createToken') && arguments[0].hasOwnProperty('onRoomCreated')){
							this.VidyoUserOnRoomCreated = arguments[0].onRoomCreated;
							var params = vcUtilsParam({u: this.objId, createToken: arguments[0].createToken});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['createToken', 'onRoomCreated'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "function")){
						this.VidyoUserOnRoomCreated = onRoomCreated;
						var params = vcUtilsParam({u: this.objId, createToken: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserCreateTestCallRoom?" + params, OnComplete, OnError);
					});
				}

				this.CreateTopicRoom = function(name, description, createToken, onRoomCreated) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('name') && arguments[0].hasOwnProperty('description') && arguments[0].hasOwnProperty('createToken') && arguments[0].hasOwnProperty('onRoomCreated')){
							this.VidyoUserOnRoomCreated = arguments[0].onRoomCreated;
							var params = vcUtilsParam({u: this.objId, name: arguments[0].name, description: arguments[0].description, createToken: arguments[0].createToken});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['name', 'description', 'createToken', 'onRoomCreated'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "string") && (typeof(arguments[3]) === "function")){
						this.VidyoUserOnRoomCreated = onRoomCreated;
						var params = vcUtilsParam({u: this.objId, name: arguments[0], description: arguments[1], createToken: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserCreateTopicRoom?" + params, OnComplete, OnError);
					});
				}

				this.GetAuthTypes = function(host, port, serviceType, onAuthTypes, onWebProxyCredentialsRequest) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('host') && arguments[0].hasOwnProperty('port') && arguments[0].hasOwnProperty('serviceType') && arguments[0].hasOwnProperty('onAuthTypes') && arguments[0].hasOwnProperty('onWebProxyCredentialsRequest')){
							this.VidyoUserOnAuthTypes = arguments[0].onAuthTypes;
							this.VidyoUserOnAuthTypesWebProxyCredentialsRequest = arguments[0].onWebProxyCredentialsRequest;
							var params = vcUtilsParam({u: this.objId, host: arguments[0].host, port: arguments[0].port, serviceType: arguments[0].serviceType});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['host', 'port', 'serviceType', 'onAuthTypes', 'onWebProxyCredentialsRequest'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 5 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "string") && (typeof(arguments[3]) === "function") && (typeof(arguments[4]) === "function")){
						this.VidyoUserOnAuthTypes = onAuthTypes;
						this.VidyoUserOnAuthTypesWebProxyCredentialsRequest = onWebProxyCredentialsRequest;
						var params = vcUtilsParam({u: this.objId, host: arguments[0], port: arguments[1], serviceType: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserGetAuthTypes?" + params, OnComplete, OnError);
					});
				}

				this.GetContact = function(userId, onGetContactResult) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('userId') && arguments[0].hasOwnProperty('onGetContactResult')){
							this.VidyoUserOnGetContactResult = arguments[0].onGetContactResult;
							var params = vcUtilsParam({u: this.objId, userId: arguments[0].userId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['userId', 'onGetContactResult'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "function")){
						this.VidyoUserOnGetContactResult = onGetContactResult;
						var params = vcUtilsParam({u: this.objId, userId: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserGetContact?" + params, OnComplete, OnError);
					});
				}

				this.GetConversationRoom = function(userIds, createToken, onRoomCreated) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('userIds') && arguments[0].hasOwnProperty('createToken') && arguments[0].hasOwnProperty('onRoomCreated')){
							this.VidyoUserOnRoomCreated = arguments[0].onRoomCreated;
							var params = vcUtilsParam({u: this.objId, userIds: JSON.stringify({"userIds": arguments[0].userIds}), createToken: arguments[0].createToken});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['userIds', 'createToken', 'onRoomCreated'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "function")){
						this.VidyoUserOnRoomCreated = onRoomCreated;
						var params = vcUtilsParam({u: this.objId, userIds: JSON.stringify({"userIds": arguments[0]}), createToken: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserGetConversationRoom?" + params, OnComplete, OnError);
					});
				}

				this.GetCurrentRoster = function(onComplete) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onComplete')){
							this.VidyoUserOnGetCurrentRosterComplete = arguments[0].onComplete;
							var params = vcUtilsParam({u: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onComplete'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoUserOnGetCurrentRosterComplete = onComplete;
						var params = vcUtilsParam({u: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserGetCurrentRoster?" + params, OnComplete, OnError);
					});
				}

				this.GetEndpoint = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({u: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({u: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserGetEndpoint?" + params, OnComplete, OnError);
					});
				}

				this.GetFavoriteRooms = function(index, pageSize, onFavoriteRoomResults) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('index') && arguments[0].hasOwnProperty('pageSize') && arguments[0].hasOwnProperty('onFavoriteRoomResults')){
							this.VidyoUserOnFavoriteRoomResults = arguments[0].onFavoriteRoomResults;
							var params = vcUtilsParam({u: this.objId, index: arguments[0].index, pageSize: arguments[0].pageSize});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['index', 'pageSize', 'onFavoriteRoomResults'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "function")){
						this.VidyoUserOnFavoriteRoomResults = onFavoriteRoomResults;
						var params = vcUtilsParam({u: this.objId, index: arguments[0], pageSize: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserGetFavoriteRooms?" + params, OnComplete, OnError);
					});
				}

				this.GetId = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({u: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({u: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserGetId?" + params, OnComplete, OnError);
					});
				}

				this.GetPasswordResetUrl = function(onPasswordResetUrl) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onPasswordResetUrl')){
							this.VidyoUserOnPasswordResetUrl = arguments[0].onPasswordResetUrl;
							var params = vcUtilsParam({u: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onPasswordResetUrl'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoUserOnPasswordResetUrl = onPasswordResetUrl;
						var params = vcUtilsParam({u: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserGetPasswordResetUrl?" + params, OnComplete, OnError);
					});
				}

				this.GetRecentRooms = function(index, pageSize, onRecentRoomResults) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('index') && arguments[0].hasOwnProperty('pageSize') && arguments[0].hasOwnProperty('onRecentRoomResults')){
							this.VidyoUserOnRecentRoomResults = arguments[0].onRecentRoomResults;
							var params = vcUtilsParam({u: this.objId, index: arguments[0].index, pageSize: arguments[0].pageSize});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['index', 'pageSize', 'onRecentRoomResults'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "function")){
						this.VidyoUserOnRecentRoomResults = onRecentRoomResults;
						var params = vcUtilsParam({u: this.objId, index: arguments[0], pageSize: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserGetRecentRooms?" + params, OnComplete, OnError);
					});
				}

				this.GetRecordingServiceProfiles = function(onGetRecordingServiceProfiles) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onGetRecordingServiceProfiles')){
							this.VidyoUserOnGetRecordingServiceProfiles = arguments[0].onGetRecordingServiceProfiles;
							var params = vcUtilsParam({u: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onGetRecordingServiceProfiles'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoUserOnGetRecordingServiceProfiles = onGetRecordingServiceProfiles;
						var params = vcUtilsParam({u: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserGetRecordingServiceProfiles?" + params, OnComplete, OnError);
					});
				}

				this.GetWebProxyAddress = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({u: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({u: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserGetWebProxyAddress?" + params, OnComplete, OnError);
					});
				}

				this.InvalidateTokenOnLogout = function(invalidate) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('invalidate')){
							var params = vcUtilsParam({user: this.objId, invalidate: arguments[0].invalidate});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['invalidate'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({user: this.objId, invalidate: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserInvalidateTokenOnLogout?" + params, OnComplete, OnError);
					});
				}

				this.Login = function(username, password, host, port, serviceType, onLoginComplete, onLoggedOut, onConnectionStatusChanged, onTokenReceived, onWebProxyCredentialsRequest) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('username') && arguments[0].hasOwnProperty('password') && arguments[0].hasOwnProperty('host') && arguments[0].hasOwnProperty('port') && arguments[0].hasOwnProperty('serviceType') && arguments[0].hasOwnProperty('onLoginComplete') && arguments[0].hasOwnProperty('onLoggedOut') && arguments[0].hasOwnProperty('onConnectionStatusChanged') && arguments[0].hasOwnProperty('onTokenReceived') && arguments[0].hasOwnProperty('onWebProxyCredentialsRequest')){
							this.VidyoUserOnLoginComplete = arguments[0].onLoginComplete;
							this.VidyoUserOnLoggedOut = arguments[0].onLoggedOut;
							this.VidyoUserOnConnectionStatusChanged = arguments[0].onConnectionStatusChanged;
							this.VidyoUserOnTokenReceived = arguments[0].onTokenReceived;
							this.VidyoUserOnWebProxyCredentialsRequest = arguments[0].onWebProxyCredentialsRequest;
							var params = vcUtilsParam({u: this.objId, username: arguments[0].username, password: arguments[0].password, host: arguments[0].host, port: arguments[0].port, serviceType: arguments[0].serviceType});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['username', 'password', 'host', 'port', 'serviceType', 'onLoginComplete', 'onLoggedOut', 'onConnectionStatusChanged', 'onTokenReceived', 'onWebProxyCredentialsRequest'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 10 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "string") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "string") && (typeof(arguments[5]) === "function") && (typeof(arguments[6]) === "function") && (typeof(arguments[7]) === "function") && (typeof(arguments[8]) === "function") && (typeof(arguments[9]) === "function")){
						this.VidyoUserOnLoginComplete = onLoginComplete;
						this.VidyoUserOnLoggedOut = onLoggedOut;
						this.VidyoUserOnConnectionStatusChanged = onConnectionStatusChanged;
						this.VidyoUserOnTokenReceived = onTokenReceived;
						this.VidyoUserOnWebProxyCredentialsRequest = onWebProxyCredentialsRequest;
						var params = vcUtilsParam({u: this.objId, username: arguments[0], password: arguments[1], host: arguments[2], port: arguments[3], serviceType: arguments[4]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserLogin?" + params, OnComplete, OnError);
					});
				}

				this.LoginAsGuest = function(displayName, roomKey, host, port, serviceType, onLoginComplete, onLoggedOut, onConnectionStatusChanged, onTokenReceived, onWebProxyCredentialsRequest) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('displayName') && arguments[0].hasOwnProperty('roomKey') && arguments[0].hasOwnProperty('host') && arguments[0].hasOwnProperty('port') && arguments[0].hasOwnProperty('serviceType') && arguments[0].hasOwnProperty('onLoginComplete') && arguments[0].hasOwnProperty('onLoggedOut') && arguments[0].hasOwnProperty('onConnectionStatusChanged') && arguments[0].hasOwnProperty('onTokenReceived') && arguments[0].hasOwnProperty('onWebProxyCredentialsRequest')){
							this.VidyoUserOnLoginComplete = arguments[0].onLoginComplete;
							this.VidyoUserOnLoggedOut = arguments[0].onLoggedOut;
							this.VidyoUserOnConnectionStatusChanged = arguments[0].onConnectionStatusChanged;
							this.VidyoUserOnTokenReceived = arguments[0].onTokenReceived;
							this.VidyoUserOnWebProxyCredentialsRequest = arguments[0].onWebProxyCredentialsRequest;
							var params = vcUtilsParam({u: this.objId, displayName: arguments[0].displayName, roomKey: arguments[0].roomKey, host: arguments[0].host, port: arguments[0].port, serviceType: arguments[0].serviceType});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['displayName', 'roomKey', 'host', 'port', 'serviceType', 'onLoginComplete', 'onLoggedOut', 'onConnectionStatusChanged', 'onTokenReceived', 'onWebProxyCredentialsRequest'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 10 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "string") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "string") && (typeof(arguments[5]) === "function") && (typeof(arguments[6]) === "function") && (typeof(arguments[7]) === "function") && (typeof(arguments[8]) === "function") && (typeof(arguments[9]) === "function")){
						this.VidyoUserOnLoginComplete = onLoginComplete;
						this.VidyoUserOnLoggedOut = onLoggedOut;
						this.VidyoUserOnConnectionStatusChanged = onConnectionStatusChanged;
						this.VidyoUserOnTokenReceived = onTokenReceived;
						this.VidyoUserOnWebProxyCredentialsRequest = onWebProxyCredentialsRequest;
						var params = vcUtilsParam({u: this.objId, displayName: arguments[0], roomKey: arguments[1], host: arguments[2], port: arguments[3], serviceType: arguments[4]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserLoginAsGuest?" + params, OnComplete, OnError);
					});
				}

				this.LoginWithAccessToken = function(accessToken, host, port, serviceType, onLoginComplete, onLoggedOut, onConnectionStatusChanged, onTokenReceived, onWebProxyCredentialsRequest) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('accessToken') && arguments[0].hasOwnProperty('host') && arguments[0].hasOwnProperty('port') && arguments[0].hasOwnProperty('serviceType') && arguments[0].hasOwnProperty('onLoginComplete') && arguments[0].hasOwnProperty('onLoggedOut') && arguments[0].hasOwnProperty('onConnectionStatusChanged') && arguments[0].hasOwnProperty('onTokenReceived') && arguments[0].hasOwnProperty('onWebProxyCredentialsRequest')){
							this.VidyoUserOnLoginComplete = arguments[0].onLoginComplete;
							this.VidyoUserOnLoggedOut = arguments[0].onLoggedOut;
							this.VidyoUserOnConnectionStatusChanged = arguments[0].onConnectionStatusChanged;
							this.VidyoUserOnTokenReceived = arguments[0].onTokenReceived;
							this.VidyoUserOnWebProxyCredentialsRequest = arguments[0].onWebProxyCredentialsRequest;
							var params = vcUtilsParam({u: this.objId, accessToken: arguments[0].accessToken, host: arguments[0].host, port: arguments[0].port, serviceType: arguments[0].serviceType});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['accessToken', 'host', 'port', 'serviceType', 'onLoginComplete', 'onLoggedOut', 'onConnectionStatusChanged', 'onTokenReceived', 'onWebProxyCredentialsRequest'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 9 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "string") && (typeof(arguments[4]) === "function") && (typeof(arguments[5]) === "function") && (typeof(arguments[6]) === "function") && (typeof(arguments[7]) === "function") && (typeof(arguments[8]) === "function")){
						this.VidyoUserOnLoginComplete = onLoginComplete;
						this.VidyoUserOnLoggedOut = onLoggedOut;
						this.VidyoUserOnConnectionStatusChanged = onConnectionStatusChanged;
						this.VidyoUserOnTokenReceived = onTokenReceived;
						this.VidyoUserOnWebProxyCredentialsRequest = onWebProxyCredentialsRequest;
						var params = vcUtilsParam({u: this.objId, accessToken: arguments[0], host: arguments[1], port: arguments[2], serviceType: arguments[3]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserLoginWithAccessToken?" + params, OnComplete, OnError);
					});
				}

				this.LoginWithCAC = function(certificate, host, port, serviceType, onLoginComplete, onLoggedOut, onConnectionStatusChanged, onTokenReceived, onWebProxyCredentialsRequest) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('certificate') && arguments[0].hasOwnProperty('host') && arguments[0].hasOwnProperty('port') && arguments[0].hasOwnProperty('serviceType') && arguments[0].hasOwnProperty('onLoginComplete') && arguments[0].hasOwnProperty('onLoggedOut') && arguments[0].hasOwnProperty('onConnectionStatusChanged') && arguments[0].hasOwnProperty('onTokenReceived') && arguments[0].hasOwnProperty('onWebProxyCredentialsRequest')){
							this.VidyoUserOnLoginComplete = arguments[0].onLoginComplete;
							this.VidyoUserOnLoggedOut = arguments[0].onLoggedOut;
							this.VidyoUserOnConnectionStatusChanged = arguments[0].onConnectionStatusChanged;
							this.VidyoUserOnTokenReceived = arguments[0].onTokenReceived;
							this.VidyoUserOnWebProxyCredentialsRequest = arguments[0].onWebProxyCredentialsRequest;
							var params = vcUtilsParam({u: this.objId, certificate: arguments[0].certificate, host: arguments[0].host, port: arguments[0].port, serviceType: arguments[0].serviceType});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['certificate', 'host', 'port', 'serviceType', 'onLoginComplete', 'onLoggedOut', 'onConnectionStatusChanged', 'onTokenReceived', 'onWebProxyCredentialsRequest'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 9 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "string") && (typeof(arguments[4]) === "function") && (typeof(arguments[5]) === "function") && (typeof(arguments[6]) === "function") && (typeof(arguments[7]) === "function") && (typeof(arguments[8]) === "function")){
						this.VidyoUserOnLoginComplete = onLoginComplete;
						this.VidyoUserOnLoggedOut = onLoggedOut;
						this.VidyoUserOnConnectionStatusChanged = onConnectionStatusChanged;
						this.VidyoUserOnTokenReceived = onTokenReceived;
						this.VidyoUserOnWebProxyCredentialsRequest = onWebProxyCredentialsRequest;
						var params = vcUtilsParam({u: this.objId, certificate: arguments[0], host: arguments[1], port: arguments[2], serviceType: arguments[3]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserLoginWithCAC?" + params, OnComplete, OnError);
					});
				}

				this.LoginWithExtData = function(extData, ebMode, host, port, onLoginComplete, onLoggedOut, onConnectionStatusChanged, onTokenReceived, onWebProxyCredentialsRequest) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('extData') && arguments[0].hasOwnProperty('ebMode') && arguments[0].hasOwnProperty('host') && arguments[0].hasOwnProperty('port') && arguments[0].hasOwnProperty('onLoginComplete') && arguments[0].hasOwnProperty('onLoggedOut') && arguments[0].hasOwnProperty('onConnectionStatusChanged') && arguments[0].hasOwnProperty('onTokenReceived') && arguments[0].hasOwnProperty('onWebProxyCredentialsRequest')){
							this.VidyoUserOnLoginComplete = arguments[0].onLoginComplete;
							this.VidyoUserOnLoggedOut = arguments[0].onLoggedOut;
							this.VidyoUserOnConnectionStatusChanged = arguments[0].onConnectionStatusChanged;
							this.VidyoUserOnTokenReceived = arguments[0].onTokenReceived;
							this.VidyoUserOnWebProxyCredentialsRequest = arguments[0].onWebProxyCredentialsRequest;
							var params = vcUtilsParam({u: this.objId, extData: arguments[0].extData, ebMode: arguments[0].ebMode, host: arguments[0].host, port: arguments[0].port});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['extData', 'ebMode', 'host', 'port', 'onLoginComplete', 'onLoggedOut', 'onConnectionStatusChanged', 'onTokenReceived', 'onWebProxyCredentialsRequest'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 9 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "string") && (typeof(arguments[3]) === "number") && (typeof(arguments[4]) === "function") && (typeof(arguments[5]) === "function") && (typeof(arguments[6]) === "function") && (typeof(arguments[7]) === "function") && (typeof(arguments[8]) === "function")){
						this.VidyoUserOnLoginComplete = onLoginComplete;
						this.VidyoUserOnLoggedOut = onLoggedOut;
						this.VidyoUserOnConnectionStatusChanged = onConnectionStatusChanged;
						this.VidyoUserOnTokenReceived = onTokenReceived;
						this.VidyoUserOnWebProxyCredentialsRequest = onWebProxyCredentialsRequest;
						var params = vcUtilsParam({u: this.objId, extData: arguments[0], ebMode: arguments[1], host: arguments[2], port: arguments[3]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserLoginWithExtData?" + params, OnComplete, OnError);
					});
				}

				this.LoginWithRefreshToken = function(refreshToken, host, port, serviceType, onLoginComplete, onLoggedOut, onConnectionStatusChanged, onTokenReceived, onWebProxyCredentialsRequest) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('refreshToken') && arguments[0].hasOwnProperty('host') && arguments[0].hasOwnProperty('port') && arguments[0].hasOwnProperty('serviceType') && arguments[0].hasOwnProperty('onLoginComplete') && arguments[0].hasOwnProperty('onLoggedOut') && arguments[0].hasOwnProperty('onConnectionStatusChanged') && arguments[0].hasOwnProperty('onTokenReceived') && arguments[0].hasOwnProperty('onWebProxyCredentialsRequest')){
							this.VidyoUserOnLoginComplete = arguments[0].onLoginComplete;
							this.VidyoUserOnLoggedOut = arguments[0].onLoggedOut;
							this.VidyoUserOnConnectionStatusChanged = arguments[0].onConnectionStatusChanged;
							this.VidyoUserOnTokenReceived = arguments[0].onTokenReceived;
							this.VidyoUserOnWebProxyCredentialsRequest = arguments[0].onWebProxyCredentialsRequest;
							var params = vcUtilsParam({u: this.objId, refreshToken: arguments[0].refreshToken, host: arguments[0].host, port: arguments[0].port, serviceType: arguments[0].serviceType});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['refreshToken', 'host', 'port', 'serviceType', 'onLoginComplete', 'onLoggedOut', 'onConnectionStatusChanged', 'onTokenReceived', 'onWebProxyCredentialsRequest'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 9 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "string") && (typeof(arguments[4]) === "function") && (typeof(arguments[5]) === "function") && (typeof(arguments[6]) === "function") && (typeof(arguments[7]) === "function") && (typeof(arguments[8]) === "function")){
						this.VidyoUserOnLoginComplete = onLoginComplete;
						this.VidyoUserOnLoggedOut = onLoggedOut;
						this.VidyoUserOnConnectionStatusChanged = onConnectionStatusChanged;
						this.VidyoUserOnTokenReceived = onTokenReceived;
						this.VidyoUserOnWebProxyCredentialsRequest = onWebProxyCredentialsRequest;
						var params = vcUtilsParam({u: this.objId, refreshToken: arguments[0], host: arguments[1], port: arguments[2], serviceType: arguments[3]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserLoginWithRefreshToken?" + params, OnComplete, OnError);
					});
				}

				this.LoginWithSAML = function(key, host, port, serviceType, onLoginComplete, onLoggedOut, onConnectionStatusChanged, onTokenReceived, onWebProxyCredentialsRequest) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('key') && arguments[0].hasOwnProperty('host') && arguments[0].hasOwnProperty('port') && arguments[0].hasOwnProperty('serviceType') && arguments[0].hasOwnProperty('onLoginComplete') && arguments[0].hasOwnProperty('onLoggedOut') && arguments[0].hasOwnProperty('onConnectionStatusChanged') && arguments[0].hasOwnProperty('onTokenReceived') && arguments[0].hasOwnProperty('onWebProxyCredentialsRequest')){
							this.VidyoUserOnLoginComplete = arguments[0].onLoginComplete;
							this.VidyoUserOnLoggedOut = arguments[0].onLoggedOut;
							this.VidyoUserOnConnectionStatusChanged = arguments[0].onConnectionStatusChanged;
							this.VidyoUserOnTokenReceived = arguments[0].onTokenReceived;
							this.VidyoUserOnWebProxyCredentialsRequest = arguments[0].onWebProxyCredentialsRequest;
							var params = vcUtilsParam({u: this.objId, key: arguments[0].key, host: arguments[0].host, port: arguments[0].port, serviceType: arguments[0].serviceType});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['key', 'host', 'port', 'serviceType', 'onLoginComplete', 'onLoggedOut', 'onConnectionStatusChanged', 'onTokenReceived', 'onWebProxyCredentialsRequest'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 9 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "string") && (typeof(arguments[4]) === "function") && (typeof(arguments[5]) === "function") && (typeof(arguments[6]) === "function") && (typeof(arguments[7]) === "function") && (typeof(arguments[8]) === "function")){
						this.VidyoUserOnLoginComplete = onLoginComplete;
						this.VidyoUserOnLoggedOut = onLoggedOut;
						this.VidyoUserOnConnectionStatusChanged = onConnectionStatusChanged;
						this.VidyoUserOnTokenReceived = onTokenReceived;
						this.VidyoUserOnWebProxyCredentialsRequest = onWebProxyCredentialsRequest;
						var params = vcUtilsParam({u: this.objId, key: arguments[0], host: arguments[1], port: arguments[2], serviceType: arguments[3]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserLoginWithSAML?" + params, OnComplete, OnError);
					});
				}

				this.LoginWithTenantToken = function(provisionToken, host, port, serviceType, onLoginComplete, onLoggedOut, onConnectionStatusChanged, onTokenReceived, onWebProxyCredentialsRequest) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('provisionToken') && arguments[0].hasOwnProperty('host') && arguments[0].hasOwnProperty('port') && arguments[0].hasOwnProperty('serviceType') && arguments[0].hasOwnProperty('onLoginComplete') && arguments[0].hasOwnProperty('onLoggedOut') && arguments[0].hasOwnProperty('onConnectionStatusChanged') && arguments[0].hasOwnProperty('onTokenReceived') && arguments[0].hasOwnProperty('onWebProxyCredentialsRequest')){
							this.VidyoUserOnLoginComplete = arguments[0].onLoginComplete;
							this.VidyoUserOnLoggedOut = arguments[0].onLoggedOut;
							this.VidyoUserOnConnectionStatusChanged = arguments[0].onConnectionStatusChanged;
							this.VidyoUserOnTokenReceived = arguments[0].onTokenReceived;
							this.VidyoUserOnWebProxyCredentialsRequest = arguments[0].onWebProxyCredentialsRequest;
							var params = vcUtilsParam({u: this.objId, provisionToken: arguments[0].provisionToken, host: arguments[0].host, port: arguments[0].port, serviceType: arguments[0].serviceType});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['provisionToken', 'host', 'port', 'serviceType', 'onLoginComplete', 'onLoggedOut', 'onConnectionStatusChanged', 'onTokenReceived', 'onWebProxyCredentialsRequest'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 9 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "string") && (typeof(arguments[4]) === "function") && (typeof(arguments[5]) === "function") && (typeof(arguments[6]) === "function") && (typeof(arguments[7]) === "function") && (typeof(arguments[8]) === "function")){
						this.VidyoUserOnLoginComplete = onLoginComplete;
						this.VidyoUserOnLoggedOut = onLoggedOut;
						this.VidyoUserOnConnectionStatusChanged = onConnectionStatusChanged;
						this.VidyoUserOnTokenReceived = onTokenReceived;
						this.VidyoUserOnWebProxyCredentialsRequest = onWebProxyCredentialsRequest;
						var params = vcUtilsParam({u: this.objId, provisionToken: arguments[0], host: arguments[1], port: arguments[2], serviceType: arguments[3]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserLoginWithTenantToken?" + params, OnComplete, OnError);
					});
				}

				this.Logout = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({user: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({user: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserLogout?" + params, OnComplete, OnError);
					});
				}

				this.PauseUpdateNotification = function(pauseUpdateNotification) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('pauseUpdateNotification')){
							var params = vcUtilsParam({u: this.objId, pauseUpdateNotification: arguments[0].pauseUpdateNotification});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['pauseUpdateNotification'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({u: this.objId, pauseUpdateNotification: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserPauseUpdateNotification?" + params, OnComplete, OnError);
					});
				}

				this.RegisterCallEventListener = function(onCallCreatedByInvite) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onCallCreatedByInvite')){
							this.VidyoUserOnCallCreatedByInvite = arguments[0].onCallCreatedByInvite;
							var params = vcUtilsParam({u: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onCallCreatedByInvite'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoUserOnCallCreatedByInvite = onCallCreatedByInvite;
						var params = vcUtilsParam({u: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserRegisterCallEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterContactEventListener = function(onUpdateSelf, onUpdateRosterContact, onRemoveRosterContact) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onUpdateSelf') && arguments[0].hasOwnProperty('onUpdateRosterContact') && arguments[0].hasOwnProperty('onRemoveRosterContact')){
							this.VidyoUserOnUpdateSelf = arguments[0].onUpdateSelf;
							this.VidyoUserOnUpdateRosterContact = arguments[0].onUpdateRosterContact;
							this.VidyoUserOnRemoveRosterContact = arguments[0].onRemoveRosterContact;
							var params = vcUtilsParam({u: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onUpdateSelf', 'onUpdateRosterContact', 'onRemoveRosterContact'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "function")){
						this.VidyoUserOnUpdateSelf = onUpdateSelf;
						this.VidyoUserOnUpdateRosterContact = onUpdateRosterContact;
						this.VidyoUserOnRemoveRosterContact = onRemoveRosterContact;
						var params = vcUtilsParam({u: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserRegisterContactEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterLicenseEventListener = function(onLicenseReceived, onGetLicenseKey) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onLicenseReceived') && arguments[0].hasOwnProperty('onGetLicenseKey')){
							this.VidyoUserOnLicenseReceived = arguments[0].onLicenseReceived;
							this.VidyoUserOnGetLicenseKey = arguments[0].onGetLicenseKey;
							var params = vcUtilsParam({u: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onLicenseReceived', 'onGetLicenseKey'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function")){
						this.VidyoUserOnLicenseReceived = onLicenseReceived;
						this.VidyoUserOnGetLicenseKey = onGetLicenseKey;
						var params = vcUtilsParam({u: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserRegisterLicenseEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RegisterRoomEventListener = function(onRoomCreatedByInvite, onRoomInviteCancelled) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('onRoomCreatedByInvite') && arguments[0].hasOwnProperty('onRoomInviteCancelled')){
							this.VidyoUserOnRoomCreatedByInvite = arguments[0].onRoomCreatedByInvite;
							this.VidyoUserOnRoomInviteCancelled = arguments[0].onRoomInviteCancelled;
							var params = vcUtilsParam({u: this.objId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['onRoomCreatedByInvite', 'onRoomInviteCancelled'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "function") && (typeof(arguments[1]) === "function")){
						this.VidyoUserOnRoomCreatedByInvite = onRoomCreatedByInvite;
						this.VidyoUserOnRoomInviteCancelled = onRoomInviteCancelled;
						var params = vcUtilsParam({u: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserRegisterRoomEventListener?" + params, OnComplete, OnError);
					});
				}

				this.RemoveRosterContact = function(userId) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('userId')){
							var params = vcUtilsParam({u: this.objId, userId: arguments[0].userId});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['userId'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({u: this.objId, userId: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserRemoveRosterContact?" + params, OnComplete, OnError);
					});
				}

				this.SearchConversationRooms = function(searchText, index, pageSize, onRoomSearchResults) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('searchText') && arguments[0].hasOwnProperty('index') && arguments[0].hasOwnProperty('pageSize') && arguments[0].hasOwnProperty('onRoomSearchResults')){
							this.VidyoUserOnRoomSearchResults = arguments[0].onRoomSearchResults;
							var params = vcUtilsParam({u: this.objId, searchText: arguments[0].searchText, index: arguments[0].index, pageSize: arguments[0].pageSize});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['searchText', 'index', 'pageSize', 'onRoomSearchResults'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "function")){
						this.VidyoUserOnRoomSearchResults = onRoomSearchResults;
						var params = vcUtilsParam({u: this.objId, searchText: arguments[0], index: arguments[1], pageSize: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserSearchConversationRooms?" + params, OnComplete, OnError);
					});
				}

				this.SearchRooms = function(searchText, index, pageSize, onRoomSearchResults) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('searchText') && arguments[0].hasOwnProperty('index') && arguments[0].hasOwnProperty('pageSize') && arguments[0].hasOwnProperty('onRoomSearchResults')){
							this.VidyoUserOnRoomSearchResults = arguments[0].onRoomSearchResults;
							var params = vcUtilsParam({u: this.objId, searchText: arguments[0].searchText, index: arguments[0].index, pageSize: arguments[0].pageSize});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['searchText', 'index', 'pageSize', 'onRoomSearchResults'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "function")){
						this.VidyoUserOnRoomSearchResults = onRoomSearchResults;
						var params = vcUtilsParam({u: this.objId, searchText: arguments[0], index: arguments[1], pageSize: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserSearchRooms?" + params, OnComplete, OnError);
					});
				}

				this.SearchRoomsWithName = function(searchText, index, pageSize, onRoomSearchResults) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('searchText') && arguments[0].hasOwnProperty('index') && arguments[0].hasOwnProperty('pageSize') && arguments[0].hasOwnProperty('onRoomSearchResults')){
							this.VidyoUserOnRoomSearchResults = arguments[0].onRoomSearchResults;
							var params = vcUtilsParam({u: this.objId, searchText: arguments[0].searchText, index: arguments[0].index, pageSize: arguments[0].pageSize});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['searchText', 'index', 'pageSize', 'onRoomSearchResults'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "function")){
						this.VidyoUserOnRoomSearchResults = onRoomSearchResults;
						var params = vcUtilsParam({u: this.objId, searchText: arguments[0], index: arguments[1], pageSize: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserSearchRoomsWithName?" + params, OnComplete, OnError);
					});
				}

				this.SearchRoomsWithOwner = function(searchText, index, pageSize, onRoomSearchResults) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('searchText') && arguments[0].hasOwnProperty('index') && arguments[0].hasOwnProperty('pageSize') && arguments[0].hasOwnProperty('onRoomSearchResults')){
							this.VidyoUserOnRoomSearchResults = arguments[0].onRoomSearchResults;
							var params = vcUtilsParam({u: this.objId, searchText: arguments[0].searchText, index: arguments[0].index, pageSize: arguments[0].pageSize});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['searchText', 'index', 'pageSize', 'onRoomSearchResults'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "function")){
						this.VidyoUserOnRoomSearchResults = onRoomSearchResults;
						var params = vcUtilsParam({u: this.objId, searchText: arguments[0], index: arguments[1], pageSize: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserSearchRoomsWithOwner?" + params, OnComplete, OnError);
					});
				}

				this.SearchRoomsWithSubject = function(searchText, index, pageSize, onRoomSearchResults) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('searchText') && arguments[0].hasOwnProperty('index') && arguments[0].hasOwnProperty('pageSize') && arguments[0].hasOwnProperty('onRoomSearchResults')){
							this.VidyoUserOnRoomSearchResults = arguments[0].onRoomSearchResults;
							var params = vcUtilsParam({u: this.objId, searchText: arguments[0].searchText, index: arguments[0].index, pageSize: arguments[0].pageSize});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['searchText', 'index', 'pageSize', 'onRoomSearchResults'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "function")){
						this.VidyoUserOnRoomSearchResults = onRoomSearchResults;
						var params = vcUtilsParam({u: this.objId, searchText: arguments[0], index: arguments[1], pageSize: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserSearchRoomsWithSubject?" + params, OnComplete, OnError);
					});
				}

				this.SearchTopicRooms = function(searchText, index, pageSize, onRoomSearchResults) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('searchText') && arguments[0].hasOwnProperty('index') && arguments[0].hasOwnProperty('pageSize') && arguments[0].hasOwnProperty('onRoomSearchResults')){
							this.VidyoUserOnRoomSearchResults = arguments[0].onRoomSearchResults;
							var params = vcUtilsParam({u: this.objId, searchText: arguments[0].searchText, index: arguments[0].index, pageSize: arguments[0].pageSize});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['searchText', 'index', 'pageSize', 'onRoomSearchResults'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "function")){
						this.VidyoUserOnRoomSearchResults = onRoomSearchResults;
						var params = vcUtilsParam({u: this.objId, searchText: arguments[0], index: arguments[1], pageSize: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserSearchTopicRooms?" + params, OnComplete, OnError);
					});
				}

				this.SearchUsers = function(searchText, index, pageSize, onUserSearchResults) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('searchText') && arguments[0].hasOwnProperty('index') && arguments[0].hasOwnProperty('pageSize') && arguments[0].hasOwnProperty('onUserSearchResults')){
							this.VidyoUserOnUserSearchResults = arguments[0].onUserSearchResults;
							var params = vcUtilsParam({u: this.objId, searchText: arguments[0].searchText, index: arguments[0].index, pageSize: arguments[0].pageSize});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['searchText', 'index', 'pageSize', 'onUserSearchResults'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 4 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "number") && (typeof(arguments[2]) === "number") && (typeof(arguments[3]) === "function")){
						this.VidyoUserOnUserSearchResults = onUserSearchResults;
						var params = vcUtilsParam({u: this.objId, searchText: arguments[0], index: arguments[1], pageSize: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserSearchUsers?" + params, OnComplete, OnError);
					});
				}

				this.SetCA = function(ca, caFilePath, caDir) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('ca') && arguments[0].hasOwnProperty('caFilePath') && arguments[0].hasOwnProperty('caDir')){
							var params = vcUtilsParam({u: this.objId, ca: arguments[0].ca, caFilePath: arguments[0].caFilePath, caDir: arguments[0].caDir});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['ca', 'caFilePath', 'caDir'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "string")){
						var params = vcUtilsParam({u: this.objId, ca: arguments[0], caFilePath: arguments[1], caDir: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserSetCA?" + params, OnComplete, OnError);
					});
				}

				this.SetDisplayName = function(displayName) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('displayName')){
							var params = vcUtilsParam({u: this.objId, displayName: arguments[0].displayName});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['displayName'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "string")){
						var params = vcUtilsParam({u: this.objId, displayName: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserSetDisplayName?" + params, OnComplete, OnError);
					});
				}

				this.SetTCPTransport = function(enable) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('enable')){
							var params = vcUtilsParam({u: this.objId, enable: arguments[0].enable});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['enable'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({u: this.objId, enable: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserSetTCPTransport?" + params, OnComplete, OnError);
					});
				}

				this.SetUDPTransport = function(enable) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('enable')){
							var params = vcUtilsParam({u: this.objId, enable: arguments[0].enable});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['enable'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({u: this.objId, enable: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserSetUDPTransport?" + params, OnComplete, OnError);
					});
				}

				this.SetWebProxyAddressCredentials = function(proxyAddress, username, password) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('proxyAddress') && arguments[0].hasOwnProperty('username') && arguments[0].hasOwnProperty('password')){
							var params = vcUtilsParam({u: this.objId, proxyAddress: arguments[0].proxyAddress, username: arguments[0].username, password: arguments[0].password});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['proxyAddress', 'username', 'password'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string") && (typeof(arguments[2]) === "string")){
						var params = vcUtilsParam({u: this.objId, proxyAddress: arguments[0], username: arguments[1], password: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserSetWebProxyAddressCredentials?" + params, OnComplete, OnError);
					});
				}

				this.SetWebProxyTransport = function(enable) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('enable')){
							var params = vcUtilsParam({u: this.objId, enable: arguments[0].enable});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['enable'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "boolean")){
						var params = vcUtilsParam({u: this.objId, enable: arguments[0]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserSetWebProxyTransport?" + params, OnComplete, OnError);
					});
				}

				this.SetWebProxyTransportAddress = function(name, port) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('name') && arguments[0].hasOwnProperty('port')){
							var params = vcUtilsParam({u: this.objId, name: arguments[0].name, port: arguments[0].port});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['name', 'port'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "number")){
						var params = vcUtilsParam({u: this.objId, name: arguments[0], port: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserSetWebProxyTransportAddress?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterCallEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({u: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({u: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserUnregisterCallEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterContactEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({u: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({u: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserUnregisterContactEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterLicenseEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({u: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({u: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserUnregisterLicenseEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UnregisterRoomEventListener = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({u: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({u: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserUnregisterRoomEventListener?" + params, OnComplete, OnError);
					});
				}

				this.UpdatePresence = function(state, status) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('state') && arguments[0].hasOwnProperty('status')){
							var params = vcUtilsParam({u: this.objId, state: arguments[0].state, status: arguments[0].status});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['state', 'status'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "string") && (typeof(arguments[1]) === "string")){
						var params = vcUtilsParam({u: this.objId, state: arguments[0], status: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoUserUpdatePresence?" + params, OnComplete, OnError);
					});
				}

				return this;
			}

			this.VidyoMeeting = function(){

				this.Destruct = function() {
					GetRequest("VidyoMeetingDestruct?" + vcUtilsParam({ obj: this.objId }), function(){}, function(){});
					delete objects[this.objId];
				}

				this.GetAttendees = function(index, pageSize) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('index') && arguments[0].hasOwnProperty('pageSize')){
							var params = vcUtilsParam({m: this.objId, index: arguments[0].index, pageSize: arguments[0].pageSize});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['index', 'pageSize'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 2 && (typeof(arguments[0]) === "number") && (typeof(arguments[1]) === "number")){
						var params = vcUtilsParam({m: this.objId, index: arguments[0], pageSize: arguments[1]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoMeetingGetAttendees?" + params, OnComplete, OnError);
					});
				}

				this.GetBody = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({m: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({m: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoMeetingGetBody?" + params, OnComplete, OnError);
					});
				}

				this.GetEndDateTime = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({m: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({m: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoMeetingGetEndDateTime?" + params, OnComplete, OnError);
					});
				}

				this.GetId = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({m: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({m: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoMeetingGetId?" + params, OnComplete, OnError);
					});
				}

				this.GetIsVidyoMeeting = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({m: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({m: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoMeetingGetIsVidyoMeeting?" + params, OnComplete, OnError);
					});
				}

				this.GetLocation = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({m: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({m: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoMeetingGetLocation?" + params, OnComplete, OnError);
					});
				}

				this.GetNumberOfAttendees = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({m: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({m: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoMeetingGetNumberOfAttendees?" + params, OnComplete, OnError);
					});
				}

				this.GetOwnerEmail = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({m: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({m: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoMeetingGetOwnerEmail?" + params, OnComplete, OnError);
					});
				}

				this.GetOwnerName = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({m: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({m: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoMeetingGetOwnerName?" + params, OnComplete, OnError);
					});
				}

				this.GetStartDateTime = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({m: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({m: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoMeetingGetStartDateTime?" + params, OnComplete, OnError);
					});
				}

				this.GetSubject = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({m: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({m: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoMeetingGetSubject?" + params, OnComplete, OnError);
					});
				}

				this.GetVidyoMeetingRoomLink = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({m: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({m: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoMeetingGetVidyoMeetingRoomLink?" + params, OnComplete, OnError);
					});
				}

				this.RetrieveBody = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({m: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({m: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoMeetingRetrieveBody?" + params, OnComplete, OnError);
					});
				}

				return this;
			}

			this.CreateVidyoMeetingFeedback = function(getAttendeeResults) {
				var args = [].slice.apply(arguments);
				if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
					if(arguments[0].hasOwnProperty('getAttendeeResults')){
						var params = vcUtilsParam({f: this.objId});
					} else {
						return Promise.reject(new MissingArgumentException('Missing Parameters', ['getAttendeeResults'], Object.keys(arguments[0])).error);
					}
				} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
					var params = vcUtilsParam({f: this.objId});
				} else {
					return Promise.reject(new Error('Invalid Parameters'));
				}

				return new Promise(function(resolve, reject){
					function OnComplete(response) {
						var vidyoMeetingFeedback = new contextObj.VidyoMeetingFeedback(response.data.VidyoMeetingFeedback);	// copy construct
						if(args.length === 1 && (typeof(args[0]) === "object") && !args[0].objId){
							vidyoMeetingFeedback.VidyoMeetingFeedbackGetMeetingAttendeeResults = args[0].getAttendeeResults;
						} else {
							vidyoMeetingFeedback.VidyoMeetingFeedbackGetMeetingAttendeeResults = getAttendeeResults;
						}
						objects[vidyoMeetingFeedback.objId] = vidyoMeetingFeedback;
						resolve(vidyoMeetingFeedback);
					}
					function OnError(response) {
						reject(Error(response));
					}
					GetRequest("VidyoMeetingFeedbackConstruct?" + params, OnComplete, OnError);
				});
			}
			this.VidyoMeetingFeedback = function(getAttendeeResults) {
				if(arguments.length === 1 && arguments[0].objId && arguments[0].objType && arguments[0].objType === "VidyoMeetingFeedback"){
					vcUtilsExtend(this, arguments[0]);	//	copy construct
				} else {
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('getAttendeeResults')){
							this.VidyoMeetingFeedbackGetMeetingAttendeeResults = arguments[0].getAttendeeResults;
							var params = vcUtilsParam({f: this.objId});
						} else {
							throw new MissingArgumentException('Missing Parameters', ['getAttendeeResults'], Object.keys(arguments[0])).error;
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "function")){
						this.VidyoMeetingFeedbackGetMeetingAttendeeResults = getAttendeeResults;
						var params = vcUtilsParam({f: this.objId});
					} else {
						throw new Error('Invalid Parameters');
					}
					var response = GetRequest("VidyoMeetingFeedbackConstruct?" + params);
					if(response == null)
						throw new Error('No Response from VidyoClient');
					vcUtilsExtend(this, response.VidyoMeetingFeedback);
					objects[this.objId] = this;

				}

				this.Destruct = function() {
					GetRequest("VidyoMeetingFeedbackDestruct?" + vcUtilsParam({ obj: this.objId }), function(){}, function(){});
					delete objects[this.objId];
				}

				return this;
			}

			this.CreateVidyoNetworkService = function(caInfo) {
				var args = [].slice.apply(arguments);
				if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
					if(arguments[0].hasOwnProperty('caInfo')){
						var params = vcUtilsParam({networkService: this.objId, caInfo: JSON.stringify(arguments[0].caInfo)});
					} else {
						return Promise.reject(new MissingArgumentException('Missing Parameters', ['caInfo'], Object.keys(arguments[0])).error);
					}
				} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
					var params = vcUtilsParam({networkService: this.objId, caInfo: JSON.stringify(arguments[0])});
				} else {
					return Promise.reject(new Error('Invalid Parameters'));
				}

				return new Promise(function(resolve, reject){
					function OnComplete(response) {
						var vidyoNetworkService = new contextObj.VidyoNetworkService(response.data.VidyoNetworkService);	// copy construct
						objects[vidyoNetworkService.objId] = vidyoNetworkService;
						resolve(vidyoNetworkService);
					}
					function OnError(response) {
						reject(Error(response));
					}
					GetRequest("VidyoNetworkServiceConstruct?" + params, OnComplete, OnError);
				});
			}
			this.VidyoNetworkService = function(caInfo) {
				if(arguments.length === 1 && arguments[0].objId && arguments[0].objType && arguments[0].objType === "VidyoNetworkService"){
					vcUtilsExtend(this, arguments[0]);	//	copy construct
				} else {
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('caInfo')){
							var params = vcUtilsParam({networkService: this.objId, caInfo: JSON.stringify(arguments[0].caInfo)});
						} else {
							throw new MissingArgumentException('Missing Parameters', ['caInfo'], Object.keys(arguments[0])).error;
						}
					} else if (arguments.length === 1 && (typeof(arguments[0]) === "object")){
						var params = vcUtilsParam({networkService: this.objId, caInfo: JSON.stringify(arguments[0])});
					} else {
						throw new Error('Invalid Parameters');
					}
					var response = GetRequest("VidyoNetworkServiceConstruct?" + params);
					if(response == null)
						throw new Error('No Response from VidyoClient');
					vcUtilsExtend(this, response.VidyoNetworkService);
					objects[this.objId] = this;

				}

				this.Destruct = function() {
					GetRequest("VidyoNetworkServiceDestruct?" + vcUtilsParam({ networkService: this.objId }), function(){}, function(){});
					delete objects[this.objId];
				}

				this.HttpRequestASync = function(requestHeader, responseCB, userData) {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						if(arguments[0].hasOwnProperty('requestHeader') && arguments[0].hasOwnProperty('responseCB') && arguments[0].hasOwnProperty('userData')){
							this.VidyoNetworkServiceResponseCB = arguments[0].responseCB;
							var params = vcUtilsParam({networkService: this.objId, requestHeader: JSON.stringify(arguments[0].requestHeader), userData: arguments[0].userData});
						} else {
							return Promise.reject(new MissingArgumentException('Missing Parameters', ['requestHeader', 'responseCB', 'userData'], Object.keys(arguments[0])).error);
						}
					} else if (arguments.length === 3 && (typeof(arguments[0]) === "object") && (typeof(arguments[1]) === "function") && (typeof(arguments[2]) === "number")){
						this.VidyoNetworkServiceResponseCB = responseCB;
						var params = vcUtilsParam({networkService: this.objId, requestHeader: JSON.stringify(arguments[0]), userData: arguments[2]});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoNetworkServiceHttpRequestASync?" + params, OnComplete, OnError);
					});
				}

				return this;
			}

			this.VidyoNetworkInterface = function(){

				this.Destruct = function() {
					GetRequest("VidyoNetworkInterfaceDestruct?" + vcUtilsParam({ n: this.objId }), function(){}, function(){});
					delete objects[this.objId];
				}

				this.GetAddress = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({n: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({n: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoNetworkInterfaceGetAddress?" + params, OnComplete, OnError);
					});
				}

				this.GetFamily = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({n: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({n: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoNetworkInterfaceGetFamily?" + params, OnComplete, OnError);
					});
				}

				this.GetName = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({n: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({n: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoNetworkInterfaceGetName?" + params, OnComplete, OnError);
					});
				}

				this.GetState = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({n: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({n: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoNetworkInterfaceGetState?" + params, OnComplete, OnError);
					});
				}

				this.GetType = function() {
					var args = [].slice.apply(arguments);
					if(arguments.length === 1 && (typeof(arguments[0]) === "object") && !arguments[0].objId ){
						var params = vcUtilsParam({n: this.objId});
					} else if (arguments.length === 0){
						var params = vcUtilsParam({n: this.objId});
					} else {
						return Promise.reject(new Error('Invalid Parameters'));
					}
					return new Promise(function(resolve, reject){
						function OnComplete(response) {
							resolve(response.data.retValue);
						}
						function OnError(response) {
							reject(Error(response));
						}
						GetRequest("VidyoNetworkInterfaceGetType?" + params, OnComplete, OnError);
					});
				}

				return this;
			}

			var callbacks = {

				VidyoCalendarManagerOnGetServicesComplete: function(response) {
					var VidyoCalendarManagerObj = (response.VidyoCalendarManager) ? objects[response.VidyoCalendarManager.objId] : null;
					var svcNamesObj = response.svcNames;
					var resultObj = response.result;
					try {
						if (VidyoCalendarManagerObj && VidyoCalendarManagerObj.VidyoCalendarManagerOnGetServicesComplete)
							VidyoCalendarManagerObj.VidyoCalendarManagerOnGetServicesComplete(svcNamesObj,resultObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoCalendarManagerOnGetServicesCompleteComplete?" + vcUtilsParam({ cm: response.VidyoCalendarManager ? response.VidyoCalendarManager.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoCalendarManagerFeedbackCalendarCreated: function(response) {
					var VidyoCalendarManagerFeedbackObj = (response.VidyoCalendarManagerFeedback) ? objects[response.VidyoCalendarManagerFeedback.objId] : null;
					var VidyoCalendarManagerObj = (response.VidyoCalendarManager) ? objects[response.VidyoCalendarManager.objId] : null;
					var VidyoCalendarObj = (response.VidyoCalendar) ? new this.VidyoCalendar(null) : null;
					if(response.VidyoCalendar){
						vcUtilsExtend(VidyoCalendarObj, response.VidyoCalendar);
						objects[VidyoCalendarObj.objId] = VidyoCalendarObj;
					}
					var resultCodeObj = response.resultCode;
					var createTokenObj = response.createToken;
					try {
						if (VidyoCalendarManagerFeedbackObj && VidyoCalendarManagerFeedbackObj.VidyoCalendarManagerFeedbackCalendarCreated)
							VidyoCalendarManagerFeedbackObj.VidyoCalendarManagerFeedbackCalendarCreated(VidyoCalendarManagerObj,VidyoCalendarObj,resultCodeObj,createTokenObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoCalendarManagerFeedbackCalendarCreatedComplete?" + vcUtilsParam({ f: response.VidyoCalendarManagerFeedback ? response.VidyoCalendarManagerFeedback.objId : 0, cm: response.VidyoCalendarManager ? response.VidyoCalendarManager.objId : 0, calendar: response.VidyoCalendar ? response.VidyoCalendar.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoCalendarManagerFeedbackCalendarDestroyed: function(response) {
					var VidyoCalendarManagerFeedbackObj = (response.VidyoCalendarManagerFeedback) ? objects[response.VidyoCalendarManagerFeedback.objId] : null;
					var VidyoCalendarManagerObj = (response.VidyoCalendarManager) ? objects[response.VidyoCalendarManager.objId] : null;
					var resultCodeObj = response.resultCode;
					var pluginServiceIdObj = response.pluginServiceId;
					var calendarNameObj = response.calendarName;
					try {
						if (VidyoCalendarManagerFeedbackObj && VidyoCalendarManagerFeedbackObj.VidyoCalendarManagerFeedbackCalendarDestroyed)
							VidyoCalendarManagerFeedbackObj.VidyoCalendarManagerFeedbackCalendarDestroyed(VidyoCalendarManagerObj,resultCodeObj,pluginServiceIdObj,calendarNameObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoCalendarManagerFeedbackCalendarDestroyedComplete?" + vcUtilsParam({ f: response.VidyoCalendarManagerFeedback ? response.VidyoCalendarManagerFeedback.objId : 0, cm: response.VidyoCalendarManager ? response.VidyoCalendarManager.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoCalendarFeedbackConnectResult: function(response) {
					var VidyoCalendarFeedbackObj = (response.VidyoCalendarFeedback) ? objects[response.VidyoCalendarFeedback.objId] : null;
					var VidyoCalendarObj = (response.VidyoCalendar) ? objects[response.VidyoCalendar.objId] : null;
					var resultObj = response.result;
					try {
						if (VidyoCalendarFeedbackObj && VidyoCalendarFeedbackObj.VidyoCalendarFeedbackConnectResult)
							VidyoCalendarFeedbackObj.VidyoCalendarFeedbackConnectResult(VidyoCalendarObj,resultObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoCalendarFeedbackConnectResultComplete?" + vcUtilsParam({ f: response.VidyoCalendarFeedback ? response.VidyoCalendarFeedback.objId : 0, c: response.VidyoCalendar ? response.VidyoCalendar.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoCalendarFeedbackDisconnected: function(response) {
					var VidyoCalendarFeedbackObj = (response.VidyoCalendarFeedback) ? objects[response.VidyoCalendarFeedback.objId] : null;
					var VidyoCalendarObj = (response.VidyoCalendar) ? objects[response.VidyoCalendar.objId] : null;
					var resultObj = response.result;
					try {
						if (VidyoCalendarFeedbackObj && VidyoCalendarFeedbackObj.VidyoCalendarFeedbackDisconnected)
							VidyoCalendarFeedbackObj.VidyoCalendarFeedbackDisconnected(VidyoCalendarObj,resultObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoCalendarFeedbackDisconnectedComplete?" + vcUtilsParam({ f: response.VidyoCalendarFeedback ? response.VidyoCalendarFeedback.objId : 0, c: response.VidyoCalendar ? response.VidyoCalendar.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoCalendarFeedbackGetCapabilitiesResult: function(response) {
					var VidyoCalendarFeedbackObj = (response.VidyoCalendarFeedback) ? objects[response.VidyoCalendarFeedback.objId] : null;
					var VidyoCalendarObj = (response.VidyoCalendar) ? objects[response.VidyoCalendar.objId] : null;
					var capabilitiesObj = response.capabilities;
					var valuesObj = response.values;
					try {
						if (VidyoCalendarFeedbackObj && VidyoCalendarFeedbackObj.VidyoCalendarFeedbackGetCapabilitiesResult)
							VidyoCalendarFeedbackObj.VidyoCalendarFeedbackGetCapabilitiesResult(VidyoCalendarObj,capabilitiesObj,valuesObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoCalendarFeedbackGetCapabilitiesResultComplete?" + vcUtilsParam({ f: response.VidyoCalendarFeedback ? response.VidyoCalendarFeedback.objId : 0, c: response.VidyoCalendar ? response.VidyoCalendar.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoCalendarFeedbackGetMeetingsResult: function(response) {
					var VidyoCalendarFeedbackObj = (response.VidyoCalendarFeedback) ? objects[response.VidyoCalendarFeedback.objId] : null;
					var VidyoCalendarObj = (response.VidyoCalendar) ? objects[response.VidyoCalendar.objId] : null;
					var searchResultObj = response.searchResult;
					var meetingsObj = response.meetings;
					var currentIndexObj = response.currentIndex;
					var numRecordsObj = response.numRecords;
					try {
						if (VidyoCalendarFeedbackObj && VidyoCalendarFeedbackObj.VidyoCalendarFeedbackGetMeetingsResult)
							VidyoCalendarFeedbackObj.VidyoCalendarFeedbackGetMeetingsResult(VidyoCalendarObj,searchResultObj,meetingsObj,currentIndexObj,numRecordsObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoCalendarFeedbackGetMeetingsResultComplete?" + vcUtilsParam({ f: response.VidyoCalendarFeedback ? response.VidyoCalendarFeedback.objId : 0, c: response.VidyoCalendar ? response.VidyoCalendar.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoCalendarFeedbackMeetingCreatedById: function(response) {
					var VidyoCalendarFeedbackObj = (response.VidyoCalendarFeedback) ? objects[response.VidyoCalendarFeedback.objId] : null;
					var VidyoCalendarObj = (response.VidyoCalendar) ? objects[response.VidyoCalendar.objId] : null;
					var VidyoMeetingObj = (response.VidyoMeeting) ? new this.VidyoMeeting(null) : null;
					if(response.VidyoMeeting){
						vcUtilsExtend(VidyoMeetingObj, response.VidyoMeeting);
						objects[VidyoMeetingObj.objId] = VidyoMeetingObj;
					}
					var rObj = response.r;
					var createTokenObj = response.createToken;
					try {
						if (VidyoCalendarFeedbackObj && VidyoCalendarFeedbackObj.VidyoCalendarFeedbackMeetingCreatedById)
							VidyoCalendarFeedbackObj.VidyoCalendarFeedbackMeetingCreatedById(VidyoCalendarObj,VidyoMeetingObj,rObj,createTokenObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoCalendarFeedbackMeetingCreatedByIdComplete?" + vcUtilsParam({ f: response.VidyoCalendarFeedback ? response.VidyoCalendarFeedback.objId : 0, c: response.VidyoCalendar ? response.VidyoCalendar.objId : 0, m: response.VidyoMeeting ? response.VidyoMeeting.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoCalendarFeedbackMeetingCreatedByService: function(response) {
					var VidyoCalendarFeedbackObj = (response.VidyoCalendarFeedback) ? objects[response.VidyoCalendarFeedback.objId] : null;
					var VidyoCalendarObj = (response.VidyoCalendar) ? objects[response.VidyoCalendar.objId] : null;
					var VidyoMeetingInfoObj = (response.VidyoMeetingInfo) ? response.VidyoMeetingInfo : null;
					try {
						if (VidyoCalendarFeedbackObj && VidyoCalendarFeedbackObj.VidyoCalendarFeedbackMeetingCreatedByService)
							VidyoCalendarFeedbackObj.VidyoCalendarFeedbackMeetingCreatedByService(VidyoCalendarObj,VidyoMeetingInfoObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoCalendarFeedbackMeetingCreatedByServiceComplete?" + vcUtilsParam({ f: response.VidyoCalendarFeedback ? response.VidyoCalendarFeedback.objId : 0, c: response.VidyoCalendar ? response.VidyoCalendar.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoCalendarFeedbackMeetingReminder: function(response) {
					var VidyoCalendarFeedbackObj = (response.VidyoCalendarFeedback) ? objects[response.VidyoCalendarFeedback.objId] : null;
					var VidyoCalendarObj = (response.VidyoCalendar) ? objects[response.VidyoCalendar.objId] : null;
					var VidyoMeetingInfoObj = (response.VidyoMeetingInfo) ? response.VidyoMeetingInfo : null;
					try {
						if (VidyoCalendarFeedbackObj && VidyoCalendarFeedbackObj.VidyoCalendarFeedbackMeetingReminder)
							VidyoCalendarFeedbackObj.VidyoCalendarFeedbackMeetingReminder(VidyoCalendarObj,VidyoMeetingInfoObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoCalendarFeedbackMeetingReminderComplete?" + vcUtilsParam({ f: response.VidyoCalendarFeedback ? response.VidyoCalendarFeedback.objId : 0, c: response.VidyoCalendar ? response.VidyoCalendar.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoCalendarFeedbackMeetingRemovedByService: function(response) {
					var VidyoCalendarFeedbackObj = (response.VidyoCalendarFeedback) ? objects[response.VidyoCalendarFeedback.objId] : null;
					var VidyoCalendarObj = (response.VidyoCalendar) ? objects[response.VidyoCalendar.objId] : null;
					var VidyoMeetingInfoObj = (response.VidyoMeetingInfo) ? response.VidyoMeetingInfo : null;
					try {
						if (VidyoCalendarFeedbackObj && VidyoCalendarFeedbackObj.VidyoCalendarFeedbackMeetingRemovedByService)
							VidyoCalendarFeedbackObj.VidyoCalendarFeedbackMeetingRemovedByService(VidyoCalendarObj,VidyoMeetingInfoObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoCalendarFeedbackMeetingRemovedByServiceComplete?" + vcUtilsParam({ f: response.VidyoCalendarFeedback ? response.VidyoCalendarFeedback.objId : 0, c: response.VidyoCalendar ? response.VidyoCalendar.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoCalendarFeedbackMeetingUpdatedByService: function(response) {
					var VidyoCalendarFeedbackObj = (response.VidyoCalendarFeedback) ? objects[response.VidyoCalendarFeedback.objId] : null;
					var VidyoCalendarObj = (response.VidyoCalendar) ? objects[response.VidyoCalendar.objId] : null;
					var VidyoMeetingInfoObj = (response.VidyoMeetingInfo) ? response.VidyoMeetingInfo : null;
					try {
						if (VidyoCalendarFeedbackObj && VidyoCalendarFeedbackObj.VidyoCalendarFeedbackMeetingUpdatedByService)
							VidyoCalendarFeedbackObj.VidyoCalendarFeedbackMeetingUpdatedByService(VidyoCalendarObj,VidyoMeetingInfoObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoCalendarFeedbackMeetingUpdatedByServiceComplete?" + vcUtilsParam({ f: response.VidyoCalendarFeedback ? response.VidyoCalendarFeedback.objId : 0, c: response.VidyoCalendar ? response.VidyoCalendar.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoCalendarFeedbackSeriesUpdate: function(response) {
					var VidyoCalendarFeedbackObj = (response.VidyoCalendarFeedback) ? objects[response.VidyoCalendarFeedback.objId] : null;
					var VidyoCalendarObj = (response.VidyoCalendar) ? objects[response.VidyoCalendar.objId] : null;
					var VidyoMeetingInfoObj = (response.VidyoMeetingInfo) ? response.VidyoMeetingInfo : null;
					try {
						if (VidyoCalendarFeedbackObj && VidyoCalendarFeedbackObj.VidyoCalendarFeedbackSeriesUpdate)
							VidyoCalendarFeedbackObj.VidyoCalendarFeedbackSeriesUpdate(VidyoCalendarObj,VidyoMeetingInfoObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoCalendarFeedbackSeriesUpdateComplete?" + vcUtilsParam({ f: response.VidyoCalendarFeedback ? response.VidyoCalendarFeedback.objId : 0, c: response.VidyoCalendar ? response.VidyoCalendar.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnAvailableResourcesChanged: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var cpuEncodeObj = response.cpuEncode;
					var cpuDecodeObj = response.cpuDecode;
					var bandwidthSendObj = response.bandwidthSend;
					var bandwidthReceiveObj = response.bandwidthReceive;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnAvailableResourcesChanged)
							VidyoConnectorObj.VidyoConnectorOnAvailableResourcesChanged(cpuEncodeObj,cpuDecodeObj,bandwidthSendObj,bandwidthReceiveObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnAvailableResourcesChangedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnCameraEffectError: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var errorObj = response.error;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnCameraEffectError)
							VidyoConnectorObj.VidyoConnectorOnCameraEffectError(errorObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnCameraEffectErrorComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnChatMessageReceived: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					var VidyoChatMessageObj = (response.VidyoChatMessage) ? response.VidyoChatMessage : null;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnChatMessageReceived)
							VidyoConnectorObj.VidyoConnectorOnChatMessageReceived(VidyoParticipantObj,VidyoChatMessageObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnChatMessageReceivedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnConferenceHostStatusChanged: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					var hostStateObj = response.hostState;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnConferenceHostStatusChanged)
							VidyoConnectorObj.VidyoConnectorOnConferenceHostStatusChanged(VidyoParticipantObj,hostStateObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnConferenceHostStatusChangedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, host: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnConferenceLost: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var reasonObj = response.reason;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnConferenceLost)
							VidyoConnectorObj.VidyoConnectorOnConferenceLost(reasonObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnConferenceLostComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnConferenceModeChanged: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var modeObj = response.mode;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnConferenceModeChanged)
							VidyoConnectorObj.VidyoConnectorOnConferenceModeChanged(modeObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnConferenceModeChangedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnConnectionPropertiesChanged: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoConnectorConnectionPropertiesObj = (response.VidyoConnectorConnectionProperties) ? response.VidyoConnectorConnectionProperties : null;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnConnectionPropertiesChanged)
							VidyoConnectorObj.VidyoConnectorOnConnectionPropertiesChanged(VidyoConnectorConnectionPropertiesObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnConnectionPropertiesChangedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnDisconnected: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var reasonObj = response.reason;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnDisconnected)
							VidyoConnectorObj.VidyoConnectorOnDisconnected(reasonObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnDisconnectedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnDynamicParticipantChanged: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var participantsObj = response.participants;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnDynamicParticipantChanged)
							VidyoConnectorObj.VidyoConnectorOnDynamicParticipantChanged(participantsObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnDynamicParticipantChangedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnError: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var errorObj = response.error;
					var apiNameObj = response.apiName;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnError)
							VidyoConnectorObj.VidyoConnectorOnError(errorObj,apiNameObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnErrorComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnFailure: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var reasonObj = response.reason;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnFailure)
							VidyoConnectorObj.VidyoConnectorOnFailure(reasonObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnFailureComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnGetActiveNetworkInterface: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoNetworkInterfaceObj = (response.VidyoNetworkInterface) ? objects[response.VidyoNetworkInterface.objId] : null;
					var VidyoNetworkInterfaceObj = (response.VidyoNetworkInterface) ? objects[response.VidyoNetworkInterface.objId] : null;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnGetActiveNetworkInterface)
							VidyoConnectorObj.VidyoConnectorOnGetActiveNetworkInterface(VidyoNetworkInterfaceObj,VidyoNetworkInterfaceObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnGetActiveNetworkInterfaceComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, signalingInterface: response.VidyoNetworkInterface ? response.VidyoNetworkInterface.objId : 0, mediaInterface: response.VidyoNetworkInterface ? response.VidyoNetworkInterface.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnGetAutoReconnectSetting: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var enableAutoReconnectObj = response.enableAutoReconnect;
					var reconnectBackoffObj = response.reconnectBackoff;
					var maxReconnectAttemptsObj = response.maxReconnectAttempts;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnGetAutoReconnectSetting)
							VidyoConnectorObj.VidyoConnectorOnGetAutoReconnectSetting(enableAutoReconnectObj,reconnectBackoffObj,maxReconnectAttemptsObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnGetAutoReconnectSettingComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnGetCameraBackgroundEffectInfo: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoConnectorCameraEffectInfoObj = (response.VidyoConnectorCameraEffectInfo) ? response.VidyoConnectorCameraEffectInfo : null;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnGetCameraBackgroundEffectInfo)
							VidyoConnectorObj.VidyoConnectorOnGetCameraBackgroundEffectInfo(VidyoConnectorCameraEffectInfoObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnGetCameraBackgroundEffectInfoComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnGetGoogleAnalyticsEventTable: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var eventTableObj = response.eventTable;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnGetGoogleAnalyticsEventTable)
							VidyoConnectorObj.VidyoConnectorOnGetGoogleAnalyticsEventTable(eventTableObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnGetGoogleAnalyticsEventTableComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnGetRecordingServiceProfiles: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var profilesObj = response.profiles;
					var prefixesObj = response.prefixes;
					var resultObj = response.result;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnGetRecordingServiceProfiles)
							VidyoConnectorObj.VidyoConnectorOnGetRecordingServiceProfiles(profilesObj,prefixesObj,resultObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnGetRecordingServiceProfilesComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnGetWhitelistedAudioDevices: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var audioDevicesObj = response.audioDevices;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnGetWhitelistedAudioDevices)
							VidyoConnectorObj.VidyoConnectorOnGetWhitelistedAudioDevices(audioDevicesObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnGetWhitelistedAudioDevicesComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnHandRaised: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var participantObj = response.participant;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnHandRaised)
							VidyoConnectorObj.VidyoConnectorOnHandRaised(participantObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnHandRaisedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnInCallEvents: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoConnectorInCallEventObj = (response.VidyoConnectorInCallEvent) ? response.VidyoConnectorInCallEvent : null;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnInCallEvents)
							VidyoConnectorObj.VidyoConnectorOnInCallEvents(VidyoConnectorInCallEventObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnInCallEventsComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnInviteResult: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var inviteeIdObj = response.inviteeId;
					var resultObj = response.result;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnInviteResult)
							VidyoConnectorObj.VidyoConnectorOnInviteResult(inviteeIdObj,resultObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnInviteResultComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnLocalCameraAdded: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoLocalCameraObj = new this.VidyoLocalCamera(null);
					vcUtilsExtend(VidyoLocalCameraObj, response.VidyoLocalCamera);
					objects[VidyoLocalCameraObj.objId] = VidyoLocalCameraObj;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalCameraAdded)
							VidyoConnectorObj.VidyoConnectorOnLocalCameraAdded(VidyoLocalCameraObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnLocalCameraAddedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, localCamera: response.VidyoLocalCamera ? response.VidyoLocalCamera.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnLocalCameraFrame: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoLocalCameraObj = (response.VidyoLocalCamera) ? objects[response.VidyoLocalCamera.objId] : null;
					var VidyoVideoFrameObj = (response.VidyoVideoFrame) ? objects[response.VidyoVideoFrame.objId] : null;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalCameraFrame)
							VidyoConnectorObj.VidyoConnectorOnLocalCameraFrame(VidyoLocalCameraObj,VidyoVideoFrameObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnLocalCameraFrameComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, localCamera: response.VidyoLocalCamera ? response.VidyoLocalCamera.objId : 0, videoFrame: response.VidyoVideoFrame ? response.VidyoVideoFrame.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnLocalCameraRemoved: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoLocalCameraObj = objects[response.VidyoLocalCamera.objId];
					delete objects[response.VidyoLocalCamera.objId];
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalCameraRemoved)
							VidyoConnectorObj.VidyoConnectorOnLocalCameraRemoved(VidyoLocalCameraObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnLocalCameraRemovedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, localCamera: response.VidyoLocalCamera ? response.VidyoLocalCamera.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnLocalCameraSelected: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoLocalCameraObj = (response.VidyoLocalCamera) ? objects[response.VidyoLocalCamera.objId] : null;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalCameraSelected)
							VidyoConnectorObj.VidyoConnectorOnLocalCameraSelected(VidyoLocalCameraObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnLocalCameraSelectedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, localCamera: response.VidyoLocalCamera ? response.VidyoLocalCamera.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnLocalCameraStateUpdated: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoLocalCameraObj = (response.VidyoLocalCamera) ? objects[response.VidyoLocalCamera.objId] : null;
					var stateObj = response.state;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalCameraStateUpdated)
							VidyoConnectorObj.VidyoConnectorOnLocalCameraStateUpdated(VidyoLocalCameraObj,stateObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnLocalCameraStateUpdatedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, localCamera: response.VidyoLocalCamera ? response.VidyoLocalCamera.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnLocalMicrophoneAdded: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoLocalMicrophoneObj = new this.VidyoLocalMicrophone(null);
					vcUtilsExtend(VidyoLocalMicrophoneObj, response.VidyoLocalMicrophone);
					objects[VidyoLocalMicrophoneObj.objId] = VidyoLocalMicrophoneObj;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalMicrophoneAdded)
							VidyoConnectorObj.VidyoConnectorOnLocalMicrophoneAdded(VidyoLocalMicrophoneObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnLocalMicrophoneAddedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, localMicrophone: response.VidyoLocalMicrophone ? response.VidyoLocalMicrophone.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnLocalMicrophoneEnergy: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoLocalMicrophoneObj = (response.VidyoLocalMicrophone) ? objects[response.VidyoLocalMicrophone.objId] : null;
					var audioEnergyObj = response.audioEnergy;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalMicrophoneEnergy)
							VidyoConnectorObj.VidyoConnectorOnLocalMicrophoneEnergy(VidyoLocalMicrophoneObj,audioEnergyObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnLocalMicrophoneEnergyComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, localMicrophone: response.VidyoLocalMicrophone ? response.VidyoLocalMicrophone.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnLocalMicrophoneFrame: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoLocalMicrophoneObj = (response.VidyoLocalMicrophone) ? objects[response.VidyoLocalMicrophone.objId] : null;
					var VidyoAudioFrameObj = (response.VidyoAudioFrame) ? objects[response.VidyoAudioFrame.objId] : null;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalMicrophoneFrame)
							VidyoConnectorObj.VidyoConnectorOnLocalMicrophoneFrame(VidyoLocalMicrophoneObj,VidyoAudioFrameObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnLocalMicrophoneFrameComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, localMicrophone: response.VidyoLocalMicrophone ? response.VidyoLocalMicrophone.objId : 0, audioFrame: response.VidyoAudioFrame ? response.VidyoAudioFrame.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnLocalMicrophoneRemoved: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoLocalMicrophoneObj = objects[response.VidyoLocalMicrophone.objId];
					delete objects[response.VidyoLocalMicrophone.objId];
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalMicrophoneRemoved)
							VidyoConnectorObj.VidyoConnectorOnLocalMicrophoneRemoved(VidyoLocalMicrophoneObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnLocalMicrophoneRemovedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, localMicrophone: response.VidyoLocalMicrophone ? response.VidyoLocalMicrophone.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnLocalMicrophoneSelected: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoLocalMicrophoneObj = (response.VidyoLocalMicrophone) ? objects[response.VidyoLocalMicrophone.objId] : null;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalMicrophoneSelected)
							VidyoConnectorObj.VidyoConnectorOnLocalMicrophoneSelected(VidyoLocalMicrophoneObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnLocalMicrophoneSelectedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, localMicrophone: response.VidyoLocalMicrophone ? response.VidyoLocalMicrophone.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnLocalMicrophoneStateUpdated: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoLocalMicrophoneObj = (response.VidyoLocalMicrophone) ? objects[response.VidyoLocalMicrophone.objId] : null;
					var stateObj = response.state;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalMicrophoneStateUpdated)
							VidyoConnectorObj.VidyoConnectorOnLocalMicrophoneStateUpdated(VidyoLocalMicrophoneObj,stateObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnLocalMicrophoneStateUpdatedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, localMicrophone: response.VidyoLocalMicrophone ? response.VidyoLocalMicrophone.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnLocalMonitorAdded: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoLocalMonitorObj = new this.VidyoLocalMonitor(null);
					vcUtilsExtend(VidyoLocalMonitorObj, response.VidyoLocalMonitor);
					objects[VidyoLocalMonitorObj.objId] = VidyoLocalMonitorObj;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalMonitorAdded)
							VidyoConnectorObj.VidyoConnectorOnLocalMonitorAdded(VidyoLocalMonitorObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnLocalMonitorAddedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, localMonitor: response.VidyoLocalMonitor ? response.VidyoLocalMonitor.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnLocalMonitorFrame: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoLocalMonitorObj = (response.VidyoLocalMonitor) ? objects[response.VidyoLocalMonitor.objId] : null;
					var VidyoVideoFrameObj = (response.VidyoVideoFrame) ? objects[response.VidyoVideoFrame.objId] : null;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalMonitorFrame)
							VidyoConnectorObj.VidyoConnectorOnLocalMonitorFrame(VidyoLocalMonitorObj,VidyoVideoFrameObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnLocalMonitorFrameComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, localMonitor: response.VidyoLocalMonitor ? response.VidyoLocalMonitor.objId : 0, videoFrame: response.VidyoVideoFrame ? response.VidyoVideoFrame.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnLocalMonitorRemoved: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoLocalMonitorObj = objects[response.VidyoLocalMonitor.objId];
					delete objects[response.VidyoLocalMonitor.objId];
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalMonitorRemoved)
							VidyoConnectorObj.VidyoConnectorOnLocalMonitorRemoved(VidyoLocalMonitorObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnLocalMonitorRemovedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, localMonitor: response.VidyoLocalMonitor ? response.VidyoLocalMonitor.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnLocalMonitorSelected: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoLocalMonitorObj = (response.VidyoLocalMonitor) ? objects[response.VidyoLocalMonitor.objId] : null;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalMonitorSelected)
							VidyoConnectorObj.VidyoConnectorOnLocalMonitorSelected(VidyoLocalMonitorObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnLocalMonitorSelectedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, localMonitor: response.VidyoLocalMonitor ? response.VidyoLocalMonitor.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnLocalMonitorStateUpdated: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoLocalMonitorObj = (response.VidyoLocalMonitor) ? objects[response.VidyoLocalMonitor.objId] : null;
					var stateObj = response.state;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalMonitorStateUpdated)
							VidyoConnectorObj.VidyoConnectorOnLocalMonitorStateUpdated(VidyoLocalMonitorObj,stateObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnLocalMonitorStateUpdatedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, localMonitor: response.VidyoLocalMonitor ? response.VidyoLocalMonitor.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnLocalSpeakerAdded: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoLocalSpeakerObj = new this.VidyoLocalSpeaker(null);
					vcUtilsExtend(VidyoLocalSpeakerObj, response.VidyoLocalSpeaker);
					objects[VidyoLocalSpeakerObj.objId] = VidyoLocalSpeakerObj;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalSpeakerAdded)
							VidyoConnectorObj.VidyoConnectorOnLocalSpeakerAdded(VidyoLocalSpeakerObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnLocalSpeakerAddedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, localSpeaker: response.VidyoLocalSpeaker ? response.VidyoLocalSpeaker.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnLocalSpeakerRemoved: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoLocalSpeakerObj = objects[response.VidyoLocalSpeaker.objId];
					delete objects[response.VidyoLocalSpeaker.objId];
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalSpeakerRemoved)
							VidyoConnectorObj.VidyoConnectorOnLocalSpeakerRemoved(VidyoLocalSpeakerObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnLocalSpeakerRemovedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, localSpeaker: response.VidyoLocalSpeaker ? response.VidyoLocalSpeaker.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnLocalSpeakerSelected: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoLocalSpeakerObj = (response.VidyoLocalSpeaker) ? objects[response.VidyoLocalSpeaker.objId] : null;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalSpeakerSelected)
							VidyoConnectorObj.VidyoConnectorOnLocalSpeakerSelected(VidyoLocalSpeakerObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnLocalSpeakerSelectedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, localSpeaker: response.VidyoLocalSpeaker ? response.VidyoLocalSpeaker.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnLocalSpeakerStateUpdated: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoLocalSpeakerObj = (response.VidyoLocalSpeaker) ? objects[response.VidyoLocalSpeaker.objId] : null;
					var stateObj = response.state;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalSpeakerStateUpdated)
							VidyoConnectorObj.VidyoConnectorOnLocalSpeakerStateUpdated(VidyoLocalSpeakerObj,stateObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnLocalSpeakerStateUpdatedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, localSpeaker: response.VidyoLocalSpeaker ? response.VidyoLocalSpeaker.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnLocalWindowShareAdded: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoLocalWindowShareObj = new this.VidyoLocalWindowShare(null);
					vcUtilsExtend(VidyoLocalWindowShareObj, response.VidyoLocalWindowShare);
					objects[VidyoLocalWindowShareObj.objId] = VidyoLocalWindowShareObj;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalWindowShareAdded)
							VidyoConnectorObj.VidyoConnectorOnLocalWindowShareAdded(VidyoLocalWindowShareObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnLocalWindowShareAddedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, localWindowShare: response.VidyoLocalWindowShare ? response.VidyoLocalWindowShare.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnLocalWindowShareFrame: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoLocalWindowShareObj = (response.VidyoLocalWindowShare) ? objects[response.VidyoLocalWindowShare.objId] : null;
					var VidyoVideoFrameObj = (response.VidyoVideoFrame) ? objects[response.VidyoVideoFrame.objId] : null;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalWindowShareFrame)
							VidyoConnectorObj.VidyoConnectorOnLocalWindowShareFrame(VidyoLocalWindowShareObj,VidyoVideoFrameObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnLocalWindowShareFrameComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, localWindowShare: response.VidyoLocalWindowShare ? response.VidyoLocalWindowShare.objId : 0, videoFrame: response.VidyoVideoFrame ? response.VidyoVideoFrame.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnLocalWindowShareRemoved: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoLocalWindowShareObj = objects[response.VidyoLocalWindowShare.objId];
					delete objects[response.VidyoLocalWindowShare.objId];
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalWindowShareRemoved)
							VidyoConnectorObj.VidyoConnectorOnLocalWindowShareRemoved(VidyoLocalWindowShareObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnLocalWindowShareRemovedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, localWindowShare: response.VidyoLocalWindowShare ? response.VidyoLocalWindowShare.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnLocalWindowShareSelected: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoLocalWindowShareObj = (response.VidyoLocalWindowShare) ? objects[response.VidyoLocalWindowShare.objId] : null;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalWindowShareSelected)
							VidyoConnectorObj.VidyoConnectorOnLocalWindowShareSelected(VidyoLocalWindowShareObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnLocalWindowShareSelectedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, localWindowShare: response.VidyoLocalWindowShare ? response.VidyoLocalWindowShare.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnLocalWindowShareStateUpdated: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoLocalWindowShareObj = (response.VidyoLocalWindowShare) ? objects[response.VidyoLocalWindowShare.objId] : null;
					var stateObj = response.state;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLocalWindowShareStateUpdated)
							VidyoConnectorObj.VidyoConnectorOnLocalWindowShareStateUpdated(VidyoLocalWindowShareObj,stateObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnLocalWindowShareStateUpdatedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, localWindowShare: response.VidyoLocalWindowShare ? response.VidyoLocalWindowShare.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnLockRoomResult: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var resultObj = response.result;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLockRoomResult)
							VidyoConnectorObj.VidyoConnectorOnLockRoomResult(resultObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnLockRoomResultComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnLog: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoLogRecordObj = (response.VidyoLogRecord) ? response.VidyoLogRecord : null;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLog)
							VidyoConnectorObj.VidyoConnectorOnLog(VidyoLogRecordObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnLogComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnLoudestParticipantChanged: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					var audioOnlyObj = response.audioOnly;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnLoudestParticipantChanged)
							VidyoConnectorObj.VidyoConnectorOnLoudestParticipantChanged(VidyoParticipantObj,audioOnlyObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnLoudestParticipantChangedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnMaxRemoteSourcesChanged: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var maxRemoteSourcesObj = response.maxRemoteSources;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnMaxRemoteSourcesChanged)
							VidyoConnectorObj.VidyoConnectorOnMaxRemoteSourcesChanged(maxRemoteSourcesObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnMaxRemoteSourcesChangedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnModerationCommandReceived: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var deviceTypeObj = response.deviceType;
					var moderationTypeObj = response.moderationType;
					var stateObj = response.state;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnModerationCommandReceived)
							VidyoConnectorObj.VidyoConnectorOnModerationCommandReceived(deviceTypeObj,moderationTypeObj,stateObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnModerationCommandReceivedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnModerationResult: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					var resultObj = response.result;
					var actionObj = response.action;
					var requestIdObj = response.requestId;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnModerationResult)
							VidyoConnectorObj.VidyoConnectorOnModerationResult(VidyoParticipantObj,resultObj,actionObj,requestIdObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnModerationResultComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnNetworkInterfaceAdded: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoNetworkInterfaceObj = new this.VidyoNetworkInterface(null);
					vcUtilsExtend(VidyoNetworkInterfaceObj, response.VidyoNetworkInterface);
					objects[VidyoNetworkInterfaceObj.objId] = VidyoNetworkInterfaceObj;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnNetworkInterfaceAdded)
							VidyoConnectorObj.VidyoConnectorOnNetworkInterfaceAdded(VidyoNetworkInterfaceObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnNetworkInterfaceAddedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, networkInterface: response.VidyoNetworkInterface ? response.VidyoNetworkInterface.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnNetworkInterfaceRemoved: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoNetworkInterfaceObj = objects[response.VidyoNetworkInterface.objId];
					delete objects[response.VidyoNetworkInterface.objId];
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnNetworkInterfaceRemoved)
							VidyoConnectorObj.VidyoConnectorOnNetworkInterfaceRemoved(VidyoNetworkInterfaceObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnNetworkInterfaceRemovedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, networkInterface: response.VidyoNetworkInterface ? response.VidyoNetworkInterface.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnNetworkInterfaceSelected: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoNetworkInterfaceObj = (response.VidyoNetworkInterface) ? objects[response.VidyoNetworkInterface.objId] : null;
					var transportTypeObj = response.transportType;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnNetworkInterfaceSelected)
							VidyoConnectorObj.VidyoConnectorOnNetworkInterfaceSelected(VidyoNetworkInterfaceObj,transportTypeObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnNetworkInterfaceSelectedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, networkInterface: response.VidyoNetworkInterface ? response.VidyoNetworkInterface.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnNetworkInterfaceStateUpdated: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoNetworkInterfaceObj = (response.VidyoNetworkInterface) ? objects[response.VidyoNetworkInterface.objId] : null;
					var stateObj = response.state;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnNetworkInterfaceStateUpdated)
							VidyoConnectorObj.VidyoConnectorOnNetworkInterfaceStateUpdated(VidyoNetworkInterfaceObj,stateObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnNetworkInterfaceStateUpdatedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, networkInterface: response.VidyoNetworkInterface ? response.VidyoNetworkInterface.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnParticipantJoined: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoParticipantObj = (response.VidyoParticipant) ? new this.VidyoParticipant(null) : null;
					if(response.VidyoParticipant){
						vcUtilsExtend(VidyoParticipantObj, response.VidyoParticipant);
						objects[VidyoParticipantObj.objId] = VidyoParticipantObj;
					}
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnParticipantJoined)
							VidyoConnectorObj.VidyoConnectorOnParticipantJoined(VidyoParticipantObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnParticipantJoinedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnParticipantLeft: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoParticipantObj = objects[response.VidyoParticipant.objId];
					delete objects[response.VidyoParticipant.objId];
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnParticipantLeft)
							VidyoConnectorObj.VidyoConnectorOnParticipantLeft(VidyoParticipantObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnParticipantLeftComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnPresenterChanged: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnPresenterChanged)
							VidyoConnectorObj.VidyoConnectorOnPresenterChanged(VidyoParticipantObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnPresenterChangedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnRaiseHandResponse: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var handStateObj = response.handState;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnRaiseHandResponse)
							VidyoConnectorObj.VidyoConnectorOnRaiseHandResponse(handStateObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnRaiseHandResponseComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnReconnected: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnReconnected)
							VidyoConnectorObj.VidyoConnectorOnReconnected();
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnReconnectedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnReconnecting: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var attemptObj = response.attempt;
					var attemptTimeoutObj = response.attemptTimeout;
					var reasonObj = response.reason;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnReconnecting)
							VidyoConnectorObj.VidyoConnectorOnReconnecting(attemptObj,attemptTimeoutObj,reasonObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnReconnectingComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnRecordingServicePauseResult: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var resultObj = response.result;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnRecordingServicePauseResult)
							VidyoConnectorObj.VidyoConnectorOnRecordingServicePauseResult(resultObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnRecordingServicePauseResultComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnRecordingServiceResumeResult: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var resultObj = response.result;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnRecordingServiceResumeResult)
							VidyoConnectorObj.VidyoConnectorOnRecordingServiceResumeResult(resultObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnRecordingServiceResumeResultComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnRecordingServiceStartResult: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var resultObj = response.result;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnRecordingServiceStartResult)
							VidyoConnectorObj.VidyoConnectorOnRecordingServiceStartResult(resultObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnRecordingServiceStartResultComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnRecordingServiceStopResult: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var resultObj = response.result;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnRecordingServiceStopResult)
							VidyoConnectorObj.VidyoConnectorOnRecordingServiceStopResult(resultObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnRecordingServiceStopResultComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnRemoteCameraAdded: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoRemoteCameraObj = new this.VidyoRemoteCamera(null);
					vcUtilsExtend(VidyoRemoteCameraObj, response.VidyoRemoteCamera);
					objects[VidyoRemoteCameraObj.objId] = VidyoRemoteCameraObj;
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnRemoteCameraAdded)
							VidyoConnectorObj.VidyoConnectorOnRemoteCameraAdded(VidyoRemoteCameraObj,VidyoParticipantObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnRemoteCameraAddedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, remoteCamera: response.VidyoRemoteCamera ? response.VidyoRemoteCamera.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnRemoteCameraFirstFrameReceived: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoRemoteCameraObj = (response.VidyoRemoteCamera) ? objects[response.VidyoRemoteCamera.objId] : null;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnRemoteCameraFirstFrameReceived)
							VidyoConnectorObj.VidyoConnectorOnRemoteCameraFirstFrameReceived(VidyoRemoteCameraObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnRemoteCameraFirstFrameReceivedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, remoteCamera: response.VidyoRemoteCamera ? response.VidyoRemoteCamera.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnRemoteCameraFrame: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoRemoteCameraObj = (response.VidyoRemoteCamera) ? objects[response.VidyoRemoteCamera.objId] : null;
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					var VidyoVideoFrameObj = (response.VidyoVideoFrame) ? objects[response.VidyoVideoFrame.objId] : null;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnRemoteCameraFrame)
							VidyoConnectorObj.VidyoConnectorOnRemoteCameraFrame(VidyoRemoteCameraObj,VidyoParticipantObj,VidyoVideoFrameObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnRemoteCameraFrameComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, remoteCamera: response.VidyoRemoteCamera ? response.VidyoRemoteCamera.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0, videoFrame: response.VidyoVideoFrame ? response.VidyoVideoFrame.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnRemoteCameraRemoved: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoRemoteCameraObj = objects[response.VidyoRemoteCamera.objId];
					delete objects[response.VidyoRemoteCamera.objId];
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnRemoteCameraRemoved)
							VidyoConnectorObj.VidyoConnectorOnRemoteCameraRemoved(VidyoRemoteCameraObj,VidyoParticipantObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnRemoteCameraRemovedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, remoteCamera: response.VidyoRemoteCamera ? response.VidyoRemoteCamera.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnRemoteCameraStateUpdated: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoRemoteCameraObj = (response.VidyoRemoteCamera) ? objects[response.VidyoRemoteCamera.objId] : null;
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					var stateObj = response.state;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnRemoteCameraStateUpdated)
							VidyoConnectorObj.VidyoConnectorOnRemoteCameraStateUpdated(VidyoRemoteCameraObj,VidyoParticipantObj,stateObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnRemoteCameraStateUpdatedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, remoteCamera: response.VidyoRemoteCamera ? response.VidyoRemoteCamera.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnRemoteMicrophoneAdded: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoRemoteMicrophoneObj = new this.VidyoRemoteMicrophone(null);
					vcUtilsExtend(VidyoRemoteMicrophoneObj, response.VidyoRemoteMicrophone);
					objects[VidyoRemoteMicrophoneObj.objId] = VidyoRemoteMicrophoneObj;
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnRemoteMicrophoneAdded)
							VidyoConnectorObj.VidyoConnectorOnRemoteMicrophoneAdded(VidyoRemoteMicrophoneObj,VidyoParticipantObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnRemoteMicrophoneAddedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, remoteMicrophone: response.VidyoRemoteMicrophone ? response.VidyoRemoteMicrophone.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnRemoteMicrophoneEnergy: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoRemoteMicrophoneObj = (response.VidyoRemoteMicrophone) ? objects[response.VidyoRemoteMicrophone.objId] : null;
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					var audioEnergyObj = response.audioEnergy;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnRemoteMicrophoneEnergy)
							VidyoConnectorObj.VidyoConnectorOnRemoteMicrophoneEnergy(VidyoRemoteMicrophoneObj,VidyoParticipantObj,audioEnergyObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnRemoteMicrophoneEnergyComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, remoteMicrophone: response.VidyoRemoteMicrophone ? response.VidyoRemoteMicrophone.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnRemoteMicrophoneFrame: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoRemoteMicrophoneObj = (response.VidyoRemoteMicrophone) ? objects[response.VidyoRemoteMicrophone.objId] : null;
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					var VidyoAudioFrameObj = (response.VidyoAudioFrame) ? objects[response.VidyoAudioFrame.objId] : null;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnRemoteMicrophoneFrame)
							VidyoConnectorObj.VidyoConnectorOnRemoteMicrophoneFrame(VidyoRemoteMicrophoneObj,VidyoParticipantObj,VidyoAudioFrameObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnRemoteMicrophoneFrameComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, remoteMicrophone: response.VidyoRemoteMicrophone ? response.VidyoRemoteMicrophone.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0, audioFrame: response.VidyoAudioFrame ? response.VidyoAudioFrame.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnRemoteMicrophoneRemoved: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoRemoteMicrophoneObj = objects[response.VidyoRemoteMicrophone.objId];
					delete objects[response.VidyoRemoteMicrophone.objId];
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnRemoteMicrophoneRemoved)
							VidyoConnectorObj.VidyoConnectorOnRemoteMicrophoneRemoved(VidyoRemoteMicrophoneObj,VidyoParticipantObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnRemoteMicrophoneRemovedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, remoteMicrophone: response.VidyoRemoteMicrophone ? response.VidyoRemoteMicrophone.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnRemoteMicrophoneStateUpdated: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoRemoteMicrophoneObj = (response.VidyoRemoteMicrophone) ? objects[response.VidyoRemoteMicrophone.objId] : null;
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					var stateObj = response.state;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnRemoteMicrophoneStateUpdated)
							VidyoConnectorObj.VidyoConnectorOnRemoteMicrophoneStateUpdated(VidyoRemoteMicrophoneObj,VidyoParticipantObj,stateObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnRemoteMicrophoneStateUpdatedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, remoteMicrophone: response.VidyoRemoteMicrophone ? response.VidyoRemoteMicrophone.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnRemoteRendererAdded: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoRemoteRendererObj = new this.VidyoRemoteRenderer(null);
					vcUtilsExtend(VidyoRemoteRendererObj, response.VidyoRemoteRenderer);
					objects[VidyoRemoteRendererObj.objId] = VidyoRemoteRendererObj;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnRemoteRendererAdded)
							VidyoConnectorObj.VidyoConnectorOnRemoteRendererAdded(VidyoRemoteRendererObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnRemoteRendererAddedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, remoteRenderer: response.VidyoRemoteRenderer ? response.VidyoRemoteRenderer.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnRemoteRendererRemoved: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoRemoteRendererObj = objects[response.VidyoRemoteRenderer.objId];
					delete objects[response.VidyoRemoteRenderer.objId];
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnRemoteRendererRemoved)
							VidyoConnectorObj.VidyoConnectorOnRemoteRendererRemoved(VidyoRemoteRendererObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnRemoteRendererRemovedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, remoteRenderer: response.VidyoRemoteRenderer ? response.VidyoRemoteRenderer.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnRemoteRendererStateUpdated: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoRemoteRendererObj = (response.VidyoRemoteRenderer) ? objects[response.VidyoRemoteRenderer.objId] : null;
					var stateObj = response.state;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnRemoteRendererStateUpdated)
							VidyoConnectorObj.VidyoConnectorOnRemoteRendererStateUpdated(VidyoRemoteRendererObj,stateObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnRemoteRendererStateUpdatedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, remoteRenderer: response.VidyoRemoteRenderer ? response.VidyoRemoteRenderer.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnRemoteSpeakerAdded: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoRemoteSpeakerObj = new this.VidyoRemoteSpeaker(null);
					vcUtilsExtend(VidyoRemoteSpeakerObj, response.VidyoRemoteSpeaker);
					objects[VidyoRemoteSpeakerObj.objId] = VidyoRemoteSpeakerObj;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnRemoteSpeakerAdded)
							VidyoConnectorObj.VidyoConnectorOnRemoteSpeakerAdded(VidyoRemoteSpeakerObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnRemoteSpeakerAddedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, remoteSpeaker: response.VidyoRemoteSpeaker ? response.VidyoRemoteSpeaker.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnRemoteSpeakerRemoved: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoRemoteSpeakerObj = objects[response.VidyoRemoteSpeaker.objId];
					delete objects[response.VidyoRemoteSpeaker.objId];
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnRemoteSpeakerRemoved)
							VidyoConnectorObj.VidyoConnectorOnRemoteSpeakerRemoved(VidyoRemoteSpeakerObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnRemoteSpeakerRemovedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, remoteSpeaker: response.VidyoRemoteSpeaker ? response.VidyoRemoteSpeaker.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnRemoteSpeakerStateUpdated: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoRemoteSpeakerObj = (response.VidyoRemoteSpeaker) ? objects[response.VidyoRemoteSpeaker.objId] : null;
					var stateObj = response.state;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnRemoteSpeakerStateUpdated)
							VidyoConnectorObj.VidyoConnectorOnRemoteSpeakerStateUpdated(VidyoRemoteSpeakerObj,stateObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnRemoteSpeakerStateUpdatedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, remoteSpeaker: response.VidyoRemoteSpeaker ? response.VidyoRemoteSpeaker.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnRemoteWindowShareAdded: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoRemoteWindowShareObj = new this.VidyoRemoteWindowShare(null);
					vcUtilsExtend(VidyoRemoteWindowShareObj, response.VidyoRemoteWindowShare);
					objects[VidyoRemoteWindowShareObj.objId] = VidyoRemoteWindowShareObj;
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnRemoteWindowShareAdded)
							VidyoConnectorObj.VidyoConnectorOnRemoteWindowShareAdded(VidyoRemoteWindowShareObj,VidyoParticipantObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnRemoteWindowShareAddedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, remoteWindowShare: response.VidyoRemoteWindowShare ? response.VidyoRemoteWindowShare.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnRemoteWindowShareFirstFrameReceived: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoRemoteWindowShareObj = (response.VidyoRemoteWindowShare) ? objects[response.VidyoRemoteWindowShare.objId] : null;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnRemoteWindowShareFirstFrameReceived)
							VidyoConnectorObj.VidyoConnectorOnRemoteWindowShareFirstFrameReceived(VidyoRemoteWindowShareObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnRemoteWindowShareFirstFrameReceivedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, remoteWindowShare: response.VidyoRemoteWindowShare ? response.VidyoRemoteWindowShare.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnRemoteWindowShareFrame: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoRemoteWindowShareObj = (response.VidyoRemoteWindowShare) ? objects[response.VidyoRemoteWindowShare.objId] : null;
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					var VidyoVideoFrameObj = (response.VidyoVideoFrame) ? objects[response.VidyoVideoFrame.objId] : null;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnRemoteWindowShareFrame)
							VidyoConnectorObj.VidyoConnectorOnRemoteWindowShareFrame(VidyoRemoteWindowShareObj,VidyoParticipantObj,VidyoVideoFrameObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnRemoteWindowShareFrameComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, remoteWindowShare: response.VidyoRemoteWindowShare ? response.VidyoRemoteWindowShare.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0, videoFrame: response.VidyoVideoFrame ? response.VidyoVideoFrame.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnRemoteWindowShareRemoved: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoRemoteWindowShareObj = objects[response.VidyoRemoteWindowShare.objId];
					delete objects[response.VidyoRemoteWindowShare.objId];
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnRemoteWindowShareRemoved)
							VidyoConnectorObj.VidyoConnectorOnRemoteWindowShareRemoved(VidyoRemoteWindowShareObj,VidyoParticipantObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnRemoteWindowShareRemovedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, remoteWindowShare: response.VidyoRemoteWindowShare ? response.VidyoRemoteWindowShare.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnRemoteWindowShareStateUpdated: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoRemoteWindowShareObj = (response.VidyoRemoteWindowShare) ? objects[response.VidyoRemoteWindowShare.objId] : null;
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					var stateObj = response.state;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnRemoteWindowShareStateUpdated)
							VidyoConnectorObj.VidyoConnectorOnRemoteWindowShareStateUpdated(VidyoRemoteWindowShareObj,VidyoParticipantObj,stateObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnRemoteWindowShareStateUpdatedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, remoteWindowShare: response.VidyoRemoteWindowShare ? response.VidyoRemoteWindowShare.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnRemoveModeratorRoleResult: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var resultObj = response.result;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnRemoveModeratorRoleResult)
							VidyoConnectorObj.VidyoConnectorOnRemoveModeratorRoleResult(resultObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnRemoveModeratorRoleResultComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnRemoveRoomPINResult: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var resultObj = response.result;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnRemoveRoomPINResult)
							VidyoConnectorObj.VidyoConnectorOnRemoveRoomPINResult(resultObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnRemoveRoomPINResultComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnRequestModeratorRoleResult: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var resultObj = response.result;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnRequestModeratorRoleResult)
							VidyoConnectorObj.VidyoConnectorOnRequestModeratorRoleResult(resultObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnRequestModeratorRoleResultComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnSetRoomPINResult: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var resultObj = response.result;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnSetRoomPINResult)
							VidyoConnectorObj.VidyoConnectorOnSetRoomPINResult(resultObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnSetRoomPINResultComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnSuccess: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnSuccess)
							VidyoConnectorObj.VidyoConnectorOnSuccess();
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnSuccessComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnUnlockRoomResult: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var resultObj = response.result;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnUnlockRoomResult)
							VidyoConnectorObj.VidyoConnectorOnUnlockRoomResult(resultObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnUnlockRoomResultComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnUserSearchResults: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var searchTextObj = response.searchText;
					var startIndexObj = response.startIndex;
					var searchResultObj = response.searchResult;
					var contactsObj = response.contacts;
					var numRecordsObj = response.numRecords;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnUserSearchResults)
							VidyoConnectorObj.VidyoConnectorOnUserSearchResults(searchTextObj,startIndexObj,searchResultObj,contactsObj,numRecordsObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnUserSearchResultsComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnVirtualAudioSourceAdded: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoVirtualAudioSourceObj = new this.VidyoVirtualAudioSource(response.VidyoVirtualAudioSource);
					objects[VidyoVirtualAudioSourceObj.objId] = VidyoVirtualAudioSourceObj;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnVirtualAudioSourceAdded)
							VidyoConnectorObj.VidyoConnectorOnVirtualAudioSourceAdded(VidyoVirtualAudioSourceObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnVirtualAudioSourceAddedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, virtualAudioSource: response.VidyoVirtualAudioSource ? response.VidyoVirtualAudioSource.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnVirtualAudioSourceExternalMediaBufferReleased: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoVirtualAudioSourceObj = (response.VidyoVirtualAudioSource) ? objects[response.VidyoVirtualAudioSource.objId] : null;
					var bufferObj = response.buffer;
					var sizeObj = response.size;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnVirtualAudioSourceExternalMediaBufferReleased)
							VidyoConnectorObj.VidyoConnectorOnVirtualAudioSourceExternalMediaBufferReleased(VidyoVirtualAudioSourceObj,bufferObj,sizeObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnVirtualAudioSourceExternalMediaBufferReleasedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, virtualAudioSource: response.VidyoVirtualAudioSource ? response.VidyoVirtualAudioSource.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnVirtualAudioSourceRemoved: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoVirtualAudioSourceObj = objects[response.VidyoVirtualAudioSource.objId];
					delete objects[response.VidyoVirtualAudioSource.objId];
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnVirtualAudioSourceRemoved)
							VidyoConnectorObj.VidyoConnectorOnVirtualAudioSourceRemoved(VidyoVirtualAudioSourceObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnVirtualAudioSourceRemovedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, virtualAudioSource: response.VidyoVirtualAudioSource ? response.VidyoVirtualAudioSource.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnVirtualAudioSourceSelected: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoVirtualAudioSourceObj = (response.VidyoVirtualAudioSource) ? objects[response.VidyoVirtualAudioSource.objId] : null;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnVirtualAudioSourceSelected)
							VidyoConnectorObj.VidyoConnectorOnVirtualAudioSourceSelected(VidyoVirtualAudioSourceObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnVirtualAudioSourceSelectedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, virtualAudioSource: response.VidyoVirtualAudioSource ? response.VidyoVirtualAudioSource.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnVirtualAudioSourceStateUpdated: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoVirtualAudioSourceObj = (response.VidyoVirtualAudioSource) ? objects[response.VidyoVirtualAudioSource.objId] : null;
					var stateObj = response.state;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnVirtualAudioSourceStateUpdated)
							VidyoConnectorObj.VidyoConnectorOnVirtualAudioSourceStateUpdated(VidyoVirtualAudioSourceObj,stateObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnVirtualAudioSourceStateUpdatedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, virtualAudioSource: response.VidyoVirtualAudioSource ? response.VidyoVirtualAudioSource.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnVirtualVideoSourceAdded: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoVirtualVideoSourceObj = new this.VidyoVirtualVideoSource(response.VidyoVirtualVideoSource);
					objects[VidyoVirtualVideoSourceObj.objId] = VidyoVirtualVideoSourceObj;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnVirtualVideoSourceAdded)
							VidyoConnectorObj.VidyoConnectorOnVirtualVideoSourceAdded(VidyoVirtualVideoSourceObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnVirtualVideoSourceAddedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, virtualVideoSource: response.VidyoVirtualVideoSource ? response.VidyoVirtualVideoSource.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnVirtualVideoSourceExternalMediaBufferReleased: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoVirtualVideoSourceObj = (response.VidyoVirtualVideoSource) ? objects[response.VidyoVirtualVideoSource.objId] : null;
					var bufferObj = response.buffer;
					var sizeObj = response.size;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnVirtualVideoSourceExternalMediaBufferReleased)
							VidyoConnectorObj.VidyoConnectorOnVirtualVideoSourceExternalMediaBufferReleased(VidyoVirtualVideoSourceObj,bufferObj,sizeObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnVirtualVideoSourceExternalMediaBufferReleasedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, virtualVideoSource: response.VidyoVirtualVideoSource ? response.VidyoVirtualVideoSource.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnVirtualVideoSourceRemoved: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoVirtualVideoSourceObj = objects[response.VidyoVirtualVideoSource.objId];
					delete objects[response.VidyoVirtualVideoSource.objId];
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnVirtualVideoSourceRemoved)
							VidyoConnectorObj.VidyoConnectorOnVirtualVideoSourceRemoved(VidyoVirtualVideoSourceObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnVirtualVideoSourceRemovedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, virtualVideoSource: response.VidyoVirtualVideoSource ? response.VidyoVirtualVideoSource.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnVirtualVideoSourceStateUpdated: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var VidyoVirtualVideoSourceObj = (response.VidyoVirtualVideoSource) ? objects[response.VidyoVirtualVideoSource.objId] : null;
					var stateObj = response.state;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnVirtualVideoSourceStateUpdated)
							VidyoConnectorObj.VidyoConnectorOnVirtualVideoSourceStateUpdated(VidyoVirtualVideoSourceObj,stateObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnVirtualVideoSourceStateUpdatedComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0, virtualVideoSource: response.VidyoVirtualVideoSource ? response.VidyoVirtualVideoSource.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorOnWebProxyCredentialsRequest: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var webProxyAddressObj = response.webProxyAddress;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorOnWebProxyCredentialsRequest)
							VidyoConnectorObj.VidyoConnectorOnWebProxyCredentialsRequest(webProxyAddressObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorOnWebProxyCredentialsRequestComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoConnectorRecorderInCall: function(response) {
					var VidyoConnectorObj = (response.VidyoConnector) ? objects[response.VidyoConnector.objId] : null;
					var hasRecorderObj = response.hasRecorder;
					var isPausedObj = response.isPaused;
					try {
						if (VidyoConnectorObj && VidyoConnectorObj.VidyoConnectorRecorderInCall)
							VidyoConnectorObj.VidyoConnectorRecorderInCall(hasRecorderObj,isPausedObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoConnectorRecorderInCallComplete?" + vcUtilsParam({ c: response.VidyoConnector ? response.VidyoConnector.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoGatewayOnDisconnected: function(response) {
					var VidyoGatewayObj = (response.VidyoGateway) ? objects[response.VidyoGateway.objId] : null;
					var reasonObj = response.reason;
					try {
						if (VidyoGatewayObj && VidyoGatewayObj.VidyoGatewayOnDisconnected)
							VidyoGatewayObj.VidyoGatewayOnDisconnected(reasonObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoGatewayOnDisconnectedComplete?" + vcUtilsParam({ gateway: response.VidyoGateway ? response.VidyoGateway.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoGatewayOnFailure: function(response) {
					var VidyoGatewayObj = (response.VidyoGateway) ? objects[response.VidyoGateway.objId] : null;
					var reasonObj = response.reason;
					try {
						if (VidyoGatewayObj && VidyoGatewayObj.VidyoGatewayOnFailure)
							VidyoGatewayObj.VidyoGatewayOnFailure(reasonObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoGatewayOnFailureComplete?" + vcUtilsParam({ gateway: response.VidyoGateway ? response.VidyoGateway.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoGatewayOnSuccess: function(response) {
					var VidyoGatewayObj = (response.VidyoGateway) ? objects[response.VidyoGateway.objId] : null;
					try {
						if (VidyoGatewayObj && VidyoGatewayObj.VidyoGatewayOnSuccess)
							VidyoGatewayObj.VidyoGatewayOnSuccess();
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoGatewayOnSuccessComplete?" + vcUtilsParam({ gateway: response.VidyoGateway ? response.VidyoGateway.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoLocalCameraOnGetVideoCapabilitiesComplete: function(response) {
					var VidyoLocalCameraObj = (response.VidyoLocalCamera) ? objects[response.VidyoLocalCamera.objId] : null;
					var capabilitiesObj = response.capabilities;
					try {
						if (VidyoLocalCameraObj && VidyoLocalCameraObj.VidyoLocalCameraOnGetVideoCapabilitiesComplete)
							VidyoLocalCameraObj.VidyoLocalCameraOnGetVideoCapabilitiesComplete(capabilitiesObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoLocalCameraOnGetVideoCapabilitiesCompleteComplete?" + vcUtilsParam({ c: response.VidyoLocalCamera ? response.VidyoLocalCamera.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoLocalMonitorOnGetCapabilities: function(response) {
					var VidyoLocalMonitorObj = (response.VidyoLocalMonitor) ? objects[response.VidyoLocalMonitor.objId] : null;
					var widthObj = response.width;
					var heightObj = response.height;
					var frameIntervalObj = response.frameInterval;
					try {
						if (VidyoLocalMonitorObj && VidyoLocalMonitorObj.VidyoLocalMonitorOnGetCapabilities)
							VidyoLocalMonitorObj.VidyoLocalMonitorOnGetCapabilities(widthObj,heightObj,frameIntervalObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoLocalMonitorOnGetCapabilitiesComplete?" + vcUtilsParam({ m: response.VidyoLocalMonitor ? response.VidyoLocalMonitor.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoLocalMonitorOnPreviewDataUriComplete: function(response) {
					var VidyoLocalMonitorObj = (response.VidyoLocalMonitor) ? objects[response.VidyoLocalMonitor.objId] : null;
					var videoFrameObj = response.videoFrame;
					var stateObj = response.state;
					try {
						if (VidyoLocalMonitorObj && VidyoLocalMonitorObj.VidyoLocalMonitorOnPreviewDataUriComplete)
							VidyoLocalMonitorObj.VidyoLocalMonitorOnPreviewDataUriComplete(videoFrameObj,stateObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoLocalMonitorOnPreviewDataUriCompleteComplete?" + vcUtilsParam({ m: response.VidyoLocalMonitor ? response.VidyoLocalMonitor.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoLocalRendererOnPipLocationChanged: function(response) {
					var VidyoLocalRendererObj = (response.VidyoLocalRenderer) ? objects[response.VidyoLocalRenderer.objId] : null;
					var xObj = response.x;
					var yObj = response.y;
					var widthObj = response.width;
					var heightObj = response.height;
					var isExpandedObj = response.isExpanded;
					try {
						if (VidyoLocalRendererObj && VidyoLocalRendererObj.VidyoLocalRendererOnPipLocationChanged)
							VidyoLocalRendererObj.VidyoLocalRendererOnPipLocationChanged(xObj,yObj,widthObj,heightObj,isExpandedObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoLocalRendererOnPipLocationChangedComplete?" + vcUtilsParam({ renderer: response.VidyoLocalRenderer ? response.VidyoLocalRenderer.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoLocalWindowShareOnApplicationIconDataUriComplete: function(response) {
					var VidyoLocalWindowShareObj = (response.VidyoLocalWindowShare) ? objects[response.VidyoLocalWindowShare.objId] : null;
					var iconObj = response.icon;
					try {
						if (VidyoLocalWindowShareObj && VidyoLocalWindowShareObj.VidyoLocalWindowShareOnApplicationIconDataUriComplete)
							VidyoLocalWindowShareObj.VidyoLocalWindowShareOnApplicationIconDataUriComplete(iconObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoLocalWindowShareOnApplicationIconDataUriCompleteComplete?" + vcUtilsParam({ w: response.VidyoLocalWindowShare ? response.VidyoLocalWindowShare.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoLocalWindowShareOnGetCapabilities: function(response) {
					var VidyoLocalWindowShareObj = (response.VidyoLocalWindowShare) ? objects[response.VidyoLocalWindowShare.objId] : null;
					var widthObj = response.width;
					var heightObj = response.height;
					var frameIntervalObj = response.frameInterval;
					try {
						if (VidyoLocalWindowShareObj && VidyoLocalWindowShareObj.VidyoLocalWindowShareOnGetCapabilities)
							VidyoLocalWindowShareObj.VidyoLocalWindowShareOnGetCapabilities(widthObj,heightObj,frameIntervalObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoLocalWindowShareOnGetCapabilitiesComplete?" + vcUtilsParam({ w: response.VidyoLocalWindowShare ? response.VidyoLocalWindowShare.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoLocalWindowShareOnPreviewDataUriComplete: function(response) {
					var VidyoLocalWindowShareObj = (response.VidyoLocalWindowShare) ? objects[response.VidyoLocalWindowShare.objId] : null;
					var videoFrameObj = response.videoFrame;
					var stateObj = response.state;
					try {
						if (VidyoLocalWindowShareObj && VidyoLocalWindowShareObj.VidyoLocalWindowShareOnPreviewDataUriComplete)
							VidyoLocalWindowShareObj.VidyoLocalWindowShareOnPreviewDataUriComplete(videoFrameObj,stateObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoLocalWindowShareOnPreviewDataUriCompleteComplete?" + vcUtilsParam({ w: response.VidyoLocalWindowShare ? response.VidyoLocalWindowShare.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRemoteCameraOnFrameSizeUpdate: function(response) {
					var VidyoRemoteCameraObj = (response.VidyoRemoteCamera) ? objects[response.VidyoRemoteCamera.objId] : null;
					var widthObj = response.width;
					var heightObj = response.height;
					try {
						if (VidyoRemoteCameraObj && VidyoRemoteCameraObj.VidyoRemoteCameraOnFrameSizeUpdate)
							VidyoRemoteCameraObj.VidyoRemoteCameraOnFrameSizeUpdate(widthObj,heightObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRemoteCameraOnFrameSizeUpdateComplete?" + vcUtilsParam({ c: response.VidyoRemoteCamera ? response.VidyoRemoteCamera.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRemoteCameraOnPresetUpdated: function(response) {
					var VidyoRemoteCameraObj = (response.VidyoRemoteCamera) ? objects[response.VidyoRemoteCamera.objId] : null;
					var presetsObj = response.presets;
					try {
						if (VidyoRemoteCameraObj && VidyoRemoteCameraObj.VidyoRemoteCameraOnPresetUpdated)
							VidyoRemoteCameraObj.VidyoRemoteCameraOnPresetUpdated(presetsObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRemoteCameraOnPresetUpdatedComplete?" + vcUtilsParam({ c: response.VidyoRemoteCamera ? response.VidyoRemoteCamera.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRemoteCameraOnRemoteCameraFrame: function(response) {
					var VidyoRemoteCameraObj = (response.VidyoRemoteCamera) ? objects[response.VidyoRemoteCamera.objId] : null;
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					var VidyoVideoFrameObj = (response.VidyoVideoFrame) ? objects[response.VidyoVideoFrame.objId] : null;
					try {
						if (VidyoRemoteCameraObj && VidyoRemoteCameraObj.VidyoRemoteCameraOnRemoteCameraFrame)
							VidyoRemoteCameraObj.VidyoRemoteCameraOnRemoteCameraFrame(VidyoParticipantObj,VidyoVideoFrameObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRemoteCameraOnRemoteCameraFrameComplete?" + vcUtilsParam({ c: response.VidyoRemoteCamera ? response.VidyoRemoteCamera.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0, videoFrame: response.VidyoVideoFrame ? response.VidyoVideoFrame.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRemoteWindowShareOnRemoteWindowShareFrame: function(response) {
					var VidyoRemoteWindowShareObj = (response.VidyoRemoteWindowShare) ? objects[response.VidyoRemoteWindowShare.objId] : null;
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					var VidyoVideoFrameObj = (response.VidyoVideoFrame) ? objects[response.VidyoVideoFrame.objId] : null;
					try {
						if (VidyoRemoteWindowShareObj && VidyoRemoteWindowShareObj.VidyoRemoteWindowShareOnRemoteWindowShareFrame)
							VidyoRemoteWindowShareObj.VidyoRemoteWindowShareOnRemoteWindowShareFrame(VidyoParticipantObj,VidyoVideoFrameObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRemoteWindowShareOnRemoteWindowShareFrameComplete?" + vcUtilsParam({ w: response.VidyoRemoteWindowShare ? response.VidyoRemoteWindowShare.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0, videoFrame: response.VidyoVideoFrame ? response.VidyoVideoFrame.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoVirtualAudioSourceExternalMediaBufferReleaseCallback: function(response) {
					var VidyoVirtualAudioSourceObj = (response.VidyoVirtualAudioSource) ? objects[response.VidyoVirtualAudioSource.objId] : null;
					var bufferObj = response.buffer;
					var sizeObj = response.size;
					try {
						if (VidyoVirtualAudioSourceObj && VidyoVirtualAudioSourceObj.VidyoVirtualAudioSourceExternalMediaBufferReleaseCallback)
							VidyoVirtualAudioSourceObj.VidyoVirtualAudioSourceExternalMediaBufferReleaseCallback(bufferObj,sizeObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoVirtualAudioSourceExternalMediaBufferReleaseCallbackComplete?" + vcUtilsParam({ virtualAudioSource: response.VidyoVirtualAudioSource ? response.VidyoVirtualAudioSource.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoVirtualAudioSourceReconfigureCallback: function(response) {
					var VidyoVirtualAudioSourceObj = (response.VidyoVirtualAudioSource) ? objects[response.VidyoVirtualAudioSource.objId] : null;
					var stateObj = response.state;
					try {
						if (VidyoVirtualAudioSourceObj && VidyoVirtualAudioSourceObj.VidyoVirtualAudioSourceReconfigureCallback)
							VidyoVirtualAudioSourceObj.VidyoVirtualAudioSourceReconfigureCallback(stateObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoVirtualAudioSourceReconfigureCallbackComplete?" + vcUtilsParam({ virtualAudioSource: response.VidyoVirtualAudioSource ? response.VidyoVirtualAudioSource.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoVirtualAudioSourceStartCallback: function(response) {
					var VidyoVirtualAudioSourceObj = (response.VidyoVirtualAudioSource) ? objects[response.VidyoVirtualAudioSource.objId] : null;
					try {
						if (VidyoVirtualAudioSourceObj && VidyoVirtualAudioSourceObj.VidyoVirtualAudioSourceStartCallback)
							VidyoVirtualAudioSourceObj.VidyoVirtualAudioSourceStartCallback();
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoVirtualAudioSourceStartCallbackComplete?" + vcUtilsParam({ virtualAudioSource: response.VidyoVirtualAudioSource ? response.VidyoVirtualAudioSource.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoVirtualAudioSourceStopCallback: function(response) {
					var VidyoVirtualAudioSourceObj = (response.VidyoVirtualAudioSource) ? objects[response.VidyoVirtualAudioSource.objId] : null;
					try {
						if (VidyoVirtualAudioSourceObj && VidyoVirtualAudioSourceObj.VidyoVirtualAudioSourceStopCallback)
							VidyoVirtualAudioSourceObj.VidyoVirtualAudioSourceStopCallback();
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoVirtualAudioSourceStopCallbackComplete?" + vcUtilsParam({ virtualAudioSource: response.VidyoVirtualAudioSource ? response.VidyoVirtualAudioSource.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoVirtualVideoSourceExternalMediaBufferReleaseCallback: function(response) {
					var VidyoVirtualVideoSourceObj = (response.VidyoVirtualVideoSource) ? objects[response.VidyoVirtualVideoSource.objId] : null;
					var bufferObj = response.buffer;
					var sizeObj = response.size;
					var userDataObj = response.userData;
					try {
						if (VidyoVirtualVideoSourceObj && VidyoVirtualVideoSourceObj.VidyoVirtualVideoSourceExternalMediaBufferReleaseCallback)
							VidyoVirtualVideoSourceObj.VidyoVirtualVideoSourceExternalMediaBufferReleaseCallback(bufferObj,sizeObj,userDataObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoVirtualVideoSourceExternalMediaBufferReleaseCallbackComplete?" + vcUtilsParam({ s: response.VidyoVirtualVideoSource ? response.VidyoVirtualVideoSource.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoVirtualVideoSourceReconfigureCallback: function(response) {
					var VidyoVirtualVideoSourceObj = (response.VidyoVirtualVideoSource) ? objects[response.VidyoVirtualVideoSource.objId] : null;
					var frameIntervalObj = response.frameInterval;
					var mediaFormatObj = response.mediaFormat;
					var userDataObj = response.userData;
					try {
						if (VidyoVirtualVideoSourceObj && VidyoVirtualVideoSourceObj.VidyoVirtualVideoSourceReconfigureCallback)
							VidyoVirtualVideoSourceObj.VidyoVirtualVideoSourceReconfigureCallback(frameIntervalObj,mediaFormatObj,userDataObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoVirtualVideoSourceReconfigureCallbackComplete?" + vcUtilsParam({ s: response.VidyoVirtualVideoSource ? response.VidyoVirtualVideoSource.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoVirtualVideoSourceStartCallback: function(response) {
					var VidyoVirtualVideoSourceObj = (response.VidyoVirtualVideoSource) ? objects[response.VidyoVirtualVideoSource.objId] : null;
					var frameIntervalObj = response.frameInterval;
					var mediaFormatObj = response.mediaFormat;
					var userDataObj = response.userData;
					try {
						if (VidyoVirtualVideoSourceObj && VidyoVirtualVideoSourceObj.VidyoVirtualVideoSourceStartCallback)
							VidyoVirtualVideoSourceObj.VidyoVirtualVideoSourceStartCallback(frameIntervalObj,mediaFormatObj,userDataObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoVirtualVideoSourceStartCallbackComplete?" + vcUtilsParam({ s: response.VidyoVirtualVideoSource ? response.VidyoVirtualVideoSource.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoVirtualVideoSourceStopCallback: function(response) {
					var VidyoVirtualVideoSourceObj = (response.VidyoVirtualVideoSource) ? objects[response.VidyoVirtualVideoSource.objId] : null;
					var userDataObj = response.userData;
					try {
						if (VidyoVirtualVideoSourceObj && VidyoVirtualVideoSourceObj.VidyoVirtualVideoSourceStopCallback)
							VidyoVirtualVideoSourceObj.VidyoVirtualVideoSourceStopCallback(userDataObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoVirtualVideoSourceStopCallbackComplete?" + vcUtilsParam({ s: response.VidyoVirtualVideoSource ? response.VidyoVirtualVideoSource.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoApplicationDownloadCompletedCallback: function(response) {
					var VidyoApplicationObj = (response.VidyoApplication) ? objects[response.VidyoApplication.objId] : null;
					var versionObj = response.version;
					var downloadedFileObj = response.downloadedFile;
					try {
						if (VidyoApplicationObj && VidyoApplicationObj.VidyoApplicationDownloadCompletedCallback)
							VidyoApplicationObj.VidyoApplicationDownloadCompletedCallback(versionObj,downloadedFileObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoApplicationDownloadCompletedCallbackComplete?" + vcUtilsParam({ app: response.VidyoApplication ? response.VidyoApplication.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoApplicationDownloadFailedCallback: function(response) {
					var VidyoApplicationObj = (response.VidyoApplication) ? objects[response.VidyoApplication.objId] : null;
					var reasonObj = response.reason;
					try {
						if (VidyoApplicationObj && VidyoApplicationObj.VidyoApplicationDownloadFailedCallback)
							VidyoApplicationObj.VidyoApplicationDownloadFailedCallback(reasonObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoApplicationDownloadFailedCallbackComplete?" + vcUtilsParam({ app: response.VidyoApplication ? response.VidyoApplication.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoCallOnEnded: function(response) {
					var VidyoCallObj = (response.VidyoCall) ? objects[response.VidyoCall.objId] : null;
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					var reasonObj = response.reason;
					try {
						if (VidyoCallObj && VidyoCallObj.VidyoCallOnEnded)
							VidyoCallObj.VidyoCallOnEnded(VidyoParticipantObj,reasonObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoCallOnEndedComplete?" + vcUtilsParam({ c: response.VidyoCall ? response.VidyoCall.objId : 0, p: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoCallOnInitiated: function(response) {
					var VidyoCallObj = (response.VidyoCall) ? objects[response.VidyoCall.objId] : null;
					var resultObj = response.result;
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					try {
						if (VidyoCallObj && VidyoCallObj.VidyoCallOnInitiated)
							VidyoCallObj.VidyoCallOnInitiated(resultObj,VidyoParticipantObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoCallOnInitiatedComplete?" + vcUtilsParam({ c: response.VidyoCall ? response.VidyoCall.objId : 0, p: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoCallOnMessageAcknowledged: function(response) {
					var VidyoCallObj = (response.VidyoCall) ? objects[response.VidyoCall.objId] : null;
					var VidyoChatMessageObj = (response.VidyoChatMessage) ? response.VidyoChatMessage : null;
					try {
						if (VidyoCallObj && VidyoCallObj.VidyoCallOnMessageAcknowledged)
							VidyoCallObj.VidyoCallOnMessageAcknowledged(VidyoChatMessageObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoCallOnMessageAcknowledgedComplete?" + vcUtilsParam({ c: response.VidyoCall ? response.VidyoCall.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoCallOnMessageRead: function(response) {
					var VidyoCallObj = (response.VidyoCall) ? objects[response.VidyoCall.objId] : null;
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					var messageIdObj = response.messageId;
					try {
						if (VidyoCallObj && VidyoCallObj.VidyoCallOnMessageRead)
							VidyoCallObj.VidyoCallOnMessageRead(VidyoParticipantObj,messageIdObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoCallOnMessageReadComplete?" + vcUtilsParam({ c: response.VidyoCall ? response.VidyoCall.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoCallOnMessageReceived: function(response) {
					var VidyoCallObj = (response.VidyoCall) ? objects[response.VidyoCall.objId] : null;
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					var VidyoChatMessageObj = (response.VidyoChatMessage) ? response.VidyoChatMessage : null;
					try {
						if (VidyoCallObj && VidyoCallObj.VidyoCallOnMessageReceived)
							VidyoCallObj.VidyoCallOnMessageReceived(VidyoParticipantObj,VidyoChatMessageObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoCallOnMessageReceivedComplete?" + vcUtilsParam({ c: response.VidyoCall ? response.VidyoCall.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoCallOnMessageTypingIndication: function(response) {
					var VidyoCallObj = (response.VidyoCall) ? objects[response.VidyoCall.objId] : null;
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					var typingIndicationObj = response.typingIndication;
					try {
						if (VidyoCallObj && VidyoCallObj.VidyoCallOnMessageTypingIndication)
							VidyoCallObj.VidyoCallOnMessageTypingIndication(VidyoParticipantObj,typingIndicationObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoCallOnMessageTypingIndicationComplete?" + vcUtilsParam({ c: response.VidyoCall ? response.VidyoCall.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoCallOnSetSubject: function(response) {
					var VidyoCallObj = (response.VidyoCall) ? objects[response.VidyoCall.objId] : null;
					var subjectObj = response.subject;
					try {
						if (VidyoCallObj && VidyoCallObj.VidyoCallOnSetSubject)
							VidyoCallObj.VidyoCallOnSetSubject(subjectObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoCallOnSetSubjectComplete?" + vcUtilsParam({ c: response.VidyoCall ? response.VidyoCall.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnCameraEffectError: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var errorObj = response.error;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnCameraEffectError)
							VidyoEndpointObj.VidyoEndpointOnCameraEffectError(errorObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnCameraEffectErrorComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnConferenceLost: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var reasonObj = response.reason;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnConferenceLost)
							VidyoEndpointObj.VidyoEndpointOnConferenceLost(reasonObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnConferenceLostComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnDisableVideoOnLowBwEnded: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnDisableVideoOnLowBwEnded)
							VidyoEndpointObj.VidyoEndpointOnDisableVideoOnLowBwEnded();
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnDisableVideoOnLowBwEndedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnDisableVideoOnLowBwStarted: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnDisableVideoOnLowBwStarted)
							VidyoEndpointObj.VidyoEndpointOnDisableVideoOnLowBwStarted();
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnDisableVideoOnLowBwStartedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnError: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var errorObj = response.error;
					var apiNameObj = response.apiName;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnError)
							VidyoEndpointObj.VidyoEndpointOnError(errorObj,apiNameObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnErrorComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnGetActiveNetworkInterface: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoNetworkInterfaceObj = (response.VidyoNetworkInterface) ? objects[response.VidyoNetworkInterface.objId] : null;
					var VidyoNetworkInterfaceObj = (response.VidyoNetworkInterface) ? objects[response.VidyoNetworkInterface.objId] : null;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnGetActiveNetworkInterface)
							VidyoEndpointObj.VidyoEndpointOnGetActiveNetworkInterface(VidyoNetworkInterfaceObj,VidyoNetworkInterfaceObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnGetActiveNetworkInterfaceComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, signalingInterface: response.VidyoNetworkInterface ? response.VidyoNetworkInterface.objId : 0, mediaInterface: response.VidyoNetworkInterface ? response.VidyoNetworkInterface.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnGetAnalyticsEventTable: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var eventTablesObj = response.eventTables;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnGetAnalyticsEventTable)
							VidyoEndpointObj.VidyoEndpointOnGetAnalyticsEventTable(eventTablesObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnGetAnalyticsEventTableComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnGetAutoReconnectSetting: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var enableAutoReconnectObj = response.enableAutoReconnect;
					var reconnectBackoffObj = response.reconnectBackoff;
					var maxReconnectAttemptsObj = response.maxReconnectAttempts;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnGetAutoReconnectSetting)
							VidyoEndpointObj.VidyoEndpointOnGetAutoReconnectSetting(enableAutoReconnectObj,reconnectBackoffObj,maxReconnectAttemptsObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnGetAutoReconnectSettingComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnGetCameraBackgroundEffectInfo: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoEndpointCameraEffectInfoObj = (response.VidyoEndpointCameraEffectInfo) ? response.VidyoEndpointCameraEffectInfo : null;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnGetCameraBackgroundEffectInfo)
							VidyoEndpointObj.VidyoEndpointOnGetCameraBackgroundEffectInfo(VidyoEndpointCameraEffectInfoObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnGetCameraBackgroundEffectInfoComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnGetLoggerCategoryListComplete: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var loggerTypeObj = response.loggerType;
					var categoriesObj = response.categories;
					var resultObj = response.result;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnGetLoggerCategoryListComplete)
							VidyoEndpointObj.VidyoEndpointOnGetLoggerCategoryListComplete(loggerTypeObj,categoriesObj,resultObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnGetLoggerCategoryListCompleteComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnGetProductInfoComplete: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var productInfoObj = response.productInfo;
					var supportedFeatureObj = response.supportedFeature;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnGetProductInfoComplete)
							VidyoEndpointObj.VidyoEndpointOnGetProductInfoComplete(productInfoObj,supportedFeatureObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnGetProductInfoCompleteComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnGetWhitelistedAudioDevices: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var audioDevicesObj = response.audioDevices;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnGetWhitelistedAudioDevices)
							VidyoEndpointObj.VidyoEndpointOnGetWhitelistedAudioDevices(audioDevicesObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnGetWhitelistedAudioDevicesComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnLocalCameraAdded: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoLocalCameraObj = new this.VidyoLocalCamera(null);
					vcUtilsExtend(VidyoLocalCameraObj, response.VidyoLocalCamera);
					objects[VidyoLocalCameraObj.objId] = VidyoLocalCameraObj;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalCameraAdded)
							VidyoEndpointObj.VidyoEndpointOnLocalCameraAdded(VidyoLocalCameraObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnLocalCameraAddedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localCamera: response.VidyoLocalCamera ? response.VidyoLocalCamera.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnLocalCameraFrame: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoLocalCameraObj = (response.VidyoLocalCamera) ? objects[response.VidyoLocalCamera.objId] : null;
					var VidyoVideoFrameObj = (response.VidyoVideoFrame) ? objects[response.VidyoVideoFrame.objId] : null;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalCameraFrame)
							VidyoEndpointObj.VidyoEndpointOnLocalCameraFrame(VidyoLocalCameraObj,VidyoVideoFrameObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnLocalCameraFrameComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localCamera: response.VidyoLocalCamera ? response.VidyoLocalCamera.objId : 0, videoFrame: response.VidyoVideoFrame ? response.VidyoVideoFrame.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnLocalCameraRemoved: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoLocalCameraObj = objects[response.VidyoLocalCamera.objId];
					delete objects[response.VidyoLocalCamera.objId];
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalCameraRemoved)
							VidyoEndpointObj.VidyoEndpointOnLocalCameraRemoved(VidyoLocalCameraObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnLocalCameraRemovedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localCamera: response.VidyoLocalCamera ? response.VidyoLocalCamera.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnLocalCameraSelected: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoLocalCameraObj = (response.VidyoLocalCamera) ? objects[response.VidyoLocalCamera.objId] : null;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalCameraSelected)
							VidyoEndpointObj.VidyoEndpointOnLocalCameraSelected(VidyoLocalCameraObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnLocalCameraSelectedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localCamera: response.VidyoLocalCamera ? response.VidyoLocalCamera.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnLocalCameraStateUpdated: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoLocalCameraObj = (response.VidyoLocalCamera) ? objects[response.VidyoLocalCamera.objId] : null;
					var stateObj = response.state;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalCameraStateUpdated)
							VidyoEndpointObj.VidyoEndpointOnLocalCameraStateUpdated(VidyoLocalCameraObj,stateObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnLocalCameraStateUpdatedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localCamera: response.VidyoLocalCamera ? response.VidyoLocalCamera.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnLocalMicrophoneAdded: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoLocalMicrophoneObj = new this.VidyoLocalMicrophone(null);
					vcUtilsExtend(VidyoLocalMicrophoneObj, response.VidyoLocalMicrophone);
					objects[VidyoLocalMicrophoneObj.objId] = VidyoLocalMicrophoneObj;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalMicrophoneAdded)
							VidyoEndpointObj.VidyoEndpointOnLocalMicrophoneAdded(VidyoLocalMicrophoneObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnLocalMicrophoneAddedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localMicrophone: response.VidyoLocalMicrophone ? response.VidyoLocalMicrophone.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnLocalMicrophoneEnergy: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoLocalMicrophoneObj = (response.VidyoLocalMicrophone) ? objects[response.VidyoLocalMicrophone.objId] : null;
					var audioEnergyObj = response.audioEnergy;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalMicrophoneEnergy)
							VidyoEndpointObj.VidyoEndpointOnLocalMicrophoneEnergy(VidyoLocalMicrophoneObj,audioEnergyObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnLocalMicrophoneEnergyComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localMicrophone: response.VidyoLocalMicrophone ? response.VidyoLocalMicrophone.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnLocalMicrophoneFrame: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoLocalMicrophoneObj = (response.VidyoLocalMicrophone) ? objects[response.VidyoLocalMicrophone.objId] : null;
					var VidyoAudioFrameObj = (response.VidyoAudioFrame) ? objects[response.VidyoAudioFrame.objId] : null;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalMicrophoneFrame)
							VidyoEndpointObj.VidyoEndpointOnLocalMicrophoneFrame(VidyoLocalMicrophoneObj,VidyoAudioFrameObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnLocalMicrophoneFrameComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localMicrophone: response.VidyoLocalMicrophone ? response.VidyoLocalMicrophone.objId : 0, audioFrame: response.VidyoAudioFrame ? response.VidyoAudioFrame.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnLocalMicrophoneRemoved: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoLocalMicrophoneObj = objects[response.VidyoLocalMicrophone.objId];
					delete objects[response.VidyoLocalMicrophone.objId];
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalMicrophoneRemoved)
							VidyoEndpointObj.VidyoEndpointOnLocalMicrophoneRemoved(VidyoLocalMicrophoneObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnLocalMicrophoneRemovedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localMicrophone: response.VidyoLocalMicrophone ? response.VidyoLocalMicrophone.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnLocalMicrophoneSelected: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoLocalMicrophoneObj = (response.VidyoLocalMicrophone) ? objects[response.VidyoLocalMicrophone.objId] : null;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalMicrophoneSelected)
							VidyoEndpointObj.VidyoEndpointOnLocalMicrophoneSelected(VidyoLocalMicrophoneObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnLocalMicrophoneSelectedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localMicrophone: response.VidyoLocalMicrophone ? response.VidyoLocalMicrophone.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnLocalMicrophoneStateUpdated: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoLocalMicrophoneObj = (response.VidyoLocalMicrophone) ? objects[response.VidyoLocalMicrophone.objId] : null;
					var stateObj = response.state;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalMicrophoneStateUpdated)
							VidyoEndpointObj.VidyoEndpointOnLocalMicrophoneStateUpdated(VidyoLocalMicrophoneObj,stateObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnLocalMicrophoneStateUpdatedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localMicrophone: response.VidyoLocalMicrophone ? response.VidyoLocalMicrophone.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnLocalMonitorAdded: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoLocalMonitorObj = new this.VidyoLocalMonitor(null);
					vcUtilsExtend(VidyoLocalMonitorObj, response.VidyoLocalMonitor);
					objects[VidyoLocalMonitorObj.objId] = VidyoLocalMonitorObj;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalMonitorAdded)
							VidyoEndpointObj.VidyoEndpointOnLocalMonitorAdded(VidyoLocalMonitorObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnLocalMonitorAddedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localMonitor: response.VidyoLocalMonitor ? response.VidyoLocalMonitor.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnLocalMonitorFrame: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoLocalMonitorObj = (response.VidyoLocalMonitor) ? objects[response.VidyoLocalMonitor.objId] : null;
					var VidyoVideoFrameObj = (response.VidyoVideoFrame) ? objects[response.VidyoVideoFrame.objId] : null;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalMonitorFrame)
							VidyoEndpointObj.VidyoEndpointOnLocalMonitorFrame(VidyoLocalMonitorObj,VidyoVideoFrameObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnLocalMonitorFrameComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localMonitor: response.VidyoLocalMonitor ? response.VidyoLocalMonitor.objId : 0, videoFrame: response.VidyoVideoFrame ? response.VidyoVideoFrame.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnLocalMonitorRemoved: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoLocalMonitorObj = objects[response.VidyoLocalMonitor.objId];
					delete objects[response.VidyoLocalMonitor.objId];
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalMonitorRemoved)
							VidyoEndpointObj.VidyoEndpointOnLocalMonitorRemoved(VidyoLocalMonitorObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnLocalMonitorRemovedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localMonitor: response.VidyoLocalMonitor ? response.VidyoLocalMonitor.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnLocalMonitorSelected: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoLocalMonitorObj = (response.VidyoLocalMonitor) ? objects[response.VidyoLocalMonitor.objId] : null;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalMonitorSelected)
							VidyoEndpointObj.VidyoEndpointOnLocalMonitorSelected(VidyoLocalMonitorObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnLocalMonitorSelectedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localMonitor: response.VidyoLocalMonitor ? response.VidyoLocalMonitor.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnLocalMonitorStateUpdated: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoLocalMonitorObj = (response.VidyoLocalMonitor) ? objects[response.VidyoLocalMonitor.objId] : null;
					var stateObj = response.state;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalMonitorStateUpdated)
							VidyoEndpointObj.VidyoEndpointOnLocalMonitorStateUpdated(VidyoLocalMonitorObj,stateObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnLocalMonitorStateUpdatedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localMonitor: response.VidyoLocalMonitor ? response.VidyoLocalMonitor.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnLocalRendererAdded: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoLocalRendererObj = new this.VidyoLocalRenderer(null);
					vcUtilsExtend(VidyoLocalRendererObj, response.VidyoLocalRenderer);
					objects[VidyoLocalRendererObj.objId] = VidyoLocalRendererObj;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalRendererAdded)
							VidyoEndpointObj.VidyoEndpointOnLocalRendererAdded(VidyoLocalRendererObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnLocalRendererAddedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localRenderer: response.VidyoLocalRenderer ? response.VidyoLocalRenderer.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnLocalRendererRemoved: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoLocalRendererObj = objects[response.VidyoLocalRenderer.objId];
					delete objects[response.VidyoLocalRenderer.objId];
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalRendererRemoved)
							VidyoEndpointObj.VidyoEndpointOnLocalRendererRemoved(VidyoLocalRendererObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnLocalRendererRemovedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localRenderer: response.VidyoLocalRenderer ? response.VidyoLocalRenderer.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnLocalRendererSelected: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoLocalRendererObj = (response.VidyoLocalRenderer) ? objects[response.VidyoLocalRenderer.objId] : null;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalRendererSelected)
							VidyoEndpointObj.VidyoEndpointOnLocalRendererSelected(VidyoLocalRendererObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnLocalRendererSelectedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localRenderer: response.VidyoLocalRenderer ? response.VidyoLocalRenderer.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnLocalRendererStateUpdated: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoLocalRendererObj = (response.VidyoLocalRenderer) ? objects[response.VidyoLocalRenderer.objId] : null;
					var stateObj = response.state;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalRendererStateUpdated)
							VidyoEndpointObj.VidyoEndpointOnLocalRendererStateUpdated(VidyoLocalRendererObj,stateObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnLocalRendererStateUpdatedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localRenderer: response.VidyoLocalRenderer ? response.VidyoLocalRenderer.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnLocalSpeakerAdded: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoLocalSpeakerObj = new this.VidyoLocalSpeaker(null);
					vcUtilsExtend(VidyoLocalSpeakerObj, response.VidyoLocalSpeaker);
					objects[VidyoLocalSpeakerObj.objId] = VidyoLocalSpeakerObj;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalSpeakerAdded)
							VidyoEndpointObj.VidyoEndpointOnLocalSpeakerAdded(VidyoLocalSpeakerObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnLocalSpeakerAddedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localSpeaker: response.VidyoLocalSpeaker ? response.VidyoLocalSpeaker.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnLocalSpeakerRemoved: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoLocalSpeakerObj = objects[response.VidyoLocalSpeaker.objId];
					delete objects[response.VidyoLocalSpeaker.objId];
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalSpeakerRemoved)
							VidyoEndpointObj.VidyoEndpointOnLocalSpeakerRemoved(VidyoLocalSpeakerObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnLocalSpeakerRemovedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localSpeaker: response.VidyoLocalSpeaker ? response.VidyoLocalSpeaker.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnLocalSpeakerSelected: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoLocalSpeakerObj = (response.VidyoLocalSpeaker) ? objects[response.VidyoLocalSpeaker.objId] : null;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalSpeakerSelected)
							VidyoEndpointObj.VidyoEndpointOnLocalSpeakerSelected(VidyoLocalSpeakerObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnLocalSpeakerSelectedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localSpeaker: response.VidyoLocalSpeaker ? response.VidyoLocalSpeaker.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnLocalSpeakerStateUpdated: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoLocalSpeakerObj = (response.VidyoLocalSpeaker) ? objects[response.VidyoLocalSpeaker.objId] : null;
					var stateObj = response.state;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalSpeakerStateUpdated)
							VidyoEndpointObj.VidyoEndpointOnLocalSpeakerStateUpdated(VidyoLocalSpeakerObj,stateObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnLocalSpeakerStateUpdatedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localSpeaker: response.VidyoLocalSpeaker ? response.VidyoLocalSpeaker.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnLocalWindowShareAdded: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoLocalWindowShareObj = new this.VidyoLocalWindowShare(null);
					vcUtilsExtend(VidyoLocalWindowShareObj, response.VidyoLocalWindowShare);
					objects[VidyoLocalWindowShareObj.objId] = VidyoLocalWindowShareObj;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalWindowShareAdded)
							VidyoEndpointObj.VidyoEndpointOnLocalWindowShareAdded(VidyoLocalWindowShareObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnLocalWindowShareAddedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localWindowShare: response.VidyoLocalWindowShare ? response.VidyoLocalWindowShare.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnLocalWindowShareFrame: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoLocalWindowShareObj = (response.VidyoLocalWindowShare) ? objects[response.VidyoLocalWindowShare.objId] : null;
					var VidyoVideoFrameObj = (response.VidyoVideoFrame) ? objects[response.VidyoVideoFrame.objId] : null;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalWindowShareFrame)
							VidyoEndpointObj.VidyoEndpointOnLocalWindowShareFrame(VidyoLocalWindowShareObj,VidyoVideoFrameObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnLocalWindowShareFrameComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localWindowShare: response.VidyoLocalWindowShare ? response.VidyoLocalWindowShare.objId : 0, videoFrame: response.VidyoVideoFrame ? response.VidyoVideoFrame.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnLocalWindowShareRemoved: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoLocalWindowShareObj = objects[response.VidyoLocalWindowShare.objId];
					delete objects[response.VidyoLocalWindowShare.objId];
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalWindowShareRemoved)
							VidyoEndpointObj.VidyoEndpointOnLocalWindowShareRemoved(VidyoLocalWindowShareObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnLocalWindowShareRemovedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localWindowShare: response.VidyoLocalWindowShare ? response.VidyoLocalWindowShare.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnLocalWindowShareSelected: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoLocalWindowShareObj = (response.VidyoLocalWindowShare) ? objects[response.VidyoLocalWindowShare.objId] : null;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalWindowShareSelected)
							VidyoEndpointObj.VidyoEndpointOnLocalWindowShareSelected(VidyoLocalWindowShareObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnLocalWindowShareSelectedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localWindowShare: response.VidyoLocalWindowShare ? response.VidyoLocalWindowShare.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnLocalWindowShareStateUpdated: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoLocalWindowShareObj = (response.VidyoLocalWindowShare) ? objects[response.VidyoLocalWindowShare.objId] : null;
					var stateObj = response.state;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLocalWindowShareStateUpdated)
							VidyoEndpointObj.VidyoEndpointOnLocalWindowShareStateUpdated(VidyoLocalWindowShareObj,stateObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnLocalWindowShareStateUpdatedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, localWindowShare: response.VidyoLocalWindowShare ? response.VidyoLocalWindowShare.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnLog: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoLogRecordObj = (response.VidyoLogRecord) ? response.VidyoLogRecord : null;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLog)
							VidyoEndpointObj.VidyoEndpointOnLog(VidyoLogRecordObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnLogComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnLogCompressionComplete: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var compressedFileNameObj = response.compressedFileName;
					var resultObj = response.result;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnLogCompressionComplete)
							VidyoEndpointObj.VidyoEndpointOnLogCompressionComplete(compressedFileNameObj,resultObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnLogCompressionCompleteComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnNetworkInterfaceAdded: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoNetworkInterfaceObj = new this.VidyoNetworkInterface(null);
					vcUtilsExtend(VidyoNetworkInterfaceObj, response.VidyoNetworkInterface);
					objects[VidyoNetworkInterfaceObj.objId] = VidyoNetworkInterfaceObj;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnNetworkInterfaceAdded)
							VidyoEndpointObj.VidyoEndpointOnNetworkInterfaceAdded(VidyoNetworkInterfaceObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnNetworkInterfaceAddedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, networkInterface: response.VidyoNetworkInterface ? response.VidyoNetworkInterface.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnNetworkInterfaceRemoved: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoNetworkInterfaceObj = objects[response.VidyoNetworkInterface.objId];
					delete objects[response.VidyoNetworkInterface.objId];
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnNetworkInterfaceRemoved)
							VidyoEndpointObj.VidyoEndpointOnNetworkInterfaceRemoved(VidyoNetworkInterfaceObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnNetworkInterfaceRemovedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, networkInterface: response.VidyoNetworkInterface ? response.VidyoNetworkInterface.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnNetworkInterfaceSelected: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoNetworkInterfaceObj = (response.VidyoNetworkInterface) ? objects[response.VidyoNetworkInterface.objId] : null;
					var transportTypeObj = response.transportType;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnNetworkInterfaceSelected)
							VidyoEndpointObj.VidyoEndpointOnNetworkInterfaceSelected(VidyoNetworkInterfaceObj,transportTypeObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnNetworkInterfaceSelectedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, networkInterface: response.VidyoNetworkInterface ? response.VidyoNetworkInterface.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnNetworkInterfaceStateUpdated: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoNetworkInterfaceObj = (response.VidyoNetworkInterface) ? objects[response.VidyoNetworkInterface.objId] : null;
					var stateObj = response.state;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnNetworkInterfaceStateUpdated)
							VidyoEndpointObj.VidyoEndpointOnNetworkInterfaceStateUpdated(VidyoNetworkInterfaceObj,stateObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnNetworkInterfaceStateUpdatedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, networkInterface: response.VidyoNetworkInterface ? response.VidyoNetworkInterface.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnReconnected: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnReconnected)
							VidyoEndpointObj.VidyoEndpointOnReconnected();
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnReconnectedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnReconnecting: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var attemptObj = response.attempt;
					var attemptTimeoutObj = response.attemptTimeout;
					var reasonObj = response.reason;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnReconnecting)
							VidyoEndpointObj.VidyoEndpointOnReconnecting(attemptObj,attemptTimeoutObj,reasonObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnReconnectingComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnRemoteCameraAdded: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoRemoteCameraObj = new this.VidyoRemoteCamera(null);
					vcUtilsExtend(VidyoRemoteCameraObj, response.VidyoRemoteCamera);
					objects[VidyoRemoteCameraObj.objId] = VidyoRemoteCameraObj;
					var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
					var VidyoCallObj = (response.VidyoCall) ? objects[response.VidyoCall.objId] : null;
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnRemoteCameraAdded)
							VidyoEndpointObj.VidyoEndpointOnRemoteCameraAdded(VidyoRemoteCameraObj,VidyoUserObj,VidyoCallObj,VidyoRoomObj,VidyoParticipantObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnRemoteCameraAddedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, remoteCamera: response.VidyoRemoteCamera ? response.VidyoRemoteCamera.objId : 0, user: response.VidyoUser ? response.VidyoUser.objId : 0, call: response.VidyoCall ? response.VidyoCall.objId : 0, room: response.VidyoRoom ? response.VidyoRoom.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnRemoteCameraFirstFrameReceived: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoRemoteCameraObj = (response.VidyoRemoteCamera) ? objects[response.VidyoRemoteCamera.objId] : null;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnRemoteCameraFirstFrameReceived)
							VidyoEndpointObj.VidyoEndpointOnRemoteCameraFirstFrameReceived(VidyoRemoteCameraObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnRemoteCameraFirstFrameReceivedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, remoteCamera: response.VidyoRemoteCamera ? response.VidyoRemoteCamera.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnRemoteCameraFrame: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoRemoteCameraObj = (response.VidyoRemoteCamera) ? objects[response.VidyoRemoteCamera.objId] : null;
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					var VidyoVideoFrameObj = (response.VidyoVideoFrame) ? objects[response.VidyoVideoFrame.objId] : null;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnRemoteCameraFrame)
							VidyoEndpointObj.VidyoEndpointOnRemoteCameraFrame(VidyoRemoteCameraObj,VidyoParticipantObj,VidyoVideoFrameObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnRemoteCameraFrameComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, remoteCamera: response.VidyoRemoteCamera ? response.VidyoRemoteCamera.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0, videoFrame: response.VidyoVideoFrame ? response.VidyoVideoFrame.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnRemoteCameraRemoved: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoRemoteCameraObj = objects[response.VidyoRemoteCamera.objId];
					delete objects[response.VidyoRemoteCamera.objId];
					var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
					var VidyoCallObj = (response.VidyoCall) ? objects[response.VidyoCall.objId] : null;
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnRemoteCameraRemoved)
							VidyoEndpointObj.VidyoEndpointOnRemoteCameraRemoved(VidyoRemoteCameraObj,VidyoUserObj,VidyoCallObj,VidyoRoomObj,VidyoParticipantObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnRemoteCameraRemovedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, remoteCamera: response.VidyoRemoteCamera ? response.VidyoRemoteCamera.objId : 0, user: response.VidyoUser ? response.VidyoUser.objId : 0, call: response.VidyoCall ? response.VidyoCall.objId : 0, room: response.VidyoRoom ? response.VidyoRoom.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnRemoteCameraStateUpdated: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoRemoteCameraObj = (response.VidyoRemoteCamera) ? objects[response.VidyoRemoteCamera.objId] : null;
					var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
					var VidyoCallObj = (response.VidyoCall) ? objects[response.VidyoCall.objId] : null;
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					var stateObj = response.state;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnRemoteCameraStateUpdated)
							VidyoEndpointObj.VidyoEndpointOnRemoteCameraStateUpdated(VidyoRemoteCameraObj,VidyoUserObj,VidyoCallObj,VidyoRoomObj,VidyoParticipantObj,stateObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnRemoteCameraStateUpdatedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, remoteCamera: response.VidyoRemoteCamera ? response.VidyoRemoteCamera.objId : 0, user: response.VidyoUser ? response.VidyoUser.objId : 0, call: response.VidyoCall ? response.VidyoCall.objId : 0, room: response.VidyoRoom ? response.VidyoRoom.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnRemoteMicrophoneAdded: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoRemoteMicrophoneObj = new this.VidyoRemoteMicrophone(null);
					vcUtilsExtend(VidyoRemoteMicrophoneObj, response.VidyoRemoteMicrophone);
					objects[VidyoRemoteMicrophoneObj.objId] = VidyoRemoteMicrophoneObj;
					var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
					var VidyoCallObj = (response.VidyoCall) ? objects[response.VidyoCall.objId] : null;
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnRemoteMicrophoneAdded)
							VidyoEndpointObj.VidyoEndpointOnRemoteMicrophoneAdded(VidyoRemoteMicrophoneObj,VidyoUserObj,VidyoCallObj,VidyoRoomObj,VidyoParticipantObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnRemoteMicrophoneAddedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, remoteMicrophone: response.VidyoRemoteMicrophone ? response.VidyoRemoteMicrophone.objId : 0, user: response.VidyoUser ? response.VidyoUser.objId : 0, call: response.VidyoCall ? response.VidyoCall.objId : 0, room: response.VidyoRoom ? response.VidyoRoom.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnRemoteMicrophoneEnergy: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoRemoteMicrophoneObj = (response.VidyoRemoteMicrophone) ? objects[response.VidyoRemoteMicrophone.objId] : null;
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					var audioEnergyObj = response.audioEnergy;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnRemoteMicrophoneEnergy)
							VidyoEndpointObj.VidyoEndpointOnRemoteMicrophoneEnergy(VidyoRemoteMicrophoneObj,VidyoParticipantObj,audioEnergyObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnRemoteMicrophoneEnergyComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, remoteMicrophone: response.VidyoRemoteMicrophone ? response.VidyoRemoteMicrophone.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnRemoteMicrophoneFrame: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoRemoteMicrophoneObj = (response.VidyoRemoteMicrophone) ? objects[response.VidyoRemoteMicrophone.objId] : null;
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					var VidyoAudioFrameObj = (response.VidyoAudioFrame) ? objects[response.VidyoAudioFrame.objId] : null;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnRemoteMicrophoneFrame)
							VidyoEndpointObj.VidyoEndpointOnRemoteMicrophoneFrame(VidyoRemoteMicrophoneObj,VidyoParticipantObj,VidyoAudioFrameObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnRemoteMicrophoneFrameComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, remoteMicrophone: response.VidyoRemoteMicrophone ? response.VidyoRemoteMicrophone.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0, audioFrame: response.VidyoAudioFrame ? response.VidyoAudioFrame.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnRemoteMicrophoneRemoved: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoRemoteMicrophoneObj = objects[response.VidyoRemoteMicrophone.objId];
					delete objects[response.VidyoRemoteMicrophone.objId];
					var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
					var VidyoCallObj = (response.VidyoCall) ? objects[response.VidyoCall.objId] : null;
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnRemoteMicrophoneRemoved)
							VidyoEndpointObj.VidyoEndpointOnRemoteMicrophoneRemoved(VidyoRemoteMicrophoneObj,VidyoUserObj,VidyoCallObj,VidyoRoomObj,VidyoParticipantObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnRemoteMicrophoneRemovedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, remoteMicrophone: response.VidyoRemoteMicrophone ? response.VidyoRemoteMicrophone.objId : 0, user: response.VidyoUser ? response.VidyoUser.objId : 0, call: response.VidyoCall ? response.VidyoCall.objId : 0, room: response.VidyoRoom ? response.VidyoRoom.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnRemoteMicrophoneStateUpdated: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoRemoteMicrophoneObj = (response.VidyoRemoteMicrophone) ? objects[response.VidyoRemoteMicrophone.objId] : null;
					var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
					var VidyoCallObj = (response.VidyoCall) ? objects[response.VidyoCall.objId] : null;
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					var stateObj = response.state;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnRemoteMicrophoneStateUpdated)
							VidyoEndpointObj.VidyoEndpointOnRemoteMicrophoneStateUpdated(VidyoRemoteMicrophoneObj,VidyoUserObj,VidyoCallObj,VidyoRoomObj,VidyoParticipantObj,stateObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnRemoteMicrophoneStateUpdatedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, remoteMicrophone: response.VidyoRemoteMicrophone ? response.VidyoRemoteMicrophone.objId : 0, user: response.VidyoUser ? response.VidyoUser.objId : 0, call: response.VidyoCall ? response.VidyoCall.objId : 0, room: response.VidyoRoom ? response.VidyoRoom.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnRemoteRendererAdded: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoRemoteRendererObj = new this.VidyoRemoteRenderer(null);
					vcUtilsExtend(VidyoRemoteRendererObj, response.VidyoRemoteRenderer);
					objects[VidyoRemoteRendererObj.objId] = VidyoRemoteRendererObj;
					var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
					var VidyoCallObj = (response.VidyoCall) ? objects[response.VidyoCall.objId] : null;
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnRemoteRendererAdded)
							VidyoEndpointObj.VidyoEndpointOnRemoteRendererAdded(VidyoRemoteRendererObj,VidyoUserObj,VidyoCallObj,VidyoRoomObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnRemoteRendererAddedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, remoteRenderer: response.VidyoRemoteRenderer ? response.VidyoRemoteRenderer.objId : 0, user: response.VidyoUser ? response.VidyoUser.objId : 0, call: response.VidyoCall ? response.VidyoCall.objId : 0, room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnRemoteRendererRemoved: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoRemoteRendererObj = objects[response.VidyoRemoteRenderer.objId];
					delete objects[response.VidyoRemoteRenderer.objId];
					var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
					var VidyoCallObj = (response.VidyoCall) ? objects[response.VidyoCall.objId] : null;
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnRemoteRendererRemoved)
							VidyoEndpointObj.VidyoEndpointOnRemoteRendererRemoved(VidyoRemoteRendererObj,VidyoUserObj,VidyoCallObj,VidyoRoomObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnRemoteRendererRemovedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, remoteRenderer: response.VidyoRemoteRenderer ? response.VidyoRemoteRenderer.objId : 0, user: response.VidyoUser ? response.VidyoUser.objId : 0, call: response.VidyoCall ? response.VidyoCall.objId : 0, room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnRemoteRendererStateUpdated: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoRemoteRendererObj = (response.VidyoRemoteRenderer) ? objects[response.VidyoRemoteRenderer.objId] : null;
					var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
					var VidyoCallObj = (response.VidyoCall) ? objects[response.VidyoCall.objId] : null;
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var stateObj = response.state;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnRemoteRendererStateUpdated)
							VidyoEndpointObj.VidyoEndpointOnRemoteRendererStateUpdated(VidyoRemoteRendererObj,VidyoUserObj,VidyoCallObj,VidyoRoomObj,stateObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnRemoteRendererStateUpdatedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, remoteRenderer: response.VidyoRemoteRenderer ? response.VidyoRemoteRenderer.objId : 0, user: response.VidyoUser ? response.VidyoUser.objId : 0, call: response.VidyoCall ? response.VidyoCall.objId : 0, room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnRemoteSpeakerAdded: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoRemoteSpeakerObj = new this.VidyoRemoteSpeaker(null);
					vcUtilsExtend(VidyoRemoteSpeakerObj, response.VidyoRemoteSpeaker);
					objects[VidyoRemoteSpeakerObj.objId] = VidyoRemoteSpeakerObj;
					var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
					var VidyoCallObj = (response.VidyoCall) ? objects[response.VidyoCall.objId] : null;
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnRemoteSpeakerAdded)
							VidyoEndpointObj.VidyoEndpointOnRemoteSpeakerAdded(VidyoRemoteSpeakerObj,VidyoUserObj,VidyoCallObj,VidyoRoomObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnRemoteSpeakerAddedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, remoteSpeaker: response.VidyoRemoteSpeaker ? response.VidyoRemoteSpeaker.objId : 0, user: response.VidyoUser ? response.VidyoUser.objId : 0, call: response.VidyoCall ? response.VidyoCall.objId : 0, room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnRemoteSpeakerRemoved: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoRemoteSpeakerObj = objects[response.VidyoRemoteSpeaker.objId];
					delete objects[response.VidyoRemoteSpeaker.objId];
					var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
					var VidyoCallObj = (response.VidyoCall) ? objects[response.VidyoCall.objId] : null;
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnRemoteSpeakerRemoved)
							VidyoEndpointObj.VidyoEndpointOnRemoteSpeakerRemoved(VidyoRemoteSpeakerObj,VidyoUserObj,VidyoCallObj,VidyoRoomObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnRemoteSpeakerRemovedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, remoteSpeaker: response.VidyoRemoteSpeaker ? response.VidyoRemoteSpeaker.objId : 0, user: response.VidyoUser ? response.VidyoUser.objId : 0, call: response.VidyoCall ? response.VidyoCall.objId : 0, room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnRemoteSpeakerStateUpdated: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoRemoteSpeakerObj = (response.VidyoRemoteSpeaker) ? objects[response.VidyoRemoteSpeaker.objId] : null;
					var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
					var VidyoCallObj = (response.VidyoCall) ? objects[response.VidyoCall.objId] : null;
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var stateObj = response.state;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnRemoteSpeakerStateUpdated)
							VidyoEndpointObj.VidyoEndpointOnRemoteSpeakerStateUpdated(VidyoRemoteSpeakerObj,VidyoUserObj,VidyoCallObj,VidyoRoomObj,stateObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnRemoteSpeakerStateUpdatedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, remoteSpeaker: response.VidyoRemoteSpeaker ? response.VidyoRemoteSpeaker.objId : 0, user: response.VidyoUser ? response.VidyoUser.objId : 0, call: response.VidyoCall ? response.VidyoCall.objId : 0, room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnRemoteWindowShareAdded: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoRemoteWindowShareObj = new this.VidyoRemoteWindowShare(null);
					vcUtilsExtend(VidyoRemoteWindowShareObj, response.VidyoRemoteWindowShare);
					objects[VidyoRemoteWindowShareObj.objId] = VidyoRemoteWindowShareObj;
					var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
					var VidyoCallObj = (response.VidyoCall) ? objects[response.VidyoCall.objId] : null;
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnRemoteWindowShareAdded)
							VidyoEndpointObj.VidyoEndpointOnRemoteWindowShareAdded(VidyoRemoteWindowShareObj,VidyoUserObj,VidyoCallObj,VidyoRoomObj,VidyoParticipantObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnRemoteWindowShareAddedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, remoteWindowShare: response.VidyoRemoteWindowShare ? response.VidyoRemoteWindowShare.objId : 0, user: response.VidyoUser ? response.VidyoUser.objId : 0, call: response.VidyoCall ? response.VidyoCall.objId : 0, room: response.VidyoRoom ? response.VidyoRoom.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnRemoteWindowShareFirstFrameReceived: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoRemoteWindowShareObj = (response.VidyoRemoteWindowShare) ? objects[response.VidyoRemoteWindowShare.objId] : null;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnRemoteWindowShareFirstFrameReceived)
							VidyoEndpointObj.VidyoEndpointOnRemoteWindowShareFirstFrameReceived(VidyoRemoteWindowShareObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnRemoteWindowShareFirstFrameReceivedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, remoteWindowShare: response.VidyoRemoteWindowShare ? response.VidyoRemoteWindowShare.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnRemoteWindowShareFrame: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoRemoteWindowShareObj = (response.VidyoRemoteWindowShare) ? objects[response.VidyoRemoteWindowShare.objId] : null;
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					var VidyoVideoFrameObj = (response.VidyoVideoFrame) ? objects[response.VidyoVideoFrame.objId] : null;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnRemoteWindowShareFrame)
							VidyoEndpointObj.VidyoEndpointOnRemoteWindowShareFrame(VidyoRemoteWindowShareObj,VidyoParticipantObj,VidyoVideoFrameObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnRemoteWindowShareFrameComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, remoteWindowShare: response.VidyoRemoteWindowShare ? response.VidyoRemoteWindowShare.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0, videoFrame: response.VidyoVideoFrame ? response.VidyoVideoFrame.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnRemoteWindowShareRemoved: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoRemoteWindowShareObj = objects[response.VidyoRemoteWindowShare.objId];
					delete objects[response.VidyoRemoteWindowShare.objId];
					var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
					var VidyoCallObj = (response.VidyoCall) ? objects[response.VidyoCall.objId] : null;
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnRemoteWindowShareRemoved)
							VidyoEndpointObj.VidyoEndpointOnRemoteWindowShareRemoved(VidyoRemoteWindowShareObj,VidyoUserObj,VidyoCallObj,VidyoRoomObj,VidyoParticipantObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnRemoteWindowShareRemovedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, remoteWindowShare: response.VidyoRemoteWindowShare ? response.VidyoRemoteWindowShare.objId : 0, user: response.VidyoUser ? response.VidyoUser.objId : 0, call: response.VidyoCall ? response.VidyoCall.objId : 0, room: response.VidyoRoom ? response.VidyoRoom.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnRemoteWindowShareStateUpdated: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoRemoteWindowShareObj = (response.VidyoRemoteWindowShare) ? objects[response.VidyoRemoteWindowShare.objId] : null;
					var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
					var VidyoCallObj = (response.VidyoCall) ? objects[response.VidyoCall.objId] : null;
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					var stateObj = response.state;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnRemoteWindowShareStateUpdated)
							VidyoEndpointObj.VidyoEndpointOnRemoteWindowShareStateUpdated(VidyoRemoteWindowShareObj,VidyoUserObj,VidyoCallObj,VidyoRoomObj,VidyoParticipantObj,stateObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnRemoteWindowShareStateUpdatedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, remoteWindowShare: response.VidyoRemoteWindowShare ? response.VidyoRemoteWindowShare.objId : 0, user: response.VidyoUser ? response.VidyoUser.objId : 0, call: response.VidyoCall ? response.VidyoCall.objId : 0, room: response.VidyoRoom ? response.VidyoRoom.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnVirtualAudioSourceAdded: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoVirtualAudioSourceObj = new this.VidyoVirtualAudioSource(response.VidyoVirtualAudioSource);
					objects[VidyoVirtualAudioSourceObj.objId] = VidyoVirtualAudioSourceObj;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnVirtualAudioSourceAdded)
							VidyoEndpointObj.VidyoEndpointOnVirtualAudioSourceAdded(VidyoVirtualAudioSourceObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnVirtualAudioSourceAddedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, virtualAudioSource: response.VidyoVirtualAudioSource ? response.VidyoVirtualAudioSource.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnVirtualAudioSourceExternalMediaBufferReleased: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoVirtualAudioSourceObj = (response.VidyoVirtualAudioSource) ? objects[response.VidyoVirtualAudioSource.objId] : null;
					var bufferObj = response.buffer;
					var sizeObj = response.size;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnVirtualAudioSourceExternalMediaBufferReleased)
							VidyoEndpointObj.VidyoEndpointOnVirtualAudioSourceExternalMediaBufferReleased(VidyoVirtualAudioSourceObj,bufferObj,sizeObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnVirtualAudioSourceExternalMediaBufferReleasedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, virtualAudioSource: response.VidyoVirtualAudioSource ? response.VidyoVirtualAudioSource.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnVirtualAudioSourceRemoved: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoVirtualAudioSourceObj = objects[response.VidyoVirtualAudioSource.objId];
					delete objects[response.VidyoVirtualAudioSource.objId];
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnVirtualAudioSourceRemoved)
							VidyoEndpointObj.VidyoEndpointOnVirtualAudioSourceRemoved(VidyoVirtualAudioSourceObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnVirtualAudioSourceRemovedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, virtualAudioSource: response.VidyoVirtualAudioSource ? response.VidyoVirtualAudioSource.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnVirtualAudioSourceSelected: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoVirtualAudioSourceObj = (response.VidyoVirtualAudioSource) ? objects[response.VidyoVirtualAudioSource.objId] : null;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnVirtualAudioSourceSelected)
							VidyoEndpointObj.VidyoEndpointOnVirtualAudioSourceSelected(VidyoVirtualAudioSourceObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnVirtualAudioSourceSelectedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, virtualAudioSource: response.VidyoVirtualAudioSource ? response.VidyoVirtualAudioSource.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnVirtualAudioSourceStateUpdated: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoVirtualAudioSourceObj = (response.VidyoVirtualAudioSource) ? objects[response.VidyoVirtualAudioSource.objId] : null;
					var stateObj = response.state;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnVirtualAudioSourceStateUpdated)
							VidyoEndpointObj.VidyoEndpointOnVirtualAudioSourceStateUpdated(VidyoVirtualAudioSourceObj,stateObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnVirtualAudioSourceStateUpdatedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, virtualAudioSource: response.VidyoVirtualAudioSource ? response.VidyoVirtualAudioSource.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnVirtualVideoSourceAdded: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoVirtualVideoSourceObj = new this.VidyoVirtualVideoSource(response.VidyoVirtualVideoSource);
					objects[VidyoVirtualVideoSourceObj.objId] = VidyoVirtualVideoSourceObj;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnVirtualVideoSourceAdded)
							VidyoEndpointObj.VidyoEndpointOnVirtualVideoSourceAdded(VidyoVirtualVideoSourceObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnVirtualVideoSourceAddedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, virtualVideoSource: response.VidyoVirtualVideoSource ? response.VidyoVirtualVideoSource.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnVirtualVideoSourceExternalMediaBufferReleased: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoVirtualVideoSourceObj = (response.VidyoVirtualVideoSource) ? objects[response.VidyoVirtualVideoSource.objId] : null;
					var bufferObj = response.buffer;
					var sizeObj = response.size;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnVirtualVideoSourceExternalMediaBufferReleased)
							VidyoEndpointObj.VidyoEndpointOnVirtualVideoSourceExternalMediaBufferReleased(VidyoVirtualVideoSourceObj,bufferObj,sizeObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnVirtualVideoSourceExternalMediaBufferReleasedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, virtualVideoSource: response.VidyoVirtualVideoSource ? response.VidyoVirtualVideoSource.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnVirtualVideoSourceRemoved: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoVirtualVideoSourceObj = objects[response.VidyoVirtualVideoSource.objId];
					delete objects[response.VidyoVirtualVideoSource.objId];
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnVirtualVideoSourceRemoved)
							VidyoEndpointObj.VidyoEndpointOnVirtualVideoSourceRemoved(VidyoVirtualVideoSourceObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnVirtualVideoSourceRemovedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, virtualVideoSource: response.VidyoVirtualVideoSource ? response.VidyoVirtualVideoSource.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoEndpointOnVirtualVideoSourceStateUpdated: function(response) {
					var VidyoEndpointObj = (response.VidyoEndpoint) ? objects[response.VidyoEndpoint.objId] : null;
					var VidyoVirtualVideoSourceObj = (response.VidyoVirtualVideoSource) ? objects[response.VidyoVirtualVideoSource.objId] : null;
					var stateObj = response.state;
					try {
						if (VidyoEndpointObj && VidyoEndpointObj.VidyoEndpointOnVirtualVideoSourceStateUpdated)
							VidyoEndpointObj.VidyoEndpointOnVirtualVideoSourceStateUpdated(VidyoVirtualVideoSourceObj,stateObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoEndpointOnVirtualVideoSourceStateUpdatedComplete?" + vcUtilsParam({ e: response.VidyoEndpoint ? response.VidyoEndpoint.objId : 0, virtualVideoSource: response.VidyoVirtualVideoSource ? response.VidyoVirtualVideoSource.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoParticipantOnGetContactComplete: function(response) {
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					var VidyoContactObj = (response.VidyoContact) ? response.VidyoContact : null;
					var resultObj = response.result;
					try {
						if (VidyoParticipantObj && VidyoParticipantObj.VidyoParticipantOnGetContactComplete)
							VidyoParticipantObj.VidyoParticipantOnGetContactComplete(VidyoContactObj,resultObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoParticipantOnGetContactCompleteComplete?" + vcUtilsParam({ p: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnAvailableResourcesChanged: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var cpuEncodeObj = response.cpuEncode;
					var cpuDecodeObj = response.cpuDecode;
					var bandwidthSendObj = response.bandwidthSend;
					var bandwidthReceiveObj = response.bandwidthReceive;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnAvailableResourcesChanged)
							VidyoRoomObj.VidyoRoomOnAvailableResourcesChanged(cpuEncodeObj,cpuDecodeObj,bandwidthSendObj,bandwidthReceiveObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnAvailableResourcesChangedComplete?" + vcUtilsParam({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnConferenceHostStatusChanged: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					var hostStateObj = response.hostState;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnConferenceHostStatusChanged)
							VidyoRoomObj.VidyoRoomOnConferenceHostStatusChanged(VidyoParticipantObj,hostStateObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnConferenceHostStatusChangedComplete?" + vcUtilsParam({ r: response.VidyoRoom ? response.VidyoRoom.objId : 0, host: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnConferenceModeChanged: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var modeObj = response.mode;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnConferenceModeChanged)
							VidyoRoomObj.VidyoRoomOnConferenceModeChanged(modeObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnConferenceModeChangedComplete?" + vcUtilsParam({ r: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnConnectionPropertiesChanged: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var VidyoRoomConnectionPropertiesObj = (response.VidyoRoomConnectionProperties) ? response.VidyoRoomConnectionProperties : null;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnConnectionPropertiesChanged)
							VidyoRoomObj.VidyoRoomOnConnectionPropertiesChanged(VidyoRoomConnectionPropertiesObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnConnectionPropertiesChangedComplete?" + vcUtilsParam({ r: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnDeleteResult: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var resultObj = response.result;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnDeleteResult)
							VidyoRoomObj.VidyoRoomOnDeleteResult(resultObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnDeleteResultComplete?" + vcUtilsParam({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnDynamicParticipantChanged: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var selectedParticipantsObj = response.selectedParticipants;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnDynamicParticipantChanged)
							VidyoRoomObj.VidyoRoomOnDynamicParticipantChanged(selectedParticipantsObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnDynamicParticipantChangedComplete?" + vcUtilsParam({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnEntered: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var resultObj = response.result;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnEntered)
							VidyoRoomObj.VidyoRoomOnEntered(resultObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnEnteredComplete?" + vcUtilsParam({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnExited: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var reasonObj = response.reason;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnExited)
							VidyoRoomObj.VidyoRoomOnExited(reasonObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnExitedComplete?" + vcUtilsParam({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnGetHistoryResults: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var recordsObj = response.records;
					var historySizeObj = response.historySize;
					var resultObj = response.result;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnGetHistoryResults)
							VidyoRoomObj.VidyoRoomOnGetHistoryResults(recordsObj,historySizeObj,resultObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnGetHistoryResultsComplete?" + vcUtilsParam({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnGetRoomPropertiesResult: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var resultObj = response.result;
					var VidyoRoomPropertiesObj = (response.VidyoRoomProperties) ? response.VidyoRoomProperties : null;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnGetRoomPropertiesResult)
							VidyoRoomObj.VidyoRoomOnGetRoomPropertiesResult(resultObj,VidyoRoomPropertiesObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnGetRoomPropertiesResultComplete?" + vcUtilsParam({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnGetSelectedLocalCamerasComplete: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var camerasObj = response.cameras;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnGetSelectedLocalCamerasComplete)
							VidyoRoomObj.VidyoRoomOnGetSelectedLocalCamerasComplete(camerasObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnGetSelectedLocalCamerasCompleteComplete?" + vcUtilsParam({ r: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnGetSelectedLocalMicrophonesComplete: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var microphonesObj = response.microphones;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnGetSelectedLocalMicrophonesComplete)
							VidyoRoomObj.VidyoRoomOnGetSelectedLocalMicrophonesComplete(microphonesObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnGetSelectedLocalMicrophonesCompleteComplete?" + vcUtilsParam({ r: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnGetSelectedLocalMonitorsComplete: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var monitorsObj = response.monitors;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnGetSelectedLocalMonitorsComplete)
							VidyoRoomObj.VidyoRoomOnGetSelectedLocalMonitorsComplete(monitorsObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnGetSelectedLocalMonitorsCompleteComplete?" + vcUtilsParam({ r: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnGetSelectedLocalRenderersComplete: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var renderersObj = response.renderers;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnGetSelectedLocalRenderersComplete)
							VidyoRoomObj.VidyoRoomOnGetSelectedLocalRenderersComplete(renderersObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnGetSelectedLocalRenderersCompleteComplete?" + vcUtilsParam({ r: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnGetSelectedLocalSpeakersComplete: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var speakersObj = response.speakers;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnGetSelectedLocalSpeakersComplete)
							VidyoRoomObj.VidyoRoomOnGetSelectedLocalSpeakersComplete(speakersObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnGetSelectedLocalSpeakersCompleteComplete?" + vcUtilsParam({ r: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnGetSelectedLocalWindowSharesComplete: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var windowSharesObj = response.windowShares;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnGetSelectedLocalWindowSharesComplete)
							VidyoRoomObj.VidyoRoomOnGetSelectedLocalWindowSharesComplete(windowSharesObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnGetSelectedLocalWindowSharesCompleteComplete?" + vcUtilsParam({ r: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnHandRaised: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var participantObj = response.participant;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnHandRaised)
							VidyoRoomObj.VidyoRoomOnHandRaised(participantObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnHandRaisedComplete?" + vcUtilsParam({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnInCallEvents: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var VidyoRoomInCallEventObj = (response.VidyoRoomInCallEvent) ? response.VidyoRoomInCallEvent : null;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnInCallEvents)
							VidyoRoomObj.VidyoRoomOnInCallEvents(VidyoRoomInCallEventObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnInCallEventsComplete?" + vcUtilsParam({ r: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnIncomingEntered: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var resultObj = response.result;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnIncomingEntered)
							VidyoRoomObj.VidyoRoomOnIncomingEntered(resultObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnIncomingEnteredComplete?" + vcUtilsParam({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnIncomingExited: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var reasonObj = response.reason;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnIncomingExited)
							VidyoRoomObj.VidyoRoomOnIncomingExited(reasonObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnIncomingExitedComplete?" + vcUtilsParam({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnInviteResult: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var inviteeIdObj = response.inviteeId;
					var resultObj = response.result;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnInviteResult)
							VidyoRoomObj.VidyoRoomOnInviteResult(inviteeIdObj,resultObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnInviteResultComplete?" + vcUtilsParam({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnLockRoomResult: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var resultObj = response.result;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnLockRoomResult)
							VidyoRoomObj.VidyoRoomOnLockRoomResult(resultObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnLockRoomResultComplete?" + vcUtilsParam({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnLoudestParticipantChanged: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					var isAudioOnlyObj = response.isAudioOnly;
					var isStaticObj = response.isStatic;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnLoudestParticipantChanged)
							VidyoRoomObj.VidyoRoomOnLoudestParticipantChanged(VidyoParticipantObj,isAudioOnlyObj,isStaticObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnLoudestParticipantChangedComplete?" + vcUtilsParam({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnMaxRemoteSourcesChanged: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var maxRemoteSourcesObj = response.maxRemoteSources;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnMaxRemoteSourcesChanged)
							VidyoRoomObj.VidyoRoomOnMaxRemoteSourcesChanged(maxRemoteSourcesObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnMaxRemoteSourcesChangedComplete?" + vcUtilsParam({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnMediaDisabled: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var reasonObj = response.reason;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnMediaDisabled)
							VidyoRoomObj.VidyoRoomOnMediaDisabled(reasonObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnMediaDisabledComplete?" + vcUtilsParam({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnMediaEnabled: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnMediaEnabled)
							VidyoRoomObj.VidyoRoomOnMediaEnabled();
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnMediaEnabledComplete?" + vcUtilsParam({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnMediaFailed: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var reasonObj = response.reason;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnMediaFailed)
							VidyoRoomObj.VidyoRoomOnMediaFailed(reasonObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnMediaFailedComplete?" + vcUtilsParam({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnMediaRouteAcquireFailed: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var reasonObj = response.reason;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnMediaRouteAcquireFailed)
							VidyoRoomObj.VidyoRoomOnMediaRouteAcquireFailed(reasonObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnMediaRouteAcquireFailedComplete?" + vcUtilsParam({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnMediaRouteAcquired: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnMediaRouteAcquired)
							VidyoRoomObj.VidyoRoomOnMediaRouteAcquired();
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnMediaRouteAcquiredComplete?" + vcUtilsParam({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnMessageAcknowledged: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var VidyoChatMessageObj = (response.VidyoChatMessage) ? response.VidyoChatMessage : null;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnMessageAcknowledged)
							VidyoRoomObj.VidyoRoomOnMessageAcknowledged(VidyoChatMessageObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnMessageAcknowledgedComplete?" + vcUtilsParam({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnMessageRead: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					var messageIdObj = response.messageId;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnMessageRead)
							VidyoRoomObj.VidyoRoomOnMessageRead(VidyoParticipantObj,messageIdObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnMessageReadComplete?" + vcUtilsParam({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnMessageReceived: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					var VidyoChatMessageObj = (response.VidyoChatMessage) ? response.VidyoChatMessage : null;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnMessageReceived)
							VidyoRoomObj.VidyoRoomOnMessageReceived(VidyoParticipantObj,VidyoChatMessageObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnMessageReceivedComplete?" + vcUtilsParam({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnMessageSearchResults: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var searchTextObj = response.searchText;
					var recordsObj = response.records;
					var resultObj = response.result;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnMessageSearchResults)
							VidyoRoomObj.VidyoRoomOnMessageSearchResults(searchTextObj,recordsObj,resultObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnMessageSearchResultsComplete?" + vcUtilsParam({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnMessageTypingIndication: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					var typingIndicationObj = response.typingIndication;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnMessageTypingIndication)
							VidyoRoomObj.VidyoRoomOnMessageTypingIndication(VidyoParticipantObj,typingIndicationObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnMessageTypingIndicationComplete?" + vcUtilsParam({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnModerationCommandReceived: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var deviceTypeObj = response.deviceType;
					var moderationTypeObj = response.moderationType;
					var stateObj = response.state;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnModerationCommandReceived)
							VidyoRoomObj.VidyoRoomOnModerationCommandReceived(deviceTypeObj,moderationTypeObj,stateObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnModerationCommandReceivedComplete?" + vcUtilsParam({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnModerationResult: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					var resultObj = response.result;
					var actionTypeObj = response.actionType;
					var requestIdObj = response.requestId;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnModerationResult)
							VidyoRoomObj.VidyoRoomOnModerationResult(VidyoParticipantObj,resultObj,actionTypeObj,requestIdObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnModerationResultComplete?" + vcUtilsParam({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnParticipantJoined: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var VidyoParticipantObj = (response.VidyoParticipant) ? new this.VidyoParticipant(null) : null;
					if(response.VidyoParticipant){
						vcUtilsExtend(VidyoParticipantObj, response.VidyoParticipant);
						objects[VidyoParticipantObj.objId] = VidyoParticipantObj;
					}
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnParticipantJoined)
							VidyoRoomObj.VidyoRoomOnParticipantJoined(VidyoParticipantObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnParticipantJoinedComplete?" + vcUtilsParam({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnParticipantLeft: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var VidyoParticipantObj = objects[response.VidyoParticipant.objId];
					delete objects[response.VidyoParticipant.objId];
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnParticipantLeft)
							VidyoRoomObj.VidyoRoomOnParticipantLeft(VidyoParticipantObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnParticipantLeftComplete?" + vcUtilsParam({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnPipLocationChanged: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var xObj = response.x;
					var yObj = response.y;
					var widthObj = response.width;
					var heightObj = response.height;
					var isExpandedObj = response.isExpanded;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnPipLocationChanged)
							VidyoRoomObj.VidyoRoomOnPipLocationChanged(xObj,yObj,widthObj,heightObj,isExpandedObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnPipLocationChangedComplete?" + vcUtilsParam({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnPresenterChanged: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var VidyoParticipantObj = (response.VidyoParticipant) ? objects[response.VidyoParticipant.objId] : null;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnPresenterChanged)
							VidyoRoomObj.VidyoRoomOnPresenterChanged(VidyoParticipantObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnPresenterChangedComplete?" + vcUtilsParam({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0, participant: response.VidyoParticipant ? response.VidyoParticipant.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnRaiseHandResponse: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var handStateObj = response.handState;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnRaiseHandResponse)
							VidyoRoomObj.VidyoRoomOnRaiseHandResponse(handStateObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnRaiseHandResponseComplete?" + vcUtilsParam({ r: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnRecordingServicePauseResult: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var resultObj = response.result;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnRecordingServicePauseResult)
							VidyoRoomObj.VidyoRoomOnRecordingServicePauseResult(resultObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnRecordingServicePauseResultComplete?" + vcUtilsParam({ r: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnRecordingServiceResumeResult: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var resultObj = response.result;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnRecordingServiceResumeResult)
							VidyoRoomObj.VidyoRoomOnRecordingServiceResumeResult(resultObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnRecordingServiceResumeResultComplete?" + vcUtilsParam({ r: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnRecordingServiceStartResult: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var resultObj = response.result;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnRecordingServiceStartResult)
							VidyoRoomObj.VidyoRoomOnRecordingServiceStartResult(resultObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnRecordingServiceStartResultComplete?" + vcUtilsParam({ r: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnRecordingServiceStopResult: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var resultObj = response.result;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnRecordingServiceStopResult)
							VidyoRoomObj.VidyoRoomOnRecordingServiceStopResult(resultObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnRecordingServiceStopResultComplete?" + vcUtilsParam({ r: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnRemoveRoomPINResult: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var resultObj = response.result;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnRemoveRoomPINResult)
							VidyoRoomObj.VidyoRoomOnRemoveRoomPINResult(resultObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnRemoveRoomPINResultComplete?" + vcUtilsParam({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnRequestRoleChangeResult: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var resultObj = response.result;
					var requestIdObj = response.requestId;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnRequestRoleChangeResult)
							VidyoRoomObj.VidyoRoomOnRequestRoleChangeResult(resultObj,requestIdObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnRequestRoleChangeResultComplete?" + vcUtilsParam({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnRoomPropertiesChanged: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var VidyoRoomPropertiesObj = (response.VidyoRoomProperties) ? response.VidyoRoomProperties : null;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnRoomPropertiesChanged)
							VidyoRoomObj.VidyoRoomOnRoomPropertiesChanged(VidyoRoomPropertiesObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnRoomPropertiesChangedComplete?" + vcUtilsParam({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnSetFavoriteResult: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var isFavoriteObj = response.isFavorite;
					var resultObj = response.result;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnSetFavoriteResult)
							VidyoRoomObj.VidyoRoomOnSetFavoriteResult(isFavoriteObj,resultObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnSetFavoriteResultComplete?" + vcUtilsParam({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnSetRoomPINResult: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var resultObj = response.result;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnSetRoomPINResult)
							VidyoRoomObj.VidyoRoomOnSetRoomPINResult(resultObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnSetRoomPINResultComplete?" + vcUtilsParam({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnSetRoomPropertiesResult: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var resultObj = response.result;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnSetRoomPropertiesResult)
							VidyoRoomObj.VidyoRoomOnSetRoomPropertiesResult(resultObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnSetRoomPropertiesResultComplete?" + vcUtilsParam({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnSetRoomPropertyResult: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var resultObj = response.result;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnSetRoomPropertyResult)
							VidyoRoomObj.VidyoRoomOnSetRoomPropertyResult(resultObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnSetRoomPropertyResultComplete?" + vcUtilsParam({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnSetSubject: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var subjectObj = response.subject;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnSetSubject)
							VidyoRoomObj.VidyoRoomOnSetSubject(subjectObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnSetSubjectComplete?" + vcUtilsParam({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnUnlockRoomResult: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var resultObj = response.result;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnUnlockRoomResult)
							VidyoRoomObj.VidyoRoomOnUnlockRoomResult(resultObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnUnlockRoomResultComplete?" + vcUtilsParam({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnUnprocessedAudioStarted: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var startedObj = response.started;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnUnprocessedAudioStarted)
							VidyoRoomObj.VidyoRoomOnUnprocessedAudioStarted(startedObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnUnprocessedAudioStartedComplete?" + vcUtilsParam({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomOnUnprocessedAudioSupportChanged: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var supportedObj = response.supported;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomOnUnprocessedAudioSupportChanged)
							VidyoRoomObj.VidyoRoomOnUnprocessedAudioSupportChanged(supportedObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomOnUnprocessedAudioSupportChangedComplete?" + vcUtilsParam({ room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoRoomRecorderInCall: function(response) {
					var VidyoRoomObj = (response.VidyoRoom) ? objects[response.VidyoRoom.objId] : null;
					var hasRecorderObj = response.hasRecorder;
					var isPausedObj = response.isPaused;
					try {
						if (VidyoRoomObj && VidyoRoomObj.VidyoRoomRecorderInCall)
							VidyoRoomObj.VidyoRoomRecorderInCall(hasRecorderObj,isPausedObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoRoomRecorderInCallComplete?" + vcUtilsParam({ r: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoUserOnAuthTypes: function(response) {
					var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
					var resultObj = response.result;
					var authTypesObj = response.authTypes;
					try {
						if (VidyoUserObj && VidyoUserObj.VidyoUserOnAuthTypes)
							VidyoUserObj.VidyoUserOnAuthTypes(resultObj,authTypesObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoUserOnAuthTypesComplete?" + vcUtilsParam({ u: response.VidyoUser ? response.VidyoUser.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoUserOnAuthTypesWebProxyCredentialsRequest: function(response) {
					var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
					var webProxyAddressObj = response.webProxyAddress;
					try {
						if (VidyoUserObj && VidyoUserObj.VidyoUserOnAuthTypesWebProxyCredentialsRequest)
							VidyoUserObj.VidyoUserOnAuthTypesWebProxyCredentialsRequest(webProxyAddressObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoUserOnAuthTypesWebProxyCredentialsRequestComplete?" + vcUtilsParam({ u: response.VidyoUser ? response.VidyoUser.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoUserOnCallCreated: function(response) {
					var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
					var VidyoCallObj = (response.VidyoCall) ? new this.VidyoCall(null) : null;
					if(response.VidyoCall){
						vcUtilsExtend(VidyoCallObj, response.VidyoCall);
						objects[VidyoCallObj.objId] = VidyoCallObj;
					}
					var resultObj = response.result;
					var createTokenObj = response.createToken;
					try {
						if (VidyoUserObj && VidyoUserObj.VidyoUserOnCallCreated)
							VidyoUserObj.VidyoUserOnCallCreated(VidyoCallObj,resultObj,createTokenObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoUserOnCallCreatedComplete?" + vcUtilsParam({ u: response.VidyoUser ? response.VidyoUser.objId : 0, call: response.VidyoCall ? response.VidyoCall.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoUserOnCallCreatedByInvite: function(response) {
					var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
					var VidyoCallObj = (response.VidyoCall) ? new this.VidyoCall(null) : null;
					if(response.VidyoCall){
						vcUtilsExtend(VidyoCallObj, response.VidyoCall);
						objects[VidyoCallObj.objId] = VidyoCallObj;
					}
					var VidyoContactObj = (response.VidyoContact) ? response.VidyoContact : null;
					try {
						if (VidyoUserObj && VidyoUserObj.VidyoUserOnCallCreatedByInvite)
							VidyoUserObj.VidyoUserOnCallCreatedByInvite(VidyoCallObj,VidyoContactObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoUserOnCallCreatedByInviteComplete?" + vcUtilsParam({ u: response.VidyoUser ? response.VidyoUser.objId : 0, call: response.VidyoCall ? response.VidyoCall.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoUserOnConnectionStatusChanged: function(response) {
					var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
					var reasonObj = response.reason;
					try {
						if (VidyoUserObj && VidyoUserObj.VidyoUserOnConnectionStatusChanged)
							VidyoUserObj.VidyoUserOnConnectionStatusChanged(reasonObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoUserOnConnectionStatusChangedComplete?" + vcUtilsParam({ u: response.VidyoUser ? response.VidyoUser.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoUserOnFavoriteRoomResults: function(response) {
					var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
					var searchResultObj = response.searchResult;
					var roomInfoObj = response.roomInfo;
					try {
						if (VidyoUserObj && VidyoUserObj.VidyoUserOnFavoriteRoomResults)
							VidyoUserObj.VidyoUserOnFavoriteRoomResults(searchResultObj,roomInfoObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoUserOnFavoriteRoomResultsComplete?" + vcUtilsParam({ u: response.VidyoUser ? response.VidyoUser.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoUserOnGetContactResult: function(response) {
					var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
					var VidyoContactObj = (response.VidyoContact) ? response.VidyoContact : null;
					var resultObj = response.result;
					try {
						if (VidyoUserObj && VidyoUserObj.VidyoUserOnGetContactResult)
							VidyoUserObj.VidyoUserOnGetContactResult(VidyoContactObj,resultObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoUserOnGetContactResultComplete?" + vcUtilsParam({ u: response.VidyoUser ? response.VidyoUser.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoUserOnGetCurrentRosterComplete: function(response) {
					var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
					var rosterObj = response.roster;
					try {
						if (VidyoUserObj && VidyoUserObj.VidyoUserOnGetCurrentRosterComplete)
							VidyoUserObj.VidyoUserOnGetCurrentRosterComplete(rosterObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoUserOnGetCurrentRosterCompleteComplete?" + vcUtilsParam({ u: response.VidyoUser ? response.VidyoUser.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoUserOnGetLicenseKey: function(response) {
					var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
					var licenseKeyObj = response.licenseKey;
					try {
						if (VidyoUserObj && VidyoUserObj.VidyoUserOnGetLicenseKey)
							VidyoUserObj.VidyoUserOnGetLicenseKey(licenseKeyObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoUserOnGetLicenseKeyComplete?" + vcUtilsParam({ u: response.VidyoUser ? response.VidyoUser.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoUserOnGetRecordingServiceProfiles: function(response) {
					var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
					var profilesObj = response.profiles;
					var prefixesObj = response.prefixes;
					var resultObj = response.result;
					try {
						if (VidyoUserObj && VidyoUserObj.VidyoUserOnGetRecordingServiceProfiles)
							VidyoUserObj.VidyoUserOnGetRecordingServiceProfiles(profilesObj,prefixesObj,resultObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoUserOnGetRecordingServiceProfilesComplete?" + vcUtilsParam({ u: response.VidyoUser ? response.VidyoUser.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoUserOnLicenseReceived: function(response) {
					var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
					var licenseKeyObj = response.licenseKey;
					try {
						if (VidyoUserObj && VidyoUserObj.VidyoUserOnLicenseReceived)
							VidyoUserObj.VidyoUserOnLicenseReceived(licenseKeyObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoUserOnLicenseReceivedComplete?" + vcUtilsParam({ u: response.VidyoUser ? response.VidyoUser.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoUserOnLoggedOut: function(response) {
					var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
					var reasonObj = response.reason;
					try {
						if (VidyoUserObj && VidyoUserObj.VidyoUserOnLoggedOut)
							VidyoUserObj.VidyoUserOnLoggedOut(reasonObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoUserOnLoggedOutComplete?" + vcUtilsParam({ u: response.VidyoUser ? response.VidyoUser.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoUserOnLoginComplete: function(response) {
					var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
					var resultObj = response.result;
					var secureObj = response.secure;
					var VidyoTenantCapabilitiesObj = (response.VidyoTenantCapabilities) ? response.VidyoTenantCapabilities : null;
					try {
						if (VidyoUserObj && VidyoUserObj.VidyoUserOnLoginComplete)
							VidyoUserObj.VidyoUserOnLoginComplete(resultObj,secureObj,VidyoTenantCapabilitiesObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoUserOnLoginCompleteComplete?" + vcUtilsParam({ u: response.VidyoUser ? response.VidyoUser.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoUserOnPasswordResetUrl: function(response) {
					var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
					var passwordResetUrlObj = response.passwordResetUrl;
					try {
						if (VidyoUserObj && VidyoUserObj.VidyoUserOnPasswordResetUrl)
							VidyoUserObj.VidyoUserOnPasswordResetUrl(passwordResetUrlObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoUserOnPasswordResetUrlComplete?" + vcUtilsParam({ u: response.VidyoUser ? response.VidyoUser.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoUserOnRecentRoomResults: function(response) {
					var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
					var searchResultObj = response.searchResult;
					var roomInfoObj = response.roomInfo;
					try {
						if (VidyoUserObj && VidyoUserObj.VidyoUserOnRecentRoomResults)
							VidyoUserObj.VidyoUserOnRecentRoomResults(searchResultObj,roomInfoObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoUserOnRecentRoomResultsComplete?" + vcUtilsParam({ u: response.VidyoUser ? response.VidyoUser.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoUserOnRemoveRosterContact: function(response) {
					var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
					var uriObj = response.uri;
					try {
						if (VidyoUserObj && VidyoUserObj.VidyoUserOnRemoveRosterContact)
							VidyoUserObj.VidyoUserOnRemoveRosterContact(uriObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoUserOnRemoveRosterContactComplete?" + vcUtilsParam({ u: response.VidyoUser ? response.VidyoUser.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoUserOnRoomCreated: function(response) {
					var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
					var VidyoRoomObj = (response.VidyoRoom) ? new this.VidyoRoom(null) : null;
					if(response.VidyoRoom){
						vcUtilsExtend(VidyoRoomObj, response.VidyoRoom);
						objects[VidyoRoomObj.objId] = VidyoRoomObj;
					}
					var resultObj = response.result;
					var createTokenObj = response.createToken;
					try {
						if (VidyoUserObj && VidyoUserObj.VidyoUserOnRoomCreated)
							VidyoUserObj.VidyoUserOnRoomCreated(VidyoRoomObj,resultObj,createTokenObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoUserOnRoomCreatedComplete?" + vcUtilsParam({ u: response.VidyoUser ? response.VidyoUser.objId : 0, room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoUserOnRoomCreatedByInvite: function(response) {
					var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
					var VidyoRoomObj = (response.VidyoRoom) ? new this.VidyoRoom(null) : null;
					if(response.VidyoRoom){
						vcUtilsExtend(VidyoRoomObj, response.VidyoRoom);
						objects[VidyoRoomObj.objId] = VidyoRoomObj;
					}
					var VidyoContactObj = (response.VidyoContact) ? response.VidyoContact : null;
					var messageObj = response.message;
					try {
						if (VidyoUserObj && VidyoUserObj.VidyoUserOnRoomCreatedByInvite)
							VidyoUserObj.VidyoUserOnRoomCreatedByInvite(VidyoRoomObj,VidyoContactObj,messageObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoUserOnRoomCreatedByInviteComplete?" + vcUtilsParam({ u: response.VidyoUser ? response.VidyoUser.objId : 0, room: response.VidyoRoom ? response.VidyoRoom.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoUserOnRoomInviteCancelled: function(response) {
					var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
					var VidyoRoomInfoObj = (response.VidyoRoomInfo) ? response.VidyoRoomInfo : null;
					var messageObj = response.message;
					try {
						if (VidyoUserObj && VidyoUserObj.VidyoUserOnRoomInviteCancelled)
							VidyoUserObj.VidyoUserOnRoomInviteCancelled(VidyoRoomInfoObj,messageObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoUserOnRoomInviteCancelledComplete?" + vcUtilsParam({ u: response.VidyoUser ? response.VidyoUser.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoUserOnRoomSearchResults: function(response) {
					var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
					var searchTextObj = response.searchText;
					var searchResultObj = response.searchResult;
					var roomInfoObj = response.roomInfo;
					var numRecordsObj = response.numRecords;
					try {
						if (VidyoUserObj && VidyoUserObj.VidyoUserOnRoomSearchResults)
							VidyoUserObj.VidyoUserOnRoomSearchResults(searchTextObj,searchResultObj,roomInfoObj,numRecordsObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoUserOnRoomSearchResultsComplete?" + vcUtilsParam({ u: response.VidyoUser ? response.VidyoUser.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoUserOnTokenReceived: function(response) {
					var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
					var tokenObj = response.token;
					var tokenTypeObj = response.tokenType;
					try {
						if (VidyoUserObj && VidyoUserObj.VidyoUserOnTokenReceived)
							VidyoUserObj.VidyoUserOnTokenReceived(tokenObj,tokenTypeObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoUserOnTokenReceivedComplete?" + vcUtilsParam({ u: response.VidyoUser ? response.VidyoUser.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoUserOnUpdateRosterContact: function(response) {
					var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
					var VidyoContactObj = (response.VidyoContact) ? response.VidyoContact : null;
					try {
						if (VidyoUserObj && VidyoUserObj.VidyoUserOnUpdateRosterContact)
							VidyoUserObj.VidyoUserOnUpdateRosterContact(VidyoContactObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoUserOnUpdateRosterContactComplete?" + vcUtilsParam({ u: response.VidyoUser ? response.VidyoUser.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoUserOnUpdateSelf: function(response) {
					var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
					var VidyoContactObj = (response.VidyoContact) ? response.VidyoContact : null;
					try {
						if (VidyoUserObj && VidyoUserObj.VidyoUserOnUpdateSelf)
							VidyoUserObj.VidyoUserOnUpdateSelf(VidyoContactObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoUserOnUpdateSelfComplete?" + vcUtilsParam({ u: response.VidyoUser ? response.VidyoUser.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoUserOnUserSearchResults: function(response) {
					var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
					var searchTextObj = response.searchText;
					var searchResultObj = response.searchResult;
					var contactsObj = response.contacts;
					var numRecordsObj = response.numRecords;
					try {
						if (VidyoUserObj && VidyoUserObj.VidyoUserOnUserSearchResults)
							VidyoUserObj.VidyoUserOnUserSearchResults(searchTextObj,searchResultObj,contactsObj,numRecordsObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoUserOnUserSearchResultsComplete?" + vcUtilsParam({ u: response.VidyoUser ? response.VidyoUser.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoUserOnWebProxyCredentialsRequest: function(response) {
					var VidyoUserObj = (response.VidyoUser) ? objects[response.VidyoUser.objId] : null;
					var webProxyAddressObj = response.webProxyAddress;
					try {
						if (VidyoUserObj && VidyoUserObj.VidyoUserOnWebProxyCredentialsRequest)
							VidyoUserObj.VidyoUserOnWebProxyCredentialsRequest(webProxyAddressObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoUserOnWebProxyCredentialsRequestComplete?" + vcUtilsParam({ u: response.VidyoUser ? response.VidyoUser.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoMeetingFeedbackGetMeetingAttendeeResults: function(response) {
					var VidyoMeetingFeedbackObj = (response.VidyoMeetingFeedback) ? objects[response.VidyoMeetingFeedback.objId] : null;
					var VidyoMeetingObj = (response.VidyoMeeting) ? objects[response.VidyoMeeting.objId] : null;
					var attendeeListObj = response.attendeeList;
					var searchResultObj = response.searchResult;
					var currentIndexObj = response.currentIndex;
					var numRecordsObj = response.numRecords;
					try {
						if (VidyoMeetingFeedbackObj && VidyoMeetingFeedbackObj.VidyoMeetingFeedbackGetMeetingAttendeeResults)
							VidyoMeetingFeedbackObj.VidyoMeetingFeedbackGetMeetingAttendeeResults(VidyoMeetingObj,attendeeListObj,searchResultObj,currentIndexObj,numRecordsObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoMeetingFeedbackGetMeetingAttendeeResultsComplete?" + vcUtilsParam({ f: response.VidyoMeetingFeedback ? response.VidyoMeetingFeedback.objId : 0, meeting: response.VidyoMeeting ? response.VidyoMeeting.objId : 0 }), function(){}, function(){});
					}
				},
				VidyoNetworkServiceResponseCB: function(response) {
					var VidyoNetworkServiceObj = (response.VidyoNetworkService) ? objects[response.VidyoNetworkService.objId] : null;
					var VidyoNetworkServiceResponseHeaderObj = (response.VidyoNetworkServiceResponseHeader) ? response.VidyoNetworkServiceResponseHeader : null;
					var userDataObj = response.userData;
					try {
						if (VidyoNetworkServiceObj && VidyoNetworkServiceObj.VidyoNetworkServiceResponseCB)
							VidyoNetworkServiceObj.VidyoNetworkServiceResponseCB(VidyoNetworkServiceResponseHeaderObj,userDataObj);
					} catch(e) {
						window.console && window.console.error && window.console.error(e);
					} finally {
						return GetRequest("VidyoNetworkServiceResponseCBComplete?" + vcUtilsParam({ networkService: response.VidyoNetworkService ? response.VidyoNetworkService.objId : 0 }), function(){}, function(){});
					}
				},
			};

			this.GetVersion = function() {
				var data = GetRequest("GetVersion");
				if(data)
					return data.version;
				return null;
			}
			function ReceiveFeedbacks(contextObj, response){
				if (response && response.data && response.result == "ok") {
					for (var feedbackId = 0; feedbackId < response.data.length; feedbackId++) {
						var feedback = response.data[feedbackId];
						callbacks[feedback.callback].call(contextObj, feedback);
					}
				}
			}
			function GetRequest(request, asyncSuccess, asyncFailure) {
				try {
					if(typeof(asyncSuccess) === 'undefined')
						response = transport.SendMessage(request);
					else
						response = transport.SendMessage(request, asyncSuccess, asyncFailure, true);
				} catch(err) {
					return undefined;
				}
				if (response && response.result == "ok"){
					if(response.data)
						return response.data;
					else
						return true;
				} else {
					return undefined;
				}
			}
			function UpdateViewOnDOM(args) {
				return transport.UpdateViewOnDOM(args);
			}
			function MissingArgumentException(err, expected, given){
				this.error = err + " - " + expected.filter(function(x){ return given.indexOf(x) < 0; });
				console.log(this.error);
			}
			var objects = new Object();
			var onStatus = onStatus;
			var transport = new VidyoClientTransport(this, onStatus, ReceiveFeedbacks, plugInDivId);
		}
		return VidyoClient;
	}());
	VidyoClientLib.VidyoClient = VidyoClient;
})(VidyoClientLib || (VidyoClientLib = {}));
/* vcUtilsParam */
!function(e){"use strict";e.vcUtilsParam=function(e){function i(e,n){n=null===(n="function"==typeof n?n():n)?"":void 0===n?"":n,f[f.length]=encodeURIComponent(e)+"="+encodeURIComponent(n)}var f=[],c=function(e,n){var t,o,r;if(e)if(Array.isArray(n))for(t=0,o=n.length;t<o;t++)c(e+"["+("object"==typeof n[t]&&n[t]?t:"")+"]",n[t]);else if("[object Object]"===String(n))for(r in n)c(e+"["+r+"]",n[r]);else i(e,n);else if(Array.isArray(n))for(t=0,o=n.length;t<o;t++)i(n[t].name,n[t].value);else for(r in n)c(r,n[r]);return f};return c("",e).join("&")}}(this);
/* vcUtilsExtend */
!function(a){"use strict";function l(t){if("object"!==y(t)||t.nodeType||function(t){return null!=t&&t===t.window}(t))return!1;try{if(t.constructor&&!e.call(t.constructor.prototype,"isPrototypeOf"))return!1}catch(t){return!1}return!0}var o={"[object Boolean]":"boolean","[object Number]":"number","[object String]":"string","[object Function]":"function","[object Array]":"array","[object Date]":"date","[object RegExp]":"regexp","[object Object]":"object","[object Error]":"error"},r=o.toString,e=o.hasOwnProperty,j=Array.isArray,y=function(t){return null==t?String(t):"object"==typeof t||"function"==typeof t?o[r.call(t)]||"object":typeof t};a.vcUtilsExtend=function(){var t,o,r,e,n,c,i=arguments[0]||{},u=1,f=arguments.length,b=!1;for("boolean"==typeof i&&(b=i,i=arguments[1]||{},u=2),"object"==typeof i||function(t){return"function"===y(t)}(i)||(i={}),f===u&&(i={},--u);u<f;u++)if(null!=(t=arguments[u]))for(o in t)r=i[o],i!==(e=t[o])&&(b&&e&&(l(e)||(n=j(e)))?(c=n?(n=!1,r&&j(r)?r:[]):r&&l(r)?r:{},i[o]=a.vcUtilsExtend(b,c,e)):void 0!==e&&(i[o]=e));return i}}(this);

